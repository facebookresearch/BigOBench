{"problem_name": "300_A. Array", "problem_id": "1717", "solution_id": "1717_238", "solution_code": "#A. Array\nn = int(input())\na,b,c =[],[],[]\nl = list(map(int,input().split()))\nfor i in l:\n    if i<0:\n        a.append(i)\n    elif i>0:\n        b.append(i)\n    else:\n        c.append(i)\n\nif len(b)==0 and len(a)>2:\n    b.append(a.pop())\n    b.append(a.pop()) \nif len(a)%2==0:\n    c.append(a.pop())    \nprint(len(a),*a)\nprint(len(b),*b)\nprint(len(c),*c)", "dataclass_code": "import sys\nimport time\nimport itertools\nfrom itertools import accumulate, product, permutations, combinations\nimport collections\nfrom collections import Counter, OrderedDict, deque, defaultdict, ChainMap\nfrom functools import lru_cache\nimport math\nfrom math import sqrt, sin, cos, tan, ceil, fabs, floor, gcd, exp, log, log2\nimport fractions\nfrom typing import List, Tuple\nimport numpy as np\nimport random\nimport heapq\nfrom heapq import *\nfrom dataclasses import dataclass\n\nimport builtins\nimport re\n\ndef strip(s, characters = None):\n    if characters is None:\n        characters = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n    else:\n        characters = list(characters)\n\n    characters = [x for x in characters if len(x) > 0] \n\n    i = 0\n    while i < len(s):\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[i:i + len(sep_candidate)] == sep_candidate:\n                found_sep_candidate = True\n                i += len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    j = len(s) - 1\n    while j >= 0:\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[j + 1 - len(sep_candidate):j+1] == sep_candidate:\n                found_sep_candidate = True\n                j -= len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    return s[i:j+1]\n\ndef split(s, sep=None, maxsplit=-1):\n    if sep == '':\n        raise builtins.ValueError('empty separator')\n\n    if type(sep) == list and '' in sep:\n        raise builtins.ValueError('empty separator')\n\n    if sep is None:\n        sep = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n        result = []\n        word = ''\n        count_split = 0\n        \n        if maxsplit == -1:\n            maxsplit = len(s) * 1000\n\n        i = 0\n        while i < len(s):\n            found_sep_candidate = False\n\n            for sep_candidate in sep:\n                if s[i:i + len(sep_candidate)] == sep_candidate:\n                    found_sep_candidate = True\n\n                    if word:\n                        result.append(word)\n                        count_split += 1\n                        word = ''\n\n                    i += len(sep_candidate)\n                    break\n\n            if not found_sep_candidate and count_split < maxsplit:\n                word += s[i]\n                i += 1\n\n            elif not found_sep_candidate and count_split >= maxsplit:\n                word += s[i:]\n                i = len(s)\n\n        if word:\n            result.append(word)\n        return result\n    \n    if type(sep) == str:\n        sep = [sep]\n\n    if maxsplit == -1:\n        maxsplit = 0\n    elif maxsplit == 0:\n        maxsplit = -1\n\n    return re.split(re.compile(\"|\".join([re.escape(x) for x in sep])), s, maxsplit=maxsplit)\n\nclass str_escaped(str):\n    def split(self, sep=None, maxsplit=-1):\n        return split(self, sep=sep, maxsplit=maxsplit)\n    \n    def strip(self, chars=None):\n        return strip(self, characters = chars)\n\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Input:\n    n: int\n    a_list: List[int]\n\n    @classmethod\n    def from_str(cls, input_: str):\n        n, a_list, _ = input_.split('\\n')\n        n = int(n)\n        a_list = list(map(int, a_list.split()))\n        assert n == len(a_list)\n        return cls(n, a_list)\n\n    def __repr__(self):\n        return str(self.n) + '\\n' + ' '.join(map(str, self.a_list)) + '\\n'\n", "inputs_example": "4\n-1 -2 -3 0\n"}
