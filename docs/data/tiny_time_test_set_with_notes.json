{"127_B. Canvas Frames": {"O(n)": {"problem_name": "127_B. Canvas Frames", "problem_id": "659", "solution_id": "659_55", "description": "Nicholas, a painter is going to paint several new canvases. Nicholas is sure that the canvases will turn out so great that each one will need framing and being hung on the wall. Frames are what Nicholas decided to begin with. \n\nNicholas has n sticks whose lengths equal a1, a2, ... an. Nicholas does not want to break the sticks or glue them together. To make a h \u00d7 w-sized frame, he needs two sticks whose lengths equal h and two sticks whose lengths equal w. Specifically, to make a square frame (when h = w), he needs four sticks of the same length.\n\nNow Nicholas wants to make from the sticks that he has as many frames as possible; to be able to paint as many canvases as possible to fill the frames. Help him in this uneasy task. Note that it is not necessary to use all the sticks Nicholas has.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 100) \u2014 the number of sticks. The second line contains n space-separated integers. The i-th integer equals the length of the i-th stick ai (1 \u2264 ai \u2264 100).\n\nOutput\n\nPrint the single number \u2014 the maximum number of frames Nicholas can make for his future canvases.\n\nExamples\n\nInput\n\n5\n2 4 3 2 3\n\n\nOutput\n\n1\n\nInput\n\n13\n2 2 4 4 4 4 6 6 6 7 7 9 9\n\n\nOutput\n\n3\n\nInput\n\n4\n3 3 3 5\n\n\nOutput\n\n0", "solution_code": "n = int(input())\na = input()\na = a.split()\ndic = {}\nfor i in a:\n    dic[i] = dic.get(i, 0) + 1\nc = 0\nfor v in dic.values():\n    c += v//2\nprint(c//2)", "dataclass_code": "import sys\nimport time\nimport itertools\nfrom itertools import accumulate, product, permutations, combinations\nimport collections\nfrom collections import Counter, OrderedDict, deque, defaultdict, ChainMap\nfrom functools import lru_cache\nimport math\nfrom math import sqrt, sin, cos, tan, ceil, fabs, floor, gcd, exp, log, log2\nimport fractions\nfrom typing import List, Tuple\nimport numpy as np\nimport random\nimport heapq\nfrom heapq import *\nfrom dataclasses import dataclass\n\nimport builtins\nimport re\n\ndef strip(s, characters = None):\n    if characters is None:\n        characters = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n    else:\n        characters = list(characters)\n\n    characters = [x for x in characters if len(x) > 0] \n\n    i = 0\n    while i < len(s):\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[i:i + len(sep_candidate)] == sep_candidate:\n                found_sep_candidate = True\n                i += len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    j = len(s) - 1\n    while j >= 0:\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[j + 1 - len(sep_candidate):j+1] == sep_candidate:\n                found_sep_candidate = True\n                j -= len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    return s[i:j+1]\n\ndef split(s, sep=None, maxsplit=-1):\n    if sep == '':\n        raise builtins.ValueError('empty separator')\n\n    if type(sep) == list and '' in sep:\n        raise builtins.ValueError('empty separator')\n\n    if sep is None:\n        sep = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n        result = []\n        word = ''\n        count_split = 0\n        \n        if maxsplit == -1:\n            maxsplit = len(s) * 1000\n\n        i = 0\n        while i < len(s):\n            found_sep_candidate = False\n\n            for sep_candidate in sep:\n                if s[i:i + len(sep_candidate)] == sep_candidate:\n                    found_sep_candidate = True\n\n                    if word:\n                        result.append(word)\n                        count_split += 1\n                        word = ''\n\n                    i += len(sep_candidate)\n                    break\n\n            if not found_sep_candidate and count_split < maxsplit:\n                word += s[i]\n                i += 1\n\n            elif not found_sep_candidate and count_split >= maxsplit:\n                word += s[i:]\n                i = len(s)\n\n        if word:\n            result.append(word)\n        return result\n    \n    if type(sep) == str:\n        sep = [sep]\n\n    if maxsplit == -1:\n        maxsplit = 0\n    elif maxsplit == 0:\n        maxsplit = -1\n\n    return re.split(re.compile(\"|\".join([re.escape(x) for x in sep])), s, maxsplit=maxsplit)\n\nclass str_escaped(str):\n    def split(self, sep=None, maxsplit=-1):\n        return split(self, sep=sep, maxsplit=maxsplit)\n    \n    def strip(self, chars=None):\n        return strip(self, characters = chars)\n\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Input:\n    n: int\n    ratings: List[int]\n\n    @classmethod\n    def from_str(cls, input_: str):\n        n, ratings, _ = input_.split('\\n')\n        n = int(n)\n        ratings = list(map(int, ratings.split()))\n        assert n == len(ratings)\n        return cls(n, ratings)\n\n    def __repr__(self):\n        return str(self.n) + '\\n' + ' '.join(map(str, self.ratings)) + '\\n'\n", "inputs_example": "5\n2 4 3 2 3\n", "time_complexity_inferred": "O(n)", "time_curve_coefficient": 3.1658101917613637e-06, "tests": {"public_tests": [{"input": "5\n2 4 3 2 3\n", "output": "1"}, {"input": "13\n2 2 4 4 4 4 6 6 6 7 7 9 9\n", "output": "3"}, {"input": "4\n3 3 3 5\n", "output": "0"}], "private_tests": [{"input": "4\n1 1 1 1\n", "output": "1"}, {"input": "7\n1 2 1 1 1 1 1\n", "output": "1"}, {"input": "10\n1 1 1 1 1 1 1 1 2 2\n", "output": "2"}, {"input": "38\n65 69 80 93 28 36 40 81 53 75 55 50 82 95 8 51 66 65 50 4 40 92 18 70 38 68 42 100 34 57 98 79 95 84 82 35 100 89\n", "output": "3"}, {"input": "8\n1 2 3 4 5 6 7 7\n", "output": "0"}, {"input": "1\n1\n", "output": "0"}, {"input": "100\n70 70 75 70 74 70 70 73 72 73 74 75 70 74 73 70 70 74 72 72 75 70 73 72 70 75 73 70 74 70 73 75 71 74 70 71 75 74 75 71 74 70 73 73 70 75 71 73 73 74 73 74 71 73 73 71 72 71 70 75 74 74 72 72 71 72 75 75 70 73 71 73 72 71 70 75 71 75 73 75 73 72 75 71 73 71 72 74 75 70 70 74 75 73 70 73 73 75 71 74\n", "output": "24"}, {"input": "49\n75 64 7 2 1 66 31 84 78 53 34 5 40 90 7 62 86 54 99 77 8 92 30 3 18 18 61 38 38 11 79 88 84 89 50 94 72 8 54 85 100 1 19 4 97 91 13 39 91\n", "output": "4"}, {"input": "2\n1 1\n", "output": "0"}, {"input": "5\n1 1 2 3 3\n", "output": "1"}, {"input": "5\n2 2 3 4 4\n", "output": "1"}, {"input": "8\n8 6 3 4 5 2 1 7\n", "output": "0"}, {"input": "8\n1 1 1 1 1 1 1 1\n", "output": "2"}, {"input": "5\n1 4 4 1 1\n", "output": "1"}, {"input": "14\n2 4 2 6 2 3 4 1 4 5 4 3 4 1\n", "output": "2"}, {"input": "4\n100 100 100 99\n", "output": "0"}, {"input": "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "25"}, {"input": "7\n13 13 13 13 6 2 3\n", "output": "1"}, {"input": "4\n4 4 4 4\n", "output": "1"}, {"input": "8\n1 2 3 4 5 5 5 5\n", "output": "1"}, {"input": "7\n1 1 2 2 1 2 3\n", "output": "1"}, {"input": "5\n100 1 100 100 100\n", "output": "1"}, {"input": "13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n", "output": "0"}, {"input": "20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "5"}, {"input": "6\n1 100 100 1 1 1\n", "output": "1"}, {"input": "10\n19 9 14 14 19 5 5 18 10 17\n", "output": "1"}, {"input": "13\n35 6 21 30 67 55 70 39 75 72 11 13 69\n", "output": "0"}, {"input": "5\n1 1 1 1 1\n", "output": "1"}, {"input": "6\n1 1 5 1 1 5\n", "output": "1"}, {"input": "3\n1 2 2\n", "output": "0"}, {"input": "4\n10 100 100 10\n", "output": "1"}, {"input": "7\n7 6 5 4 3 2 1\n", "output": "0"}, {"input": "7\n1 3 2 2 3 1 4\n", "output": "1"}, {"input": "6\n1 50 1 100 50 100\n", "output": "1"}, {"input": "5\n100 100 1 1 100\n", "output": "1"}, {"input": "9\n1 2 3 4 5 6 7 8 9\n", "output": "0"}, {"input": "57\n83 94 42 57 19 9 40 25 56 92 9 38 58 66 43 19 50 10 100 3 49 96 77 36 20 3 48 15 38 19 99 100 66 14 52 13 16 73 65 99 29 85 75 18 97 64 57 82 70 19 16 25 40 11 9 22 89\n", "output": "6"}, {"input": "7\n1 3 4 3 5 4 6\n", "output": "1"}, {"input": "7\n1 1 1 1 1 1 1\n", "output": "1"}, {"input": "10\n93 93 99 98 91 96 92 98 94 98\n", "output": "1"}, {"input": "5\n100 100 99 99 2\n", "output": "1"}, {"input": "4\n100 100 100 100\n", "output": "1"}, {"input": "10\n1 1 1 1 1 1 1 1 1 1\n", "output": "2"}, {"input": "5\n100 100 100 100 100\n", "output": "1"}, {"input": "87\n10 19 83 58 15 48 26 58 89 46 50 34 81 40 25 51 62 85 9 80 71 44 100 22 30 48 74 69 54 40 38 81 66 42 40 90 60 20 75 24 74 98 28 62 79 65 65 6 14 23 3 59 29 24 64 13 8 38 29 85 75 81 36 42 3 63 99 24 72 92 35 8 71 19 77 77 66 3 79 65 15 18 15 69 60 77 91\n", "output": "11"}, {"input": "8\n100 100 100 100 100 100 100 100\n", "output": "2"}, {"input": "8\n1 2 3 4 1 2 3 4\n", "output": "2"}, {"input": "8\n2 2 2 2 2 2 2 2\n", "output": "2"}, {"input": "1\n10\n", "output": "0"}, {"input": "4\n1 2 3 3\n", "output": "0"}, {"input": "3\n1 1 1\n", "output": "0"}, {"input": "5\n100 100 99 99 5\n", "output": "1"}, {"input": "23\n88 82 2 67 4 6 67 83 77 58 48 64 86 37 96 83 35 46 13 79 72 18 35\n", "output": "1"}, {"input": "33\n1 2 2 6 10 10 33 11 17 32 25 6 7 29 11 32 33 8 13 17 17 6 11 11 11 8 10 26 29 26 32 33 36\n", "output": "5"}, {"input": "4\n1 100 1 100\n", "output": "1"}, {"input": "8\n1 2 2 1 1 2 2 2\n", "output": "1"}, {"input": "17\n90 97 12 56 94 11 49 96 22 7 15 48 71 71 94 72 100\n", "output": "1"}, {"input": "40\n4 2 62 38 76 68 19 71 44 91 76 31 3 63 56 62 93 98 10 61 52 59 81 46 23 27 36 26 24 38 37 66 15 16 78 41 95 82 73 90\n", "output": "1"}, {"input": "43\n62 31 14 43 67 2 60 77 64 70 91 9 3 43 76 7 56 84 5 20 88 50 47 42 7 39 8 56 71 24 49 59 70 61 81 17 76 44 80 61 77 5 96\n", "output": "4"}, {"input": "100\n99 98 98 99 98 98 98 100 98 99 99 98 99 98 98 98 99 99 98 99 99 100 98 100 98 98 98 99 98 100 100 98 100 99 100 98 99 99 99 98 100 98 100 99 99 99 98 100 98 98 98 100 100 99 98 98 100 100 100 99 98 99 99 99 100 99 99 98 99 98 99 100 100 98 98 100 100 99 99 99 98 98 98 100 99 99 100 99 100 99 98 100 98 100 98 98 99 98 99 98\n", "output": "24"}, {"input": "74\n90 26 58 69 87 23 44 9 32 25 33 13 79 84 52 90 4 7 93 77 29 85 22 1 96 69 98 16 76 87 57 16 44 41 57 28 18 70 77 83 37 17 59 87 27 19 89 63 14 84 77 40 46 77 82 73 86 73 30 58 6 30 70 36 31 12 43 50 93 3 3 57 38 91\n", "output": "7"}, {"input": "4\n1 2 1 2\n", "output": "1"}, {"input": "5\n30 30 30 1 1\n", "output": "1"}, {"input": "6\n10 10 10 12 13 14\n", "output": "0"}, {"input": "8\n1 2 3 4 5 6 1 7\n", "output": "0"}, {"input": "18\n39 72 67 28 69 41 43 51 66 99 4 57 68 93 28 27 37 27\n", "output": "1"}, {"input": "8\n1 2 2 2 3 1 1 3\n", "output": "1"}, {"input": "4\n8 5 9 13\n", "output": "0"}, {"input": "8\n1 2 1 2 2 2 2 2\n", "output": "2"}, {"input": "2\n3 5\n", "output": "0"}, {"input": "3\n3 2 1\n", "output": "0"}, {"input": "7\n1 2 2 1 2 1 2\n", "output": "1"}, {"input": "8\n4 4 4 4 4 4 4 4\n", "output": "2"}, {"input": "10\n72 86 73 25 84 29 33 34 20 29\n", "output": "0"}, {"input": "6\n100 1 1 100 1 100\n", "output": "1"}, {"input": "33\n1 3 34 55 38 58 64 26 66 44 50 63 46 62 62 99 73 87 35 20 30 38 39 85 49 24 93 68 8 25 86 30 51\n", "output": "1"}, {"input": "6\n1 2 3 2 3 1\n", "output": "1"}, {"input": "8\n1 2 1 3 4 1 5 6\n", "output": "0"}, {"input": "5\n1 100 1 1 100\n", "output": "1"}, {"input": "4\n2 2 2 2\n", "output": "1"}, {"input": "100\n94 87 92 91 94 89 93 94 87 93 93 94 89 91 87 87 92 91 87 94 90 89 92 92 87 88 90 90 90 89 90 92 91 91 89 88 93 89 88 94 91 89 88 87 92 89 91 87 88 90 88 92 90 87 93 94 94 92 92 87 90 88 88 91 94 93 87 94 93 93 87 90 92 92 90 88 88 90 92 91 90 88 89 91 91 88 90 93 90 94 94 93 90 91 91 93 94 94 92 93\n", "output": "24"}, {"input": "9\n1 1 1 1 1 1 1 1 1\n", "output": "2"}, {"input": "100\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n", "output": "25"}, {"input": "100\n1 9 3 5 10 10 9 8 10 1 7 6 5 6 7 9 1 5 8 3 2 3 3 10 2 3 10 7 10 3 6 3 2 10 1 10 2 3 4 3 3 1 7 5 10 2 3 8 9 2 5 4 7 2 5 9 2 1 7 9 9 8 4 4 6 1 6 6 4 7 2 3 1 1 1 6 9 1 2 9 3 7 6 10 3 6 2 5 2 5 3 9 10 6 4 2 9 9 4 5\n", "output": "23"}, {"input": "30\n43 34 38 50 47 24 26 20 7 5 26 29 98 87 90 46 10 53 88 61 90 39 78 81 65 13 72 95 53 27\n", "output": "1"}, {"input": "8\n1 1 1 1 2 3 2 3\n", "output": "2"}, {"input": "6\n1 1 1 1 1 1\n", "output": "1"}, {"input": "67\n36 22 22 86 52 53 36 68 46 82 99 37 15 43 57 35 33 99 22 96 7 8 80 93 70 70 55 51 61 74 6 28 85 72 84 42 29 1 4 71 7 40 61 95 93 36 42 61 16 40 10 85 31 86 93 19 44 20 52 66 10 22 40 53 25 29 23\n", "output": "8"}], "generated_tests": [{"input": "7\n1 4 1 1 1 1 1\n", "output": "1\n"}, {"input": "10\n1 1 1 1 1 1 2 1 2 2\n", "output": "2\n"}, {"input": "38\n65 69 80 93 28 36 40 81 53 75 25 50 82 95 8 51 66 65 50 4 40 92 18 70 38 68 42 100 34 57 98 79 95 84 82 35 100 89\n", "output": "3\n"}, {"input": "5\n2 2 3 5 4\n", "output": "0\n"}, {"input": "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "24\n"}, {"input": "57\n83 94 42 57 19 9 40 25 56 92 9 38 58 66 43 19 50 10 100 3 58 96 77 36 20 3 48 15 38 19 99 100 66 14 52 13 16 73 65 99 29 85 75 18 97 64 57 82 70 19 16 25 40 11 9 22 89\n", "output": "6\n"}, {"input": "33\n1 2 2 6 10 10 33 11 17 32 25 6 7 29 11 32 33 8 13 17 17 6 11 11 9 8 10 26 29 26 32 33 36\n", "output": "5\n"}, {"input": "43\n62 31 14 3 67 2 60 77 64 70 91 9 3 43 76 7 56 84 5 20 88 50 47 42 7 39 8 56 71 24 49 59 70 61 81 17 76 44 80 61 77 5 96\n", "output": "4\n"}, {"input": "74\n90 26 58 69 87 23 44 9 32 25 33 13 79 84 52 90 4 7 93 77 29 85 22 1 96 69 98 16 76 87 57 16 44 41 57 28 18 70 77 83 37 17 59 87 27 19 89 63 14 84 77 40 46 27 82 73 86 73 30 58 6 30 70 36 31 12 43 50 93 3 3 57 38 91\n", "output": "7\n"}, {"input": "100\n1 9 3 5 10 10 9 8 10 1 7 6 5 6 7 9 1 5 8 3 2 3 3 10 2 3 10 7 10 3 9 3 2 10 1 10 2 3 4 3 3 1 7 5 10 2 3 8 9 2 5 4 7 2 5 9 2 1 7 9 9 8 4 4 6 1 6 6 4 7 2 3 1 1 1 6 9 1 2 9 3 7 6 10 3 6 2 5 2 5 3 9 10 6 4 2 9 9 4 5\n", "output": "23\n"}, {"input": "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "25\n"}, {"input": "8\n1 2 3 4 4 6 7 7\n", "output": "1\n"}, {"input": "49\n75 64 10 2 1 66 31 84 78 53 34 5 40 90 7 62 86 54 99 77 8 92 30 3 18 18 61 38 38 11 79 88 84 89 50 94 72 8 54 85 100 1 19 4 97 91 13 39 91\n", "output": "3\n"}, {"input": "5\n1 2 2 3 3\n", "output": "1\n"}, {"input": "8\n8 8 3 4 5 2 1 7\n", "output": "0\n"}, {"input": "8\n1 1 1 1 1 1 2 1\n", "output": "1\n"}, {"input": "5\n1 7 4 1 1\n", "output": "0\n"}, {"input": "7\n1 13 13 13 6 2 3\n", "output": "0\n"}, {"input": "4\n2 4 4 4\n", "output": "0\n"}, {"input": "8\n1 2 3 7 5 5 5 5\n", "output": "1\n"}, {"input": "7\n1 1 2 2 1 3 3\n", "output": "1\n"}, {"input": "13\n1 2 3 4 5 6 7 8 9 10 11 4 13\n", "output": "0\n"}, {"input": "10\n19 9 22 14 19 5 5 18 10 17\n", "output": "1\n"}, {"input": "3\n1 4 2\n", "output": "0\n"}, {"input": "4\n19 100 100 10\n", "output": "0\n"}, {"input": "7\n14 6 5 4 3 2 1\n", "output": "0\n"}, {"input": "6\n1 50 1 100 97 100\n", "output": "1\n"}, {"input": "9\n1 2 3 4 5 6 7 8 18\n", "output": "0\n"}, {"input": "8\n2 2 2 2 1 2 2 2\n", "output": "1\n"}, {"input": "1\n20\n", "output": "0\n"}, {"input": "3\n1 1 2\n", "output": "0\n"}, {"input": "23\n88 82 2 67 4 6 67 29 77 58 48 64 86 37 96 83 35 46 13 79 72 18 35\n", "output": "1\n"}, {"input": "40\n4 2 62 38 76 68 19 71 44 91 76 31 3 63 56 62 93 98 10 61 52 59 81 46 23 27 36 26 24 38 37 66 28 16 78 41 95 82 73 90\n", "output": "1\n"}, {"input": "4\n1 2 2 2\n", "output": "0\n"}, {"input": "6\n10 10 10 12 21 14\n", "output": "0\n"}, {"input": "8\n1 2 2 4 5 6 1 7\n", "output": "1\n"}, {"input": "4\n8 5 9 22\n", "output": "0\n"}, {"input": "8\n2 2 1 2 2 2 2 2\n", "output": "1\n"}, {"input": "2\n5 5\n", "output": "0\n"}, {"input": "3\n3 1 1\n", "output": "0\n"}, {"input": "8\n4 4 4 4 4 3 4 4\n", "output": "1\n"}, {"input": "10\n72 86 73 25 84 29 33 34 20 12\n", "output": "0\n"}, {"input": "6\n100 1 1 100 2 100\n", "output": "1\n"}, {"input": "33\n1 3 34 55 38 58 64 26 66 44 50 53 46 62 62 99 73 87 35 20 30 38 39 85 49 24 93 68 8 25 86 30 51\n", "output": "1\n"}, {"input": "6\n1 4 3 2 3 1\n", "output": "1\n"}, {"input": "8\n2 2 1 3 4 1 5 6\n", "output": "1\n"}, {"input": "4\n3 2 2 2\n", "output": "0\n"}, {"input": "100\n94 87 92 91 94 89 93 94 87 93 93 94 89 91 87 87 92 91 87 94 90 89 92 92 87 88 90 88 90 89 90 92 91 91 89 88 93 89 88 94 91 89 88 87 92 89 91 87 88 90 88 92 90 87 93 94 94 92 92 87 90 88 88 91 94 93 87 94 93 93 87 90 92 92 90 88 88 90 92 91 90 88 89 91 91 88 90 93 90 94 94 93 90 91 91 93 94 94 92 93\n", "output": "24\n"}, {"input": "30\n43 34 38 50 47 24 26 20 7 5 26 29 98 87 17 46 10 53 88 61 90 39 78 81 65 13 72 95 53 27\n", "output": "1\n"}, {"input": "8\n1 1 1 1 2 3 2 5\n", "output": "1\n"}, {"input": "6\n1 1 1 1 2 1\n", "output": "1\n"}, {"input": "13\n2 2 4 4 4 4 6 6 6 7 2 9 9\n", "output": "2\n"}, {"input": "4\n3 4 3 5\n", "output": "0\n"}, {"input": "10\n1 1 1 1 1 1 2 1 2 4\n", "output": "2\n"}, {"input": "8\n1 2 3 4 4 6 7 2\n", "output": "1\n"}, {"input": "5\n1 2 2 6 3\n", "output": "0\n"}, {"input": "5\n3 2 3 5 4\n", "output": "0\n"}, {"input": "8\n2 1 1 1 1 1 1 1\n", "output": "1\n"}, {"input": "5\n1 2 4 1 1\n", "output": "0\n"}, {"input": "7\n1 13 13 13 10 2 3\n", "output": "0\n"}, {"input": "4\n2 4 4 8\n", "output": "0\n"}, {"input": "8\n1 2 3 7 1 5 5 5\n", "output": "1\n"}, {"input": "13\n1 2 3 4 5 6 7 8 9 10 11 4 7\n", "output": "1\n"}, {"input": "3\n1 5 2\n", "output": "0\n"}, {"input": "4\n19 100 100 12\n", "output": "0\n"}, {"input": "7\n14 11 5 4 3 2 1\n", "output": "0\n"}, {"input": "9\n1 2 4 4 5 6 7 8 18\n", "output": "0\n"}, {"input": "57\n83 94 42 57 19 9 40 25 56 92 9 38 58 66 43 19 50 13 100 3 58 96 77 36 20 3 48 15 38 19 99 100 66 14 52 13 16 73 65 99 29 85 75 18 97 64 57 82 70 19 16 25 40 11 9 22 89\n", "output": "7\n"}, {"input": "8\n2 2 2 2 1 2 2 4\n", "output": "1\n"}, {"input": "1\n37\n", "output": "0\n"}, {"input": "33\n1 2 2 6 10 10 33 11 17 32 25 6 7 29 11 12 33 8 13 17 17 6 11 11 9 8 10 26 29 26 32 33 36\n", "output": "5\n"}, {"input": "40\n4 2 62 38 76 68 19 71 44 91 76 31 3 63 56 62 93 98 10 61 52 59 81 46 23 27 36 32 24 38 37 66 28 16 78 41 95 82 73 90\n", "output": "1\n"}, {"input": "74\n90 26 58 69 87 23 44 9 32 25 33 13 79 84 52 90 4 7 93 77 29 85 22 1 96 69 98 16 76 87 57 16 44 41 57 28 18 70 77 83 37 27 59 87 27 19 89 63 14 84 77 40 46 27 82 73 86 73 30 58 6 30 70 36 31 12 43 50 93 3 3 57 38 91\n", "output": "7\n"}, {"input": "4\n2 2 3 2\n", "output": "0\n"}, {"input": "6\n10 10 10 24 21 14\n", "output": "0\n"}, {"input": "8\n2 2 2 4 5 6 1 7\n", "output": "0\n"}, {"input": "4\n8 5 9 25\n", "output": "0\n"}, {"input": "2\n5 6\n", "output": "0\n"}, {"input": "8\n4 4 4 4 4 3 4 2\n", "output": "1\n"}, {"input": "10\n72 86 39 25 84 29 33 34 20 12\n", "output": "0\n"}, {"input": "33\n1 3 34 55 38 58 64 26 66 44 50 53 46 62 62 99 73 87 35 20 30 38 39 85 49 24 93 53 8 25 86 30 51\n", "output": "2\n"}, {"input": "6\n1 4 5 2 3 1\n", "output": "0\n"}, {"input": "8\n2 2 1 3 2 1 5 6\n", "output": "1\n"}, {"input": "4\n3 2 2 4\n", "output": "0\n"}, {"input": "100\n94 87 92 91 94 89 93 94 87 93 93 94 89 75 87 87 92 91 87 94 90 89 92 92 87 88 90 88 90 89 90 92 91 91 89 88 93 89 88 94 91 89 88 87 92 89 91 87 88 90 88 92 90 87 93 94 94 92 92 87 90 88 88 91 94 93 87 94 93 93 87 90 92 92 90 88 88 90 92 91 90 88 89 91 91 88 90 93 90 94 94 93 90 91 91 93 94 94 92 93\n", "output": "24\n"}, {"input": "100\n1 9 3 5 10 10 9 8 10 1 7 6 5 6 7 9 1 5 8 3 2 3 3 10 2 3 10 7 10 3 9 3 2 10 1 10 2 3 4 3 3 1 7 5 10 2 3 8 9 2 5 4 7 2 5 9 2 1 7 9 9 8 4 4 6 1 1 6 4 7 2 3 1 1 1 6 9 1 2 9 3 7 6 10 3 6 2 5 2 5 3 9 10 6 4 2 9 9 4 5\n", "output": "23\n"}, {"input": "30\n43 34 38 50 47 24 26 20 7 5 26 29 98 87 17 46 10 53 88 61 90 39 78 81 65 13 72 95 53 5\n", "output": "1\n"}, {"input": "6\n1 1 1 1 2 2\n", "output": "1\n"}, {"input": "13\n1 2 4 4 4 4 6 6 6 7 2 9 9\n", "output": "2\n"}, {"input": "4\n3 2 3 5\n", "output": "0\n"}, {"input": "5\n1 2 3 6 3\n", "output": "0\n"}, {"input": "5\n3 2 3 5 5\n", "output": "1\n"}, {"input": "8\n2 1 1 1 1 1 1 2\n", "output": "2\n"}, {"input": "5\n2 2 4 1 1\n", "output": "1\n"}, {"input": "7\n1 13 13 13 2 2 3\n", "output": "1\n"}, {"input": "4\n2 4 4 14\n", "output": "0\n"}, {"input": "8\n1 2 3 11 1 5 5 5\n", "output": "1\n"}, {"input": "13\n1 2 3 4 5 6 7 8 9 10 11 4 1\n", "output": "1\n"}]}, "problem_time_curve_coefficient_list": [5.5711123798076925e-06, 4.890601835664336e-06, 4.747524407233392e-06, 4.7247088751092655e-06, 4.589977518575175e-06, 4.508734388658216e-06, 4.496728338068182e-06, 4.495542791193182e-06, 4.485295782342657e-06, 4.111225975196679e-06, 4.086880736451049e-06, 4.08677416138549e-06, 3.962927215362763e-06, 3.9548159418706295e-06, 3.943082973666958e-06, 3.816679878715036e-06, 3.8119037388392857e-06, 3.8044361341783216e-06, 3.5448061762456297e-06, 3.495703644012238e-06, 3.4051319247159093e-06, 3.258419676027098e-06, 3.258326540646853e-06, 3.23142650513549e-06, 3.2294538215690565e-06, 3.1658101917613637e-06, 3.1272458479020984e-06, 3.1036208888767483e-06, 3.0995146006337417e-06, 3.0965201731861894e-06, 3.0858059850305946e-06, 3.084212112106643e-06, 3.0523758331512243e-06, 3.0457620465472035e-06, 3.0337649967220284e-06, 3.032661549388112e-06, 3.0147332823426574e-06, 3.0086330037150354e-06, 2.9491026005244756e-06, 2.891278996394231e-06, 2.5103520405375875e-06, 2.4705645214160842e-06, 2.2479860959353145e-06, 2.209219965581294e-06, 2.190694520323427e-06, 2.116473298186189e-06, 2.0530130982298953e-06, 2.05167972847465e-06, 2.017931299169581e-06, 2.013431954763986e-06, 1.9798894094187065e-06, 1.9665840936407344e-06, 1.9474488909527976e-06, 1.9371553622159095e-06, 1.925477204436189e-06, 1.8555952387456295e-06, 2.8826827469405587e-08, 5.868198208041959e-09, 9.674797858391602e-11], "human_label": true, "framework_note": ""}, "O(nlogn)": {"problem_name": "127_B. Canvas Frames", "problem_id": "659", "solution_id": "659_63", "description": "Nicholas, a painter is going to paint several new canvases. Nicholas is sure that the canvases will turn out so great that each one will need framing and being hung on the wall. Frames are what Nicholas decided to begin with. \n\nNicholas has n sticks whose lengths equal a1, a2, ... an. Nicholas does not want to break the sticks or glue them together. To make a h \u00d7 w-sized frame, he needs two sticks whose lengths equal h and two sticks whose lengths equal w. Specifically, to make a square frame (when h = w), he needs four sticks of the same length.\n\nNow Nicholas wants to make from the sticks that he has as many frames as possible; to be able to paint as many canvases as possible to fill the frames. Help him in this uneasy task. Note that it is not necessary to use all the sticks Nicholas has.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 100) \u2014 the number of sticks. The second line contains n space-separated integers. The i-th integer equals the length of the i-th stick ai (1 \u2264 ai \u2264 100).\n\nOutput\n\nPrint the single number \u2014 the maximum number of frames Nicholas can make for his future canvases.\n\nExamples\n\nInput\n\n5\n2 4 3 2 3\n\n\nOutput\n\n1\n\nInput\n\n13\n2 2 4 4 4 4 6 6 6 7 7 9 9\n\n\nOutput\n\n3\n\nInput\n\n4\n3 3 3 5\n\n\nOutput\n\n0", "solution_code": "n=int(input())\na=list(map(int, input().split()))\na.sort()\nb,t,c=[],1,0\nfor i in range(n):\n    if i==n-1 or a[i]!=a[i+1]:\n        c+=t//4\n        if t%4>=2:b.append(t%2)\n        t=1\n    else:t+=1\nprint(len(b)//2+c)\n", "dataclass_code": "import sys\nimport time\nimport itertools\nfrom itertools import accumulate, product, permutations, combinations\nimport collections\nfrom collections import Counter, OrderedDict, deque, defaultdict, ChainMap\nfrom functools import lru_cache\nimport math\nfrom math import sqrt, sin, cos, tan, ceil, fabs, floor, gcd, exp, log, log2\nimport fractions\nfrom typing import List, Tuple\nimport numpy as np\nimport random\nimport heapq\nfrom heapq import *\nfrom dataclasses import dataclass\n\nimport builtins\nimport re\n\ndef strip(s, characters = None):\n    if characters is None:\n        characters = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n    else:\n        characters = list(characters)\n\n    characters = [x for x in characters if len(x) > 0] \n\n    i = 0\n    while i < len(s):\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[i:i + len(sep_candidate)] == sep_candidate:\n                found_sep_candidate = True\n                i += len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    j = len(s) - 1\n    while j >= 0:\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[j + 1 - len(sep_candidate):j+1] == sep_candidate:\n                found_sep_candidate = True\n                j -= len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    return s[i:j+1]\n\ndef split(s, sep=None, maxsplit=-1):\n    if sep == '':\n        raise builtins.ValueError('empty separator')\n\n    if type(sep) == list and '' in sep:\n        raise builtins.ValueError('empty separator')\n\n    if sep is None:\n        sep = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n        result = []\n        word = ''\n        count_split = 0\n        \n        if maxsplit == -1:\n            maxsplit = len(s) * 1000\n\n        i = 0\n        while i < len(s):\n            found_sep_candidate = False\n\n            for sep_candidate in sep:\n                if s[i:i + len(sep_candidate)] == sep_candidate:\n                    found_sep_candidate = True\n\n                    if word:\n                        result.append(word)\n                        count_split += 1\n                        word = ''\n\n                    i += len(sep_candidate)\n                    break\n\n            if not found_sep_candidate and count_split < maxsplit:\n                word += s[i]\n                i += 1\n\n            elif not found_sep_candidate and count_split >= maxsplit:\n                word += s[i:]\n                i = len(s)\n\n        if word:\n            result.append(word)\n        return result\n    \n    if type(sep) == str:\n        sep = [sep]\n\n    if maxsplit == -1:\n        maxsplit = 0\n    elif maxsplit == 0:\n        maxsplit = -1\n\n    return re.split(re.compile(\"|\".join([re.escape(x) for x in sep])), s, maxsplit=maxsplit)\n\nclass str_escaped(str):\n    def split(self, sep=None, maxsplit=-1):\n        return split(self, sep=sep, maxsplit=maxsplit)\n    \n    def strip(self, chars=None):\n        return strip(self, characters = chars)\n\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Input:\n    n: int\n    ratings: List[int]\n\n    @classmethod\n    def from_str(cls, input_: str):\n        n, ratings, _ = input_.split('\\n')\n        n = int(n)\n        ratings = list(map(int, ratings.split()))\n        assert n == len(ratings)\n        return cls(n, ratings)\n\n    def __repr__(self):\n        return str(self.n) + '\\n' + ' '.join(map(str, self.ratings)) + '\\n'\n", "inputs_example": "5\n2 4 3 2 3\n", "time_complexity_inferred": "O(nlogn)", "time_curve_coefficient": 1.446533343980108e-05, "tests": {"public_tests": [{"input": "5\n2 4 3 2 3\n", "output": "1"}, {"input": "13\n2 2 4 4 4 4 6 6 6 7 7 9 9\n", "output": "3"}, {"input": "4\n3 3 3 5\n", "output": "0"}], "private_tests": [{"input": "4\n1 1 1 1\n", "output": "1"}, {"input": "7\n1 2 1 1 1 1 1\n", "output": "1"}, {"input": "10\n1 1 1 1 1 1 1 1 2 2\n", "output": "2"}, {"input": "38\n65 69 80 93 28 36 40 81 53 75 55 50 82 95 8 51 66 65 50 4 40 92 18 70 38 68 42 100 34 57 98 79 95 84 82 35 100 89\n", "output": "3"}, {"input": "8\n1 2 3 4 5 6 7 7\n", "output": "0"}, {"input": "1\n1\n", "output": "0"}, {"input": "100\n70 70 75 70 74 70 70 73 72 73 74 75 70 74 73 70 70 74 72 72 75 70 73 72 70 75 73 70 74 70 73 75 71 74 70 71 75 74 75 71 74 70 73 73 70 75 71 73 73 74 73 74 71 73 73 71 72 71 70 75 74 74 72 72 71 72 75 75 70 73 71 73 72 71 70 75 71 75 73 75 73 72 75 71 73 71 72 74 75 70 70 74 75 73 70 73 73 75 71 74\n", "output": "24"}, {"input": "49\n75 64 7 2 1 66 31 84 78 53 34 5 40 90 7 62 86 54 99 77 8 92 30 3 18 18 61 38 38 11 79 88 84 89 50 94 72 8 54 85 100 1 19 4 97 91 13 39 91\n", "output": "4"}, {"input": "2\n1 1\n", "output": "0"}, {"input": "5\n1 1 2 3 3\n", "output": "1"}, {"input": "5\n2 2 3 4 4\n", "output": "1"}, {"input": "8\n8 6 3 4 5 2 1 7\n", "output": "0"}, {"input": "8\n1 1 1 1 1 1 1 1\n", "output": "2"}, {"input": "5\n1 4 4 1 1\n", "output": "1"}, {"input": "14\n2 4 2 6 2 3 4 1 4 5 4 3 4 1\n", "output": "2"}, {"input": "4\n100 100 100 99\n", "output": "0"}, {"input": "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "25"}, {"input": "7\n13 13 13 13 6 2 3\n", "output": "1"}, {"input": "4\n4 4 4 4\n", "output": "1"}, {"input": "8\n1 2 3 4 5 5 5 5\n", "output": "1"}, {"input": "7\n1 1 2 2 1 2 3\n", "output": "1"}, {"input": "5\n100 1 100 100 100\n", "output": "1"}, {"input": "13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n", "output": "0"}, {"input": "20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "5"}, {"input": "6\n1 100 100 1 1 1\n", "output": "1"}, {"input": "10\n19 9 14 14 19 5 5 18 10 17\n", "output": "1"}, {"input": "13\n35 6 21 30 67 55 70 39 75 72 11 13 69\n", "output": "0"}, {"input": "5\n1 1 1 1 1\n", "output": "1"}, {"input": "6\n1 1 5 1 1 5\n", "output": "1"}, {"input": "3\n1 2 2\n", "output": "0"}, {"input": "4\n10 100 100 10\n", "output": "1"}, {"input": "7\n7 6 5 4 3 2 1\n", "output": "0"}, {"input": "7\n1 3 2 2 3 1 4\n", "output": "1"}, {"input": "6\n1 50 1 100 50 100\n", "output": "1"}, {"input": "5\n100 100 1 1 100\n", "output": "1"}, {"input": "9\n1 2 3 4 5 6 7 8 9\n", "output": "0"}, {"input": "57\n83 94 42 57 19 9 40 25 56 92 9 38 58 66 43 19 50 10 100 3 49 96 77 36 20 3 48 15 38 19 99 100 66 14 52 13 16 73 65 99 29 85 75 18 97 64 57 82 70 19 16 25 40 11 9 22 89\n", "output": "6"}, {"input": "7\n1 3 4 3 5 4 6\n", "output": "1"}, {"input": "7\n1 1 1 1 1 1 1\n", "output": "1"}, {"input": "10\n93 93 99 98 91 96 92 98 94 98\n", "output": "1"}, {"input": "5\n100 100 99 99 2\n", "output": "1"}, {"input": "4\n100 100 100 100\n", "output": "1"}, {"input": "10\n1 1 1 1 1 1 1 1 1 1\n", "output": "2"}, {"input": "5\n100 100 100 100 100\n", "output": "1"}, {"input": "87\n10 19 83 58 15 48 26 58 89 46 50 34 81 40 25 51 62 85 9 80 71 44 100 22 30 48 74 69 54 40 38 81 66 42 40 90 60 20 75 24 74 98 28 62 79 65 65 6 14 23 3 59 29 24 64 13 8 38 29 85 75 81 36 42 3 63 99 24 72 92 35 8 71 19 77 77 66 3 79 65 15 18 15 69 60 77 91\n", "output": "11"}, {"input": "8\n100 100 100 100 100 100 100 100\n", "output": "2"}, {"input": "8\n1 2 3 4 1 2 3 4\n", "output": "2"}, {"input": "8\n2 2 2 2 2 2 2 2\n", "output": "2"}, {"input": "1\n10\n", "output": "0"}, {"input": "4\n1 2 3 3\n", "output": "0"}, {"input": "3\n1 1 1\n", "output": "0"}, {"input": "5\n100 100 99 99 5\n", "output": "1"}, {"input": "23\n88 82 2 67 4 6 67 83 77 58 48 64 86 37 96 83 35 46 13 79 72 18 35\n", "output": "1"}, {"input": "33\n1 2 2 6 10 10 33 11 17 32 25 6 7 29 11 32 33 8 13 17 17 6 11 11 11 8 10 26 29 26 32 33 36\n", "output": "5"}, {"input": "4\n1 100 1 100\n", "output": "1"}, {"input": "8\n1 2 2 1 1 2 2 2\n", "output": "1"}, {"input": "17\n90 97 12 56 94 11 49 96 22 7 15 48 71 71 94 72 100\n", "output": "1"}, {"input": "40\n4 2 62 38 76 68 19 71 44 91 76 31 3 63 56 62 93 98 10 61 52 59 81 46 23 27 36 26 24 38 37 66 15 16 78 41 95 82 73 90\n", "output": "1"}, {"input": "43\n62 31 14 43 67 2 60 77 64 70 91 9 3 43 76 7 56 84 5 20 88 50 47 42 7 39 8 56 71 24 49 59 70 61 81 17 76 44 80 61 77 5 96\n", "output": "4"}, {"input": "100\n99 98 98 99 98 98 98 100 98 99 99 98 99 98 98 98 99 99 98 99 99 100 98 100 98 98 98 99 98 100 100 98 100 99 100 98 99 99 99 98 100 98 100 99 99 99 98 100 98 98 98 100 100 99 98 98 100 100 100 99 98 99 99 99 100 99 99 98 99 98 99 100 100 98 98 100 100 99 99 99 98 98 98 100 99 99 100 99 100 99 98 100 98 100 98 98 99 98 99 98\n", "output": "24"}, {"input": "74\n90 26 58 69 87 23 44 9 32 25 33 13 79 84 52 90 4 7 93 77 29 85 22 1 96 69 98 16 76 87 57 16 44 41 57 28 18 70 77 83 37 17 59 87 27 19 89 63 14 84 77 40 46 77 82 73 86 73 30 58 6 30 70 36 31 12 43 50 93 3 3 57 38 91\n", "output": "7"}, {"input": "4\n1 2 1 2\n", "output": "1"}, {"input": "5\n30 30 30 1 1\n", "output": "1"}, {"input": "6\n10 10 10 12 13 14\n", "output": "0"}, {"input": "8\n1 2 3 4 5 6 1 7\n", "output": "0"}, {"input": "18\n39 72 67 28 69 41 43 51 66 99 4 57 68 93 28 27 37 27\n", "output": "1"}, {"input": "8\n1 2 2 2 3 1 1 3\n", "output": "1"}, {"input": "4\n8 5 9 13\n", "output": "0"}, {"input": "8\n1 2 1 2 2 2 2 2\n", "output": "2"}, {"input": "2\n3 5\n", "output": "0"}, {"input": "3\n3 2 1\n", "output": "0"}, {"input": "7\n1 2 2 1 2 1 2\n", "output": "1"}, {"input": "8\n4 4 4 4 4 4 4 4\n", "output": "2"}, {"input": "10\n72 86 73 25 84 29 33 34 20 29\n", "output": "0"}, {"input": "6\n100 1 1 100 1 100\n", "output": "1"}, {"input": "33\n1 3 34 55 38 58 64 26 66 44 50 63 46 62 62 99 73 87 35 20 30 38 39 85 49 24 93 68 8 25 86 30 51\n", "output": "1"}, {"input": "6\n1 2 3 2 3 1\n", "output": "1"}, {"input": "8\n1 2 1 3 4 1 5 6\n", "output": "0"}, {"input": "5\n1 100 1 1 100\n", "output": "1"}, {"input": "4\n2 2 2 2\n", "output": "1"}, {"input": "100\n94 87 92 91 94 89 93 94 87 93 93 94 89 91 87 87 92 91 87 94 90 89 92 92 87 88 90 90 90 89 90 92 91 91 89 88 93 89 88 94 91 89 88 87 92 89 91 87 88 90 88 92 90 87 93 94 94 92 92 87 90 88 88 91 94 93 87 94 93 93 87 90 92 92 90 88 88 90 92 91 90 88 89 91 91 88 90 93 90 94 94 93 90 91 91 93 94 94 92 93\n", "output": "24"}, {"input": "9\n1 1 1 1 1 1 1 1 1\n", "output": "2"}, {"input": "100\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n", "output": "25"}, {"input": "100\n1 9 3 5 10 10 9 8 10 1 7 6 5 6 7 9 1 5 8 3 2 3 3 10 2 3 10 7 10 3 6 3 2 10 1 10 2 3 4 3 3 1 7 5 10 2 3 8 9 2 5 4 7 2 5 9 2 1 7 9 9 8 4 4 6 1 6 6 4 7 2 3 1 1 1 6 9 1 2 9 3 7 6 10 3 6 2 5 2 5 3 9 10 6 4 2 9 9 4 5\n", "output": "23"}, {"input": "30\n43 34 38 50 47 24 26 20 7 5 26 29 98 87 90 46 10 53 88 61 90 39 78 81 65 13 72 95 53 27\n", "output": "1"}, {"input": "8\n1 1 1 1 2 3 2 3\n", "output": "2"}, {"input": "6\n1 1 1 1 1 1\n", "output": "1"}, {"input": "67\n36 22 22 86 52 53 36 68 46 82 99 37 15 43 57 35 33 99 22 96 7 8 80 93 70 70 55 51 61 74 6 28 85 72 84 42 29 1 4 71 7 40 61 95 93 36 42 61 16 40 10 85 31 86 93 19 44 20 52 66 10 22 40 53 25 29 23\n", "output": "8"}], "generated_tests": [{"input": "7\n1 4 1 1 1 1 1\n", "output": "1\n"}, {"input": "10\n1 1 1 1 1 1 2 1 2 2\n", "output": "2\n"}, {"input": "38\n65 69 80 93 28 36 40 81 53 75 25 50 82 95 8 51 66 65 50 4 40 92 18 70 38 68 42 100 34 57 98 79 95 84 82 35 100 89\n", "output": "3\n"}, {"input": "5\n2 2 3 5 4\n", "output": "0\n"}, {"input": "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "24\n"}, {"input": "57\n83 94 42 57 19 9 40 25 56 92 9 38 58 66 43 19 50 10 100 3 58 96 77 36 20 3 48 15 38 19 99 100 66 14 52 13 16 73 65 99 29 85 75 18 97 64 57 82 70 19 16 25 40 11 9 22 89\n", "output": "6\n"}, {"input": "33\n1 2 2 6 10 10 33 11 17 32 25 6 7 29 11 32 33 8 13 17 17 6 11 11 9 8 10 26 29 26 32 33 36\n", "output": "5\n"}, {"input": "43\n62 31 14 3 67 2 60 77 64 70 91 9 3 43 76 7 56 84 5 20 88 50 47 42 7 39 8 56 71 24 49 59 70 61 81 17 76 44 80 61 77 5 96\n", "output": "4\n"}, {"input": "74\n90 26 58 69 87 23 44 9 32 25 33 13 79 84 52 90 4 7 93 77 29 85 22 1 96 69 98 16 76 87 57 16 44 41 57 28 18 70 77 83 37 17 59 87 27 19 89 63 14 84 77 40 46 27 82 73 86 73 30 58 6 30 70 36 31 12 43 50 93 3 3 57 38 91\n", "output": "7\n"}, {"input": "100\n1 9 3 5 10 10 9 8 10 1 7 6 5 6 7 9 1 5 8 3 2 3 3 10 2 3 10 7 10 3 9 3 2 10 1 10 2 3 4 3 3 1 7 5 10 2 3 8 9 2 5 4 7 2 5 9 2 1 7 9 9 8 4 4 6 1 6 6 4 7 2 3 1 1 1 6 9 1 2 9 3 7 6 10 3 6 2 5 2 5 3 9 10 6 4 2 9 9 4 5\n", "output": "23\n"}, {"input": "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "25\n"}, {"input": "8\n1 2 3 4 4 6 7 7\n", "output": "1\n"}, {"input": "49\n75 64 10 2 1 66 31 84 78 53 34 5 40 90 7 62 86 54 99 77 8 92 30 3 18 18 61 38 38 11 79 88 84 89 50 94 72 8 54 85 100 1 19 4 97 91 13 39 91\n", "output": "3\n"}, {"input": "5\n1 2 2 3 3\n", "output": "1\n"}, {"input": "8\n8 8 3 4 5 2 1 7\n", "output": "0\n"}, {"input": "8\n1 1 1 1 1 1 2 1\n", "output": "1\n"}, {"input": "5\n1 7 4 1 1\n", "output": "0\n"}, {"input": "7\n1 13 13 13 6 2 3\n", "output": "0\n"}, {"input": "4\n2 4 4 4\n", "output": "0\n"}, {"input": "8\n1 2 3 7 5 5 5 5\n", "output": "1\n"}, {"input": "7\n1 1 2 2 1 3 3\n", "output": "1\n"}, {"input": "13\n1 2 3 4 5 6 7 8 9 10 11 4 13\n", "output": "0\n"}, {"input": "10\n19 9 22 14 19 5 5 18 10 17\n", "output": "1\n"}, {"input": "3\n1 4 2\n", "output": "0\n"}, {"input": "4\n19 100 100 10\n", "output": "0\n"}, {"input": "7\n14 6 5 4 3 2 1\n", "output": "0\n"}, {"input": "6\n1 50 1 100 97 100\n", "output": "1\n"}, {"input": "9\n1 2 3 4 5 6 7 8 18\n", "output": "0\n"}, {"input": "8\n2 2 2 2 1 2 2 2\n", "output": "1\n"}, {"input": "1\n20\n", "output": "0\n"}, {"input": "3\n1 1 2\n", "output": "0\n"}, {"input": "23\n88 82 2 67 4 6 67 29 77 58 48 64 86 37 96 83 35 46 13 79 72 18 35\n", "output": "1\n"}, {"input": "40\n4 2 62 38 76 68 19 71 44 91 76 31 3 63 56 62 93 98 10 61 52 59 81 46 23 27 36 26 24 38 37 66 28 16 78 41 95 82 73 90\n", "output": "1\n"}, {"input": "4\n1 2 2 2\n", "output": "0\n"}, {"input": "6\n10 10 10 12 21 14\n", "output": "0\n"}, {"input": "8\n1 2 2 4 5 6 1 7\n", "output": "1\n"}, {"input": "4\n8 5 9 22\n", "output": "0\n"}, {"input": "8\n2 2 1 2 2 2 2 2\n", "output": "1\n"}, {"input": "2\n5 5\n", "output": "0\n"}, {"input": "3\n3 1 1\n", "output": "0\n"}, {"input": "8\n4 4 4 4 4 3 4 4\n", "output": "1\n"}, {"input": "10\n72 86 73 25 84 29 33 34 20 12\n", "output": "0\n"}, {"input": "6\n100 1 1 100 2 100\n", "output": "1\n"}, {"input": "33\n1 3 34 55 38 58 64 26 66 44 50 53 46 62 62 99 73 87 35 20 30 38 39 85 49 24 93 68 8 25 86 30 51\n", "output": "1\n"}, {"input": "6\n1 4 3 2 3 1\n", "output": "1\n"}, {"input": "8\n2 2 1 3 4 1 5 6\n", "output": "1\n"}, {"input": "4\n3 2 2 2\n", "output": "0\n"}, {"input": "100\n94 87 92 91 94 89 93 94 87 93 93 94 89 91 87 87 92 91 87 94 90 89 92 92 87 88 90 88 90 89 90 92 91 91 89 88 93 89 88 94 91 89 88 87 92 89 91 87 88 90 88 92 90 87 93 94 94 92 92 87 90 88 88 91 94 93 87 94 93 93 87 90 92 92 90 88 88 90 92 91 90 88 89 91 91 88 90 93 90 94 94 93 90 91 91 93 94 94 92 93\n", "output": "24\n"}, {"input": "30\n43 34 38 50 47 24 26 20 7 5 26 29 98 87 17 46 10 53 88 61 90 39 78 81 65 13 72 95 53 27\n", "output": "1\n"}, {"input": "8\n1 1 1 1 2 3 2 5\n", "output": "1\n"}, {"input": "6\n1 1 1 1 2 1\n", "output": "1\n"}, {"input": "13\n2 2 4 4 4 4 6 6 6 7 2 9 9\n", "output": "2\n"}, {"input": "4\n3 4 3 5\n", "output": "0\n"}, {"input": "10\n1 1 1 1 1 1 2 1 2 4\n", "output": "2\n"}, {"input": "8\n1 2 3 4 4 6 7 2\n", "output": "1\n"}, {"input": "5\n1 2 2 6 3\n", "output": "0\n"}, {"input": "5\n3 2 3 5 4\n", "output": "0\n"}, {"input": "8\n2 1 1 1 1 1 1 1\n", "output": "1\n"}, {"input": "5\n1 2 4 1 1\n", "output": "0\n"}, {"input": "7\n1 13 13 13 10 2 3\n", "output": "0\n"}, {"input": "4\n2 4 4 8\n", "output": "0\n"}, {"input": "8\n1 2 3 7 1 5 5 5\n", "output": "1\n"}, {"input": "13\n1 2 3 4 5 6 7 8 9 10 11 4 7\n", "output": "1\n"}, {"input": "3\n1 5 2\n", "output": "0\n"}, {"input": "4\n19 100 100 12\n", "output": "0\n"}, {"input": "7\n14 11 5 4 3 2 1\n", "output": "0\n"}, {"input": "9\n1 2 4 4 5 6 7 8 18\n", "output": "0\n"}, {"input": "57\n83 94 42 57 19 9 40 25 56 92 9 38 58 66 43 19 50 13 100 3 58 96 77 36 20 3 48 15 38 19 99 100 66 14 52 13 16 73 65 99 29 85 75 18 97 64 57 82 70 19 16 25 40 11 9 22 89\n", "output": "7\n"}, {"input": "8\n2 2 2 2 1 2 2 4\n", "output": "1\n"}, {"input": "1\n37\n", "output": "0\n"}, {"input": "33\n1 2 2 6 10 10 33 11 17 32 25 6 7 29 11 12 33 8 13 17 17 6 11 11 9 8 10 26 29 26 32 33 36\n", "output": "5\n"}, {"input": "40\n4 2 62 38 76 68 19 71 44 91 76 31 3 63 56 62 93 98 10 61 52 59 81 46 23 27 36 32 24 38 37 66 28 16 78 41 95 82 73 90\n", "output": "1\n"}, {"input": "74\n90 26 58 69 87 23 44 9 32 25 33 13 79 84 52 90 4 7 93 77 29 85 22 1 96 69 98 16 76 87 57 16 44 41 57 28 18 70 77 83 37 27 59 87 27 19 89 63 14 84 77 40 46 27 82 73 86 73 30 58 6 30 70 36 31 12 43 50 93 3 3 57 38 91\n", "output": "7\n"}, {"input": "4\n2 2 3 2\n", "output": "0\n"}, {"input": "6\n10 10 10 24 21 14\n", "output": "0\n"}, {"input": "8\n2 2 2 4 5 6 1 7\n", "output": "0\n"}, {"input": "4\n8 5 9 25\n", "output": "0\n"}, {"input": "2\n5 6\n", "output": "0\n"}, {"input": "8\n4 4 4 4 4 3 4 2\n", "output": "1\n"}, {"input": "10\n72 86 39 25 84 29 33 34 20 12\n", "output": "0\n"}, {"input": "33\n1 3 34 55 38 58 64 26 66 44 50 53 46 62 62 99 73 87 35 20 30 38 39 85 49 24 93 53 8 25 86 30 51\n", "output": "2\n"}, {"input": "6\n1 4 5 2 3 1\n", "output": "0\n"}, {"input": "8\n2 2 1 3 2 1 5 6\n", "output": "1\n"}, {"input": "4\n3 2 2 4\n", "output": "0\n"}, {"input": "100\n94 87 92 91 94 89 93 94 87 93 93 94 89 75 87 87 92 91 87 94 90 89 92 92 87 88 90 88 90 89 90 92 91 91 89 88 93 89 88 94 91 89 88 87 92 89 91 87 88 90 88 92 90 87 93 94 94 92 92 87 90 88 88 91 94 93 87 94 93 93 87 90 92 92 90 88 88 90 92 91 90 88 89 91 91 88 90 93 90 94 94 93 90 91 91 93 94 94 92 93\n", "output": "24\n"}, {"input": "100\n1 9 3 5 10 10 9 8 10 1 7 6 5 6 7 9 1 5 8 3 2 3 3 10 2 3 10 7 10 3 9 3 2 10 1 10 2 3 4 3 3 1 7 5 10 2 3 8 9 2 5 4 7 2 5 9 2 1 7 9 9 8 4 4 6 1 1 6 4 7 2 3 1 1 1 6 9 1 2 9 3 7 6 10 3 6 2 5 2 5 3 9 10 6 4 2 9 9 4 5\n", "output": "23\n"}, {"input": "30\n43 34 38 50 47 24 26 20 7 5 26 29 98 87 17 46 10 53 88 61 90 39 78 81 65 13 72 95 53 5\n", "output": "1\n"}, {"input": "6\n1 1 1 1 2 2\n", "output": "1\n"}, {"input": "13\n1 2 4 4 4 4 6 6 6 7 2 9 9\n", "output": "2\n"}, {"input": "4\n3 2 3 5\n", "output": "0\n"}, {"input": "5\n1 2 3 6 3\n", "output": "0\n"}, {"input": "5\n3 2 3 5 5\n", "output": "1\n"}, {"input": "8\n2 1 1 1 1 1 1 2\n", "output": "2\n"}, {"input": "5\n2 2 4 1 1\n", "output": "1\n"}, {"input": "7\n1 13 13 13 2 2 3\n", "output": "1\n"}, {"input": "4\n2 4 4 14\n", "output": "0\n"}, {"input": "8\n1 2 3 11 1 5 5 5\n", "output": "1\n"}, {"input": "13\n1 2 3 4 5 6 7 8 9 10 11 4 1\n", "output": "1\n"}]}, "problem_time_curve_coefficient_list": [0.00051515368828125, 2.59985321693086e-05, 1.50242596141977e-05, 1.476371379772218e-05, 1.4585639453944018e-05, 1.446533343980108e-05, 1.4462207803287678e-05, 1.4448089723759328e-05, 1.444627786233571e-05, 1.4438867727169555e-05, 1.4433701119074192e-05, 1.4422664839226998e-05, 1.4384924419067136e-05, 1.4378433523825093e-05, 1.2329014159792532e-05, 9.16708102102827e-06, 4.5952674949445596e-07, 3.06900131118881e-11], "human_label": true, "framework_note": ""}, "O(n**2)": {"problem_name": "127_B. Canvas Frames", "problem_id": "659", "solution_id": "659_33", "description": "Nicholas, a painter is going to paint several new canvases. Nicholas is sure that the canvases will turn out so great that each one will need framing and being hung on the wall. Frames are what Nicholas decided to begin with. \n\nNicholas has n sticks whose lengths equal a1, a2, ... an. Nicholas does not want to break the sticks or glue them together. To make a h \u00d7 w-sized frame, he needs two sticks whose lengths equal h and two sticks whose lengths equal w. Specifically, to make a square frame (when h = w), he needs four sticks of the same length.\n\nNow Nicholas wants to make from the sticks that he has as many frames as possible; to be able to paint as many canvases as possible to fill the frames. Help him in this uneasy task. Note that it is not necessary to use all the sticks Nicholas has.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 100) \u2014 the number of sticks. The second line contains n space-separated integers. The i-th integer equals the length of the i-th stick ai (1 \u2264 ai \u2264 100).\n\nOutput\n\nPrint the single number \u2014 the maximum number of frames Nicholas can make for his future canvases.\n\nExamples\n\nInput\n\n5\n2 4 3 2 3\n\n\nOutput\n\n1\n\nInput\n\n13\n2 2 4 4 4 4 6 6 6 7 7 9 9\n\n\nOutput\n\n3\n\nInput\n\n4\n3 3 3 5\n\n\nOutput\n\n0", "solution_code": "n=int(input())\nm=list(map(int,input().split()))\nk=set(m)\nk=list(k)\nc=0\nfor i in k:\n\tc+=m.count(i)//2\nprint(c//2)\t", "dataclass_code": "import sys\nimport time\nimport itertools\nfrom itertools import accumulate, product, permutations, combinations\nimport collections\nfrom collections import Counter, OrderedDict, deque, defaultdict, ChainMap\nfrom functools import lru_cache\nimport math\nfrom math import sqrt, sin, cos, tan, ceil, fabs, floor, gcd, exp, log, log2\nimport fractions\nfrom typing import List, Tuple\nimport numpy as np\nimport random\nimport heapq\nfrom heapq import *\nfrom dataclasses import dataclass\n\nimport builtins\nimport re\n\ndef strip(s, characters = None):\n    if characters is None:\n        characters = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n    else:\n        characters = list(characters)\n\n    characters = [x for x in characters if len(x) > 0] \n\n    i = 0\n    while i < len(s):\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[i:i + len(sep_candidate)] == sep_candidate:\n                found_sep_candidate = True\n                i += len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    j = len(s) - 1\n    while j >= 0:\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[j + 1 - len(sep_candidate):j+1] == sep_candidate:\n                found_sep_candidate = True\n                j -= len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    return s[i:j+1]\n\ndef split(s, sep=None, maxsplit=-1):\n    if sep == '':\n        raise builtins.ValueError('empty separator')\n\n    if type(sep) == list and '' in sep:\n        raise builtins.ValueError('empty separator')\n\n    if sep is None:\n        sep = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n        result = []\n        word = ''\n        count_split = 0\n        \n        if maxsplit == -1:\n            maxsplit = len(s) * 1000\n\n        i = 0\n        while i < len(s):\n            found_sep_candidate = False\n\n            for sep_candidate in sep:\n                if s[i:i + len(sep_candidate)] == sep_candidate:\n                    found_sep_candidate = True\n\n                    if word:\n                        result.append(word)\n                        count_split += 1\n                        word = ''\n\n                    i += len(sep_candidate)\n                    break\n\n            if not found_sep_candidate and count_split < maxsplit:\n                word += s[i]\n                i += 1\n\n            elif not found_sep_candidate and count_split >= maxsplit:\n                word += s[i:]\n                i = len(s)\n\n        if word:\n            result.append(word)\n        return result\n    \n    if type(sep) == str:\n        sep = [sep]\n\n    if maxsplit == -1:\n        maxsplit = 0\n    elif maxsplit == 0:\n        maxsplit = -1\n\n    return re.split(re.compile(\"|\".join([re.escape(x) for x in sep])), s, maxsplit=maxsplit)\n\nclass str_escaped(str):\n    def split(self, sep=None, maxsplit=-1):\n        return split(self, sep=sep, maxsplit=maxsplit)\n    \n    def strip(self, chars=None):\n        return strip(self, characters = chars)\n\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Input:\n    n: int\n    ratings: List[int]\n\n    @classmethod\n    def from_str(cls, input_: str):\n        n, ratings, _ = input_.split('\\n')\n        n = int(n)\n        ratings = list(map(int, ratings.split()))\n        assert n == len(ratings)\n        return cls(n, ratings)\n\n    def __repr__(self):\n        return str(self.n) + '\\n' + ' '.join(map(str, self.ratings)) + '\\n'\n", "inputs_example": "5\n2 4 3 2 3\n", "time_complexity_inferred": "O(n**2)", "time_curve_coefficient": 1.2813891222343644e-07, "tests": {"public_tests": [{"input": "5\n2 4 3 2 3\n", "output": "1"}, {"input": "13\n2 2 4 4 4 4 6 6 6 7 7 9 9\n", "output": "3"}, {"input": "4\n3 3 3 5\n", "output": "0"}], "private_tests": [{"input": "4\n1 1 1 1\n", "output": "1"}, {"input": "7\n1 2 1 1 1 1 1\n", "output": "1"}, {"input": "10\n1 1 1 1 1 1 1 1 2 2\n", "output": "2"}, {"input": "38\n65 69 80 93 28 36 40 81 53 75 55 50 82 95 8 51 66 65 50 4 40 92 18 70 38 68 42 100 34 57 98 79 95 84 82 35 100 89\n", "output": "3"}, {"input": "8\n1 2 3 4 5 6 7 7\n", "output": "0"}, {"input": "1\n1\n", "output": "0"}, {"input": "100\n70 70 75 70 74 70 70 73 72 73 74 75 70 74 73 70 70 74 72 72 75 70 73 72 70 75 73 70 74 70 73 75 71 74 70 71 75 74 75 71 74 70 73 73 70 75 71 73 73 74 73 74 71 73 73 71 72 71 70 75 74 74 72 72 71 72 75 75 70 73 71 73 72 71 70 75 71 75 73 75 73 72 75 71 73 71 72 74 75 70 70 74 75 73 70 73 73 75 71 74\n", "output": "24"}, {"input": "49\n75 64 7 2 1 66 31 84 78 53 34 5 40 90 7 62 86 54 99 77 8 92 30 3 18 18 61 38 38 11 79 88 84 89 50 94 72 8 54 85 100 1 19 4 97 91 13 39 91\n", "output": "4"}, {"input": "2\n1 1\n", "output": "0"}, {"input": "5\n1 1 2 3 3\n", "output": "1"}, {"input": "5\n2 2 3 4 4\n", "output": "1"}, {"input": "8\n8 6 3 4 5 2 1 7\n", "output": "0"}, {"input": "8\n1 1 1 1 1 1 1 1\n", "output": "2"}, {"input": "5\n1 4 4 1 1\n", "output": "1"}, {"input": "14\n2 4 2 6 2 3 4 1 4 5 4 3 4 1\n", "output": "2"}, {"input": "4\n100 100 100 99\n", "output": "0"}, {"input": "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "25"}, {"input": "7\n13 13 13 13 6 2 3\n", "output": "1"}, {"input": "4\n4 4 4 4\n", "output": "1"}, {"input": "8\n1 2 3 4 5 5 5 5\n", "output": "1"}, {"input": "7\n1 1 2 2 1 2 3\n", "output": "1"}, {"input": "5\n100 1 100 100 100\n", "output": "1"}, {"input": "13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n", "output": "0"}, {"input": "20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "5"}, {"input": "6\n1 100 100 1 1 1\n", "output": "1"}, {"input": "10\n19 9 14 14 19 5 5 18 10 17\n", "output": "1"}, {"input": "13\n35 6 21 30 67 55 70 39 75 72 11 13 69\n", "output": "0"}, {"input": "5\n1 1 1 1 1\n", "output": "1"}, {"input": "6\n1 1 5 1 1 5\n", "output": "1"}, {"input": "3\n1 2 2\n", "output": "0"}, {"input": "4\n10 100 100 10\n", "output": "1"}, {"input": "7\n7 6 5 4 3 2 1\n", "output": "0"}, {"input": "7\n1 3 2 2 3 1 4\n", "output": "1"}, {"input": "6\n1 50 1 100 50 100\n", "output": "1"}, {"input": "5\n100 100 1 1 100\n", "output": "1"}, {"input": "9\n1 2 3 4 5 6 7 8 9\n", "output": "0"}, {"input": "57\n83 94 42 57 19 9 40 25 56 92 9 38 58 66 43 19 50 10 100 3 49 96 77 36 20 3 48 15 38 19 99 100 66 14 52 13 16 73 65 99 29 85 75 18 97 64 57 82 70 19 16 25 40 11 9 22 89\n", "output": "6"}, {"input": "7\n1 3 4 3 5 4 6\n", "output": "1"}, {"input": "7\n1 1 1 1 1 1 1\n", "output": "1"}, {"input": "10\n93 93 99 98 91 96 92 98 94 98\n", "output": "1"}, {"input": "5\n100 100 99 99 2\n", "output": "1"}, {"input": "4\n100 100 100 100\n", "output": "1"}, {"input": "10\n1 1 1 1 1 1 1 1 1 1\n", "output": "2"}, {"input": "5\n100 100 100 100 100\n", "output": "1"}, {"input": "87\n10 19 83 58 15 48 26 58 89 46 50 34 81 40 25 51 62 85 9 80 71 44 100 22 30 48 74 69 54 40 38 81 66 42 40 90 60 20 75 24 74 98 28 62 79 65 65 6 14 23 3 59 29 24 64 13 8 38 29 85 75 81 36 42 3 63 99 24 72 92 35 8 71 19 77 77 66 3 79 65 15 18 15 69 60 77 91\n", "output": "11"}, {"input": "8\n100 100 100 100 100 100 100 100\n", "output": "2"}, {"input": "8\n1 2 3 4 1 2 3 4\n", "output": "2"}, {"input": "8\n2 2 2 2 2 2 2 2\n", "output": "2"}, {"input": "1\n10\n", "output": "0"}, {"input": "4\n1 2 3 3\n", "output": "0"}, {"input": "3\n1 1 1\n", "output": "0"}, {"input": "5\n100 100 99 99 5\n", "output": "1"}, {"input": "23\n88 82 2 67 4 6 67 83 77 58 48 64 86 37 96 83 35 46 13 79 72 18 35\n", "output": "1"}, {"input": "33\n1 2 2 6 10 10 33 11 17 32 25 6 7 29 11 32 33 8 13 17 17 6 11 11 11 8 10 26 29 26 32 33 36\n", "output": "5"}, {"input": "4\n1 100 1 100\n", "output": "1"}, {"input": "8\n1 2 2 1 1 2 2 2\n", "output": "1"}, {"input": "17\n90 97 12 56 94 11 49 96 22 7 15 48 71 71 94 72 100\n", "output": "1"}, {"input": "40\n4 2 62 38 76 68 19 71 44 91 76 31 3 63 56 62 93 98 10 61 52 59 81 46 23 27 36 26 24 38 37 66 15 16 78 41 95 82 73 90\n", "output": "1"}, {"input": "43\n62 31 14 43 67 2 60 77 64 70 91 9 3 43 76 7 56 84 5 20 88 50 47 42 7 39 8 56 71 24 49 59 70 61 81 17 76 44 80 61 77 5 96\n", "output": "4"}, {"input": "100\n99 98 98 99 98 98 98 100 98 99 99 98 99 98 98 98 99 99 98 99 99 100 98 100 98 98 98 99 98 100 100 98 100 99 100 98 99 99 99 98 100 98 100 99 99 99 98 100 98 98 98 100 100 99 98 98 100 100 100 99 98 99 99 99 100 99 99 98 99 98 99 100 100 98 98 100 100 99 99 99 98 98 98 100 99 99 100 99 100 99 98 100 98 100 98 98 99 98 99 98\n", "output": "24"}, {"input": "74\n90 26 58 69 87 23 44 9 32 25 33 13 79 84 52 90 4 7 93 77 29 85 22 1 96 69 98 16 76 87 57 16 44 41 57 28 18 70 77 83 37 17 59 87 27 19 89 63 14 84 77 40 46 77 82 73 86 73 30 58 6 30 70 36 31 12 43 50 93 3 3 57 38 91\n", "output": "7"}, {"input": "4\n1 2 1 2\n", "output": "1"}, {"input": "5\n30 30 30 1 1\n", "output": "1"}, {"input": "6\n10 10 10 12 13 14\n", "output": "0"}, {"input": "8\n1 2 3 4 5 6 1 7\n", "output": "0"}, {"input": "18\n39 72 67 28 69 41 43 51 66 99 4 57 68 93 28 27 37 27\n", "output": "1"}, {"input": "8\n1 2 2 2 3 1 1 3\n", "output": "1"}, {"input": "4\n8 5 9 13\n", "output": "0"}, {"input": "8\n1 2 1 2 2 2 2 2\n", "output": "2"}, {"input": "2\n3 5\n", "output": "0"}, {"input": "3\n3 2 1\n", "output": "0"}, {"input": "7\n1 2 2 1 2 1 2\n", "output": "1"}, {"input": "8\n4 4 4 4 4 4 4 4\n", "output": "2"}, {"input": "10\n72 86 73 25 84 29 33 34 20 29\n", "output": "0"}, {"input": "6\n100 1 1 100 1 100\n", "output": "1"}, {"input": "33\n1 3 34 55 38 58 64 26 66 44 50 63 46 62 62 99 73 87 35 20 30 38 39 85 49 24 93 68 8 25 86 30 51\n", "output": "1"}, {"input": "6\n1 2 3 2 3 1\n", "output": "1"}, {"input": "8\n1 2 1 3 4 1 5 6\n", "output": "0"}, {"input": "5\n1 100 1 1 100\n", "output": "1"}, {"input": "4\n2 2 2 2\n", "output": "1"}, {"input": "100\n94 87 92 91 94 89 93 94 87 93 93 94 89 91 87 87 92 91 87 94 90 89 92 92 87 88 90 90 90 89 90 92 91 91 89 88 93 89 88 94 91 89 88 87 92 89 91 87 88 90 88 92 90 87 93 94 94 92 92 87 90 88 88 91 94 93 87 94 93 93 87 90 92 92 90 88 88 90 92 91 90 88 89 91 91 88 90 93 90 94 94 93 90 91 91 93 94 94 92 93\n", "output": "24"}, {"input": "9\n1 1 1 1 1 1 1 1 1\n", "output": "2"}, {"input": "100\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n", "output": "25"}, {"input": "100\n1 9 3 5 10 10 9 8 10 1 7 6 5 6 7 9 1 5 8 3 2 3 3 10 2 3 10 7 10 3 6 3 2 10 1 10 2 3 4 3 3 1 7 5 10 2 3 8 9 2 5 4 7 2 5 9 2 1 7 9 9 8 4 4 6 1 6 6 4 7 2 3 1 1 1 6 9 1 2 9 3 7 6 10 3 6 2 5 2 5 3 9 10 6 4 2 9 9 4 5\n", "output": "23"}, {"input": "30\n43 34 38 50 47 24 26 20 7 5 26 29 98 87 90 46 10 53 88 61 90 39 78 81 65 13 72 95 53 27\n", "output": "1"}, {"input": "8\n1 1 1 1 2 3 2 3\n", "output": "2"}, {"input": "6\n1 1 1 1 1 1\n", "output": "1"}, {"input": "67\n36 22 22 86 52 53 36 68 46 82 99 37 15 43 57 35 33 99 22 96 7 8 80 93 70 70 55 51 61 74 6 28 85 72 84 42 29 1 4 71 7 40 61 95 93 36 42 61 16 40 10 85 31 86 93 19 44 20 52 66 10 22 40 53 25 29 23\n", "output": "8"}], "generated_tests": [{"input": "7\n1 4 1 1 1 1 1\n", "output": "1\n"}, {"input": "10\n1 1 1 1 1 1 2 1 2 2\n", "output": "2\n"}, {"input": "38\n65 69 80 93 28 36 40 81 53 75 25 50 82 95 8 51 66 65 50 4 40 92 18 70 38 68 42 100 34 57 98 79 95 84 82 35 100 89\n", "output": "3\n"}, {"input": "5\n2 2 3 5 4\n", "output": "0\n"}, {"input": "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "24\n"}, {"input": "57\n83 94 42 57 19 9 40 25 56 92 9 38 58 66 43 19 50 10 100 3 58 96 77 36 20 3 48 15 38 19 99 100 66 14 52 13 16 73 65 99 29 85 75 18 97 64 57 82 70 19 16 25 40 11 9 22 89\n", "output": "6\n"}, {"input": "33\n1 2 2 6 10 10 33 11 17 32 25 6 7 29 11 32 33 8 13 17 17 6 11 11 9 8 10 26 29 26 32 33 36\n", "output": "5\n"}, {"input": "43\n62 31 14 3 67 2 60 77 64 70 91 9 3 43 76 7 56 84 5 20 88 50 47 42 7 39 8 56 71 24 49 59 70 61 81 17 76 44 80 61 77 5 96\n", "output": "4\n"}, {"input": "74\n90 26 58 69 87 23 44 9 32 25 33 13 79 84 52 90 4 7 93 77 29 85 22 1 96 69 98 16 76 87 57 16 44 41 57 28 18 70 77 83 37 17 59 87 27 19 89 63 14 84 77 40 46 27 82 73 86 73 30 58 6 30 70 36 31 12 43 50 93 3 3 57 38 91\n", "output": "7\n"}, {"input": "100\n1 9 3 5 10 10 9 8 10 1 7 6 5 6 7 9 1 5 8 3 2 3 3 10 2 3 10 7 10 3 9 3 2 10 1 10 2 3 4 3 3 1 7 5 10 2 3 8 9 2 5 4 7 2 5 9 2 1 7 9 9 8 4 4 6 1 6 6 4 7 2 3 1 1 1 6 9 1 2 9 3 7 6 10 3 6 2 5 2 5 3 9 10 6 4 2 9 9 4 5\n", "output": "23\n"}, {"input": "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "25\n"}, {"input": "8\n1 2 3 4 4 6 7 7\n", "output": "1\n"}, {"input": "49\n75 64 10 2 1 66 31 84 78 53 34 5 40 90 7 62 86 54 99 77 8 92 30 3 18 18 61 38 38 11 79 88 84 89 50 94 72 8 54 85 100 1 19 4 97 91 13 39 91\n", "output": "3\n"}, {"input": "5\n1 2 2 3 3\n", "output": "1\n"}, {"input": "8\n8 8 3 4 5 2 1 7\n", "output": "0\n"}, {"input": "8\n1 1 1 1 1 1 2 1\n", "output": "1\n"}, {"input": "5\n1 7 4 1 1\n", "output": "0\n"}, {"input": "7\n1 13 13 13 6 2 3\n", "output": "0\n"}, {"input": "4\n2 4 4 4\n", "output": "0\n"}, {"input": "8\n1 2 3 7 5 5 5 5\n", "output": "1\n"}, {"input": "7\n1 1 2 2 1 3 3\n", "output": "1\n"}, {"input": "13\n1 2 3 4 5 6 7 8 9 10 11 4 13\n", "output": "0\n"}, {"input": "10\n19 9 22 14 19 5 5 18 10 17\n", "output": "1\n"}, {"input": "3\n1 4 2\n", "output": "0\n"}, {"input": "4\n19 100 100 10\n", "output": "0\n"}, {"input": "7\n14 6 5 4 3 2 1\n", "output": "0\n"}, {"input": "6\n1 50 1 100 97 100\n", "output": "1\n"}, {"input": "9\n1 2 3 4 5 6 7 8 18\n", "output": "0\n"}, {"input": "8\n2 2 2 2 1 2 2 2\n", "output": "1\n"}, {"input": "1\n20\n", "output": "0\n"}, {"input": "3\n1 1 2\n", "output": "0\n"}, {"input": "23\n88 82 2 67 4 6 67 29 77 58 48 64 86 37 96 83 35 46 13 79 72 18 35\n", "output": "1\n"}, {"input": "40\n4 2 62 38 76 68 19 71 44 91 76 31 3 63 56 62 93 98 10 61 52 59 81 46 23 27 36 26 24 38 37 66 28 16 78 41 95 82 73 90\n", "output": "1\n"}, {"input": "4\n1 2 2 2\n", "output": "0\n"}, {"input": "6\n10 10 10 12 21 14\n", "output": "0\n"}, {"input": "8\n1 2 2 4 5 6 1 7\n", "output": "1\n"}, {"input": "4\n8 5 9 22\n", "output": "0\n"}, {"input": "8\n2 2 1 2 2 2 2 2\n", "output": "1\n"}, {"input": "2\n5 5\n", "output": "0\n"}, {"input": "3\n3 1 1\n", "output": "0\n"}, {"input": "8\n4 4 4 4 4 3 4 4\n", "output": "1\n"}, {"input": "10\n72 86 73 25 84 29 33 34 20 12\n", "output": "0\n"}, {"input": "6\n100 1 1 100 2 100\n", "output": "1\n"}, {"input": "33\n1 3 34 55 38 58 64 26 66 44 50 53 46 62 62 99 73 87 35 20 30 38 39 85 49 24 93 68 8 25 86 30 51\n", "output": "1\n"}, {"input": "6\n1 4 3 2 3 1\n", "output": "1\n"}, {"input": "8\n2 2 1 3 4 1 5 6\n", "output": "1\n"}, {"input": "4\n3 2 2 2\n", "output": "0\n"}, {"input": "100\n94 87 92 91 94 89 93 94 87 93 93 94 89 91 87 87 92 91 87 94 90 89 92 92 87 88 90 88 90 89 90 92 91 91 89 88 93 89 88 94 91 89 88 87 92 89 91 87 88 90 88 92 90 87 93 94 94 92 92 87 90 88 88 91 94 93 87 94 93 93 87 90 92 92 90 88 88 90 92 91 90 88 89 91 91 88 90 93 90 94 94 93 90 91 91 93 94 94 92 93\n", "output": "24\n"}, {"input": "30\n43 34 38 50 47 24 26 20 7 5 26 29 98 87 17 46 10 53 88 61 90 39 78 81 65 13 72 95 53 27\n", "output": "1\n"}, {"input": "8\n1 1 1 1 2 3 2 5\n", "output": "1\n"}, {"input": "6\n1 1 1 1 2 1\n", "output": "1\n"}, {"input": "13\n2 2 4 4 4 4 6 6 6 7 2 9 9\n", "output": "2\n"}, {"input": "4\n3 4 3 5\n", "output": "0\n"}, {"input": "10\n1 1 1 1 1 1 2 1 2 4\n", "output": "2\n"}, {"input": "8\n1 2 3 4 4 6 7 2\n", "output": "1\n"}, {"input": "5\n1 2 2 6 3\n", "output": "0\n"}, {"input": "5\n3 2 3 5 4\n", "output": "0\n"}, {"input": "8\n2 1 1 1 1 1 1 1\n", "output": "1\n"}, {"input": "5\n1 2 4 1 1\n", "output": "0\n"}, {"input": "7\n1 13 13 13 10 2 3\n", "output": "0\n"}, {"input": "4\n2 4 4 8\n", "output": "0\n"}, {"input": "8\n1 2 3 7 1 5 5 5\n", "output": "1\n"}, {"input": "13\n1 2 3 4 5 6 7 8 9 10 11 4 7\n", "output": "1\n"}, {"input": "3\n1 5 2\n", "output": "0\n"}, {"input": "4\n19 100 100 12\n", "output": "0\n"}, {"input": "7\n14 11 5 4 3 2 1\n", "output": "0\n"}, {"input": "9\n1 2 4 4 5 6 7 8 18\n", "output": "0\n"}, {"input": "57\n83 94 42 57 19 9 40 25 56 92 9 38 58 66 43 19 50 13 100 3 58 96 77 36 20 3 48 15 38 19 99 100 66 14 52 13 16 73 65 99 29 85 75 18 97 64 57 82 70 19 16 25 40 11 9 22 89\n", "output": "7\n"}, {"input": "8\n2 2 2 2 1 2 2 4\n", "output": "1\n"}, {"input": "1\n37\n", "output": "0\n"}, {"input": "33\n1 2 2 6 10 10 33 11 17 32 25 6 7 29 11 12 33 8 13 17 17 6 11 11 9 8 10 26 29 26 32 33 36\n", "output": "5\n"}, {"input": "40\n4 2 62 38 76 68 19 71 44 91 76 31 3 63 56 62 93 98 10 61 52 59 81 46 23 27 36 32 24 38 37 66 28 16 78 41 95 82 73 90\n", "output": "1\n"}, {"input": "74\n90 26 58 69 87 23 44 9 32 25 33 13 79 84 52 90 4 7 93 77 29 85 22 1 96 69 98 16 76 87 57 16 44 41 57 28 18 70 77 83 37 27 59 87 27 19 89 63 14 84 77 40 46 27 82 73 86 73 30 58 6 30 70 36 31 12 43 50 93 3 3 57 38 91\n", "output": "7\n"}, {"input": "4\n2 2 3 2\n", "output": "0\n"}, {"input": "6\n10 10 10 24 21 14\n", "output": "0\n"}, {"input": "8\n2 2 2 4 5 6 1 7\n", "output": "0\n"}, {"input": "4\n8 5 9 25\n", "output": "0\n"}, {"input": "2\n5 6\n", "output": "0\n"}, {"input": "8\n4 4 4 4 4 3 4 2\n", "output": "1\n"}, {"input": "10\n72 86 39 25 84 29 33 34 20 12\n", "output": "0\n"}, {"input": "33\n1 3 34 55 38 58 64 26 66 44 50 53 46 62 62 99 73 87 35 20 30 38 39 85 49 24 93 53 8 25 86 30 51\n", "output": "2\n"}, {"input": "6\n1 4 5 2 3 1\n", "output": "0\n"}, {"input": "8\n2 2 1 3 2 1 5 6\n", "output": "1\n"}, {"input": "4\n3 2 2 4\n", "output": "0\n"}, {"input": "100\n94 87 92 91 94 89 93 94 87 93 93 94 89 75 87 87 92 91 87 94 90 89 92 92 87 88 90 88 90 89 90 92 91 91 89 88 93 89 88 94 91 89 88 87 92 89 91 87 88 90 88 92 90 87 93 94 94 92 92 87 90 88 88 91 94 93 87 94 93 93 87 90 92 92 90 88 88 90 92 91 90 88 89 91 91 88 90 93 90 94 94 93 90 91 91 93 94 94 92 93\n", "output": "24\n"}, {"input": "100\n1 9 3 5 10 10 9 8 10 1 7 6 5 6 7 9 1 5 8 3 2 3 3 10 2 3 10 7 10 3 9 3 2 10 1 10 2 3 4 3 3 1 7 5 10 2 3 8 9 2 5 4 7 2 5 9 2 1 7 9 9 8 4 4 6 1 1 6 4 7 2 3 1 1 1 6 9 1 2 9 3 7 6 10 3 6 2 5 2 5 3 9 10 6 4 2 9 9 4 5\n", "output": "23\n"}, {"input": "30\n43 34 38 50 47 24 26 20 7 5 26 29 98 87 17 46 10 53 88 61 90 39 78 81 65 13 72 95 53 5\n", "output": "1\n"}, {"input": "6\n1 1 1 1 2 2\n", "output": "1\n"}, {"input": "13\n1 2 4 4 4 4 6 6 6 7 2 9 9\n", "output": "2\n"}, {"input": "4\n3 2 3 5\n", "output": "0\n"}, {"input": "5\n1 2 3 6 3\n", "output": "0\n"}, {"input": "5\n3 2 3 5 5\n", "output": "1\n"}, {"input": "8\n2 1 1 1 1 1 1 2\n", "output": "2\n"}, {"input": "5\n2 2 4 1 1\n", "output": "1\n"}, {"input": "7\n1 13 13 13 2 2 3\n", "output": "1\n"}, {"input": "4\n2 4 4 14\n", "output": "0\n"}, {"input": "8\n1 2 3 11 1 5 5 5\n", "output": "1\n"}, {"input": "13\n1 2 3 4 5 6 7 8 9 10 11 4 1\n", "output": "1\n"}]}, "problem_time_curve_coefficient_list": [3.4288626948256943e-07, 2.6163340925831363e-07, 2.524755757709509e-07, 2.056319527880441e-07, 1.94362781583301e-07, 1.3426653771714172e-07, 1.3377280439031098e-07, 1.319245673853839e-07, 1.3016990491048768e-07, 1.2842377254127209e-07, 1.2813891222343644e-07, 1.270161004399943e-07, 1.2675709088644336e-07, 1.2529434759963238e-07, 1.2516508672003589e-07, 1.2380178232242544e-07, 1.236160581675654e-07, 5.642822047890485e-08, 5.4561178266298085e-08, 2.1256451598481833e-08], "human_label": true, "framework_note": ""}}, "1029_C. Maximal Intersection": {"O(n)": {"problem_name": "1029_C. Maximal Intersection", "problem_id": "1333", "solution_id": "1333_58", "description": "You are given n segments on a number line; each endpoint of every segment has integer coordinates. Some segments can degenerate to points. Segments can intersect with each other, be nested in each other or even coincide.\n\nThe intersection of a sequence of segments is such a maximal set of points (not necesserily having integer coordinates) that each point lies within every segment from the sequence. If the resulting set isn't empty, then it always forms some continuous segment. The length of the intersection is the length of the resulting segment or 0 in case the intersection is an empty set.\n\nFor example, the intersection of segments [1;5] and [3;10] is [3;5] (length 2), the intersection of segments [1;5] and [5;7] is [5;5] (length 0) and the intersection of segments [1;5] and [6;6] is an empty set (length 0).\n\nYour task is to remove exactly one segment from the given sequence in such a way that the intersection of the remaining (n - 1) segments has the maximal possible length.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 3 \u22c5 10^5) \u2014 the number of segments in the sequence.\n\nEach of the next n lines contains two integers l_i and r_i (0 \u2264 l_i \u2264 r_i \u2264 10^9) \u2014 the description of the i-th segment.\n\nOutput\n\nPrint a single integer \u2014 the maximal possible length of the intersection of (n - 1) remaining segments after you remove exactly one segment from the sequence.\n\nExamples\n\nInput\n\n4\n1 3\n2 6\n0 4\n3 3\n\n\nOutput\n\n1\n\n\nInput\n\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n\n\nOutput\n\n2\n\n\nInput\n\n3\n4 5\n1 2\n9 20\n\n\nOutput\n\n0\n\n\nInput\n\n2\n3 10\n1 5\n\n\nOutput\n\n7\n\nNote\n\nIn the first example you should remove the segment [3;3], the intersection will become [2;3] (length 1). Removing any other segment will result in the intersection [3;3] (length 0).\n\nIn the second example you should remove the segment [1;3] or segment [2;6], the intersection will become [2;4] (length 2) or [1;3] (length 2), respectively. Removing any other segment will result in the intersection [2;3] (length 1).\n\nIn the third example the intersection will become an empty set no matter the segment you remove.\n\nIn the fourth example you will get the intersection [3;10] (length 7) if you remove the segment [1;5] or the intersection [1;5] (length 4) if you remove the segment [3;10].", "solution_code": "n = int(input())\nl, r = [], []\na, b = 0, 0\nfor i in range(n):\n    a, b = map(int, input().split())\n    l.append(a)\n    r.append(b)\nminr = 10**10\nmaxl = -1\nl1 = -1\nr1 = -1\nfor i in range(n):\n    if l[i] > maxl:\n        maxl = l[i]\n        l1 = i\n    if r[i] < minr:\n        minr = r[i]\n        r1 = i\nl_1 = l.copy()\nl_2 = l.copy()\nr_1 = r.copy()\nr_2 = r.copy()\nl_1.pop(l1)\nr_1.pop(l1)\nl_2.pop(r1)\nr_2.pop(r1)\nprint(max(0, min(r_1)-max(l_1), min(r_2)-max(l_2)))\n", "dataclass_code": "import sys\nimport time\nimport itertools\nfrom itertools import accumulate, product, permutations, combinations\nimport collections\nfrom collections import Counter, OrderedDict, deque, defaultdict, ChainMap\nfrom functools import lru_cache\nimport math\nfrom math import sqrt, sin, cos, tan, ceil, fabs, floor, gcd, exp, log, log2\nimport fractions\nfrom typing import List, Tuple\nimport numpy as np\nimport random\nimport heapq\nfrom heapq import *\nfrom dataclasses import dataclass\n\nimport builtins\nimport re\n\ndef strip(s, characters = None):\n    if characters is None:\n        characters = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n    else:\n        characters = list(characters)\n\n    characters = [x for x in characters if len(x) > 0] \n\n    i = 0\n    while i < len(s):\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[i:i + len(sep_candidate)] == sep_candidate:\n                found_sep_candidate = True\n                i += len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    j = len(s) - 1\n    while j >= 0:\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[j + 1 - len(sep_candidate):j+1] == sep_candidate:\n                found_sep_candidate = True\n                j -= len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    return s[i:j+1]\n\ndef split(s, sep=None, maxsplit=-1):\n    if sep == '':\n        raise builtins.ValueError('empty separator')\n\n    if type(sep) == list and '' in sep:\n        raise builtins.ValueError('empty separator')\n\n    if sep is None:\n        sep = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n        result = []\n        word = ''\n        count_split = 0\n        \n        if maxsplit == -1:\n            maxsplit = len(s) * 1000\n\n        i = 0\n        while i < len(s):\n            found_sep_candidate = False\n\n            for sep_candidate in sep:\n                if s[i:i + len(sep_candidate)] == sep_candidate:\n                    found_sep_candidate = True\n\n                    if word:\n                        result.append(word)\n                        count_split += 1\n                        word = ''\n\n                    i += len(sep_candidate)\n                    break\n\n            if not found_sep_candidate and count_split < maxsplit:\n                word += s[i]\n                i += 1\n\n            elif not found_sep_candidate and count_split >= maxsplit:\n                word += s[i:]\n                i = len(s)\n\n        if word:\n            result.append(word)\n        return result\n    \n    if type(sep) == str:\n        sep = [sep]\n\n    if maxsplit == -1:\n        maxsplit = 0\n    elif maxsplit == 0:\n        maxsplit = -1\n\n    return re.split(re.compile(\"|\".join([re.escape(x) for x in sep])), s, maxsplit=maxsplit)\n\nclass str_escaped(str):\n    def split(self, sep=None, maxsplit=-1):\n        return split(self, sep=sep, maxsplit=maxsplit)\n    \n    def strip(self, chars=None):\n        return strip(self, characters = chars)\n\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Input:\n    n: int\n    intervals: List[List[int]]\n\n    @classmethod\n    def from_str(cls, input_: str):\n        lines = input_.split('\\n')\n        n = int(lines[0])\n        intervals = [list(map(int, line.split(' '))) for line in lines[1:-1]]\n        assert len(intervals) == n\n        return cls(n, intervals)\n\n    def __repr__(self):\n        return str(self.n) + '\\n' + '\\n'.join([' '.join(map(str, interval)) for interval in self.intervals]) + '\\n'\n", "inputs_example": "2\n3 10\n1 5\n", "time_complexity_inferred": "O(n)", "time_curve_coefficient": 7.53146119700612e-06, "tests": {"public_tests": [{"input": "2\n3 10\n1 5\n", "output": "7\n"}, {"input": "5\n2 6\n1 3\n0 4\n1 20\n0 4\n", "output": "2\n"}, {"input": "4\n1 3\n2 6\n0 4\n3 3\n", "output": "1\n"}, {"input": "3\n4 5\n1 2\n9 20\n", "output": "0\n"}], "private_tests": [{"input": "3\n1 6\n2 5\n3 4\n", "output": "3\n"}, {"input": "2\n1 3\n2 2\n", "output": "2\n"}, {"input": "3\n6 10\n4 8\n5 9\n", "output": "3\n"}, {"input": "2\n2 2\n1 3\n", "output": "2\n"}, {"input": "6\n2 4\n3 6\n2 6\n2 5\n1 4\n1 4\n", "output": "2\n"}, {"input": "2\n4 4\n1 3\n", "output": "2\n"}, {"input": "3\n2 5\n1 4\n1 6\n", "output": "3\n"}, {"input": "3\n3 5\n2 5\n2 6\n", "output": "3\n"}, {"input": "3\n0 10\n5 10\n0 9\n", "output": "9\n"}, {"input": "6\n2 4\n3 5\n2 5\n1 6\n2 4\n3 6\n", "output": "1\n"}, {"input": "3\n6 10\n6 10\n1 5\n", "output": "4\n"}, {"input": "2\n8 11\n5 13\n", "output": "8\n"}, {"input": "2\n1 10\n2 5\n", "output": "9\n"}, {"input": "2\n0 10\n3 4\n", "output": "10\n"}, {"input": "2\n3 4\n2 5\n", "output": "3\n"}, {"input": "3\n1 20\n2 19\n10 11\n", "output": "17\n"}, {"input": "3\n0 8\n1 7\n2 6\n", "output": "6\n"}, {"input": "3\n1 10\n11 100\n50 51\n", "output": "1\n"}, {"input": "4\n3 4\n2 5\n1 6\n1 6\n", "output": "3\n"}, {"input": "2\n1 2\n6 9\n", "output": "3\n"}, {"input": "2\n0 4\n1 2\n", "output": "4\n"}, {"input": "5\n2 6\n2 4\n1 6\n2 5\n2 6\n", "output": "3\n"}, {"input": "4\n1 6\n4 6\n6 9\n4 10\n", "output": "2\n"}, {"input": "2\n0 0\n1 1\n", "output": "0\n"}, {"input": "2\n1 2\n0 4\n", "output": "4\n"}, {"input": "2\n0 5\n1 4\n", "output": "5\n"}, {"input": "4\n1 4\n2 5\n1 5\n2 5\n", "output": "3\n"}, {"input": "2\n0 0\n1 3\n", "output": "2\n"}, {"input": "3\n101 200\n1 100\n2 3\n", "output": "1\n"}, {"input": "2\n1 4\n2 3\n", "output": "3\n"}, {"input": "2\n0 1\n2 4\n", "output": "2\n"}, {"input": "3\n3 4\n2 10\n2 10\n", "output": "8\n"}, {"input": "5\n3 5\n2 6\n2 5\n3 4\n2 5\n", "output": "2\n"}, {"input": "2\n1 6\n2 9\n", "output": "7\n"}, {"input": "4\n2 4\n1 5\n3 5\n2 6\n", "output": "2\n"}, {"input": "4\n1 4\n1 4\n2 2\n1 5\n", "output": "3\n"}, {"input": "3\n3 4\n2 5\n1 5\n", "output": "3\n"}, {"input": "2\n2 3\n1 6\n", "output": "5\n"}, {"input": "2\n7 9\n2 5\n", "output": "3\n"}, {"input": "5\n5 5\n1 4\n2 5\n2 4\n1 4\n", "output": "2\n"}, {"input": "3\n1 7\n2 8\n4 4\n", "output": "5\n"}, {"input": "2\n1 4\n0 2\n", "output": "3\n"}, {"input": "3\n2 2\n3 5\n4 4\n", "output": "0\n"}, {"input": "4\n2 5\n1 2\n3 4\n2 4\n", "output": "1\n"}, {"input": "3\n1 7\n2 3\n4 10\n", "output": "3\n"}, {"input": "2\n2 4\n0 1\n", "output": "2\n"}, {"input": "4\n0 11\n10 16\n11 15\n12 14\n", "output": "2\n"}, {"input": "3\n2 6\n2 5\n2 4\n", "output": "3\n"}, {"input": "5\n1 3\n5 5\n3 4\n2 6\n1 2\n", "output": "0\n"}, {"input": "4\n3 5\n2 6\n2 4\n2 4\n", "output": "2\n"}, {"input": "3\n1 5\n1 5\n6 10\n", "output": "4\n"}, {"input": "3\n1 6\n2 7\n4 4\n", "output": "4\n"}, {"input": "2\n0 1\n1 2\n", "output": "1\n"}, {"input": "3\n1 2\n5 9\n8 28\n", "output": "1\n"}, {"input": "3\n1 9\n2 8\n3 7\n", "output": "6\n"}, {"input": "6\n1 5\n1 4\n1 6\n2 5\n2 6\n2 6\n", "output": "3\n"}, {"input": "2\n1 5\n2 4\n", "output": "4\n"}, {"input": "6\n6 6\n3 4\n3 5\n4 5\n1 2\n5 6\n", "output": "0\n"}], "generated_tests": [{"input": "3\n2 6\n2 5\n3 4\n", "output": "3\n"}, {"input": "3\n6 10\n4 8\n1 9\n", "output": "4\n"}, {"input": "2\n2 2\n1 1\n", "output": "0\n"}, {"input": "6\n2 4\n3 6\n2 6\n4 5\n1 4\n1 4\n", "output": "1\n"}, {"input": "3\n0 10\n5 10\n-1 9\n", "output": "9\n"}, {"input": "2\n6 11\n5 13\n", "output": "8\n"}, {"input": "2\n0 10\n4 4\n", "output": "10\n"}, {"input": "2\n3 4\n0 5\n", "output": "5\n"}, {"input": "3\n0 16\n1 7\n2 6\n", "output": "6\n"}, {"input": "4\n1 4\n2 5\n1 5\n3 5\n", "output": "2\n"}, {"input": "3\n3 4\n2 10\n3 10\n", "output": "7\n"}, {"input": "2\n4 4\n0 3\n", "output": "3\n"}, {"input": "3\n3 5\n1 4\n1 6\n", "output": "3\n"}, {"input": "3\n3 5\n0 5\n2 6\n", "output": "3\n"}, {"input": "6\n2 4\n3 5\n2 5\n1 6\n3 4\n3 6\n", "output": "1\n"}, {"input": "3\n6 10\n6 6\n1 5\n", "output": "0\n"}, {"input": "2\n1 10\n1 5\n", "output": "9\n"}, {"input": "3\n1 7\n11 100\n50 51\n", "output": "1\n"}, {"input": "4\n3 4\n2 5\n1 6\n1 3\n", "output": "1\n"}, {"input": "2\n1 2\n6 14\n", "output": "8\n"}, {"input": "2\n0 8\n1 2\n", "output": "8\n"}, {"input": "5\n2 6\n2 4\n1 6\n0 5\n2 6\n", "output": "3\n"}, {"input": "2\n1 1\n0 4\n", "output": "4\n"}, {"input": "2\n0 6\n1 4\n", "output": "6\n"}, {"input": "2\n0 0\n2 3\n", "output": "1\n"}, {"input": "3\n101 200\n1 100\n1 3\n", "output": "2\n"}, {"input": "2\n1 1\n2 3\n", "output": "1\n"}, {"input": "2\n1 1\n2 4\n", "output": "2\n"}, {"input": "5\n0 5\n2 6\n2 5\n3 4\n2 5\n", "output": "3\n"}, {"input": "2\n2 6\n2 9\n", "output": "7\n"}, {"input": "4\n2 4\n0 5\n3 5\n2 6\n", "output": "2\n"}, {"input": "4\n1 3\n1 4\n2 2\n1 5\n", "output": "2\n"}, {"input": "3\n3 8\n2 5\n1 5\n", "output": "3\n"}, {"input": "2\n2 3\n1 11\n", "output": "10\n"}, {"input": "5\n5 5\n1 4\n2 5\n2 4\n1 1\n", "output": "0\n"}, {"input": "3\n1 7\n2 8\n0 4\n", "output": "5\n"}, {"input": "2\n1 4\n1 2\n", "output": "3\n"}, {"input": "3\n0 2\n3 5\n4 4\n", "output": "0\n"}, {"input": "4\n2 5\n1 2\n3 4\n1 4\n", "output": "1\n"}, {"input": "3\n1 7\n2 3\n4 19\n", "output": "3\n"}, {"input": "2\n2 4\n0 2\n", "output": "2\n"}, {"input": "4\n0 11\n8 16\n11 15\n12 14\n", "output": "2\n"}, {"input": "3\n2 3\n2 5\n2 4\n", "output": "2\n"}, {"input": "4\n3 5\n2 7\n2 4\n2 4\n", "output": "2\n"}, {"input": "3\n1 6\n2 5\n4 4\n", "output": "3\n"}, {"input": "3\n1 1\n5 9\n8 28\n", "output": "1\n"}, {"input": "3\n1 16\n2 8\n3 7\n", "output": "6\n"}, {"input": "6\n1 5\n1 4\n1 6\n1 5\n2 6\n2 6\n", "output": "3\n"}, {"input": "2\n0 5\n2 4\n", "output": "5\n"}, {"input": "2\n3 10\n0 5\n", "output": "7\n"}, {"input": "5\n2 6\n1 3\n1 4\n1 20\n0 4\n", "output": "2\n"}, {"input": "4\n1 3\n2 6\n0 5\n3 3\n", "output": "1\n"}, {"input": "3\n4 5\n1 2\n9 23\n", "output": "0\n"}, {"input": "3\n2 6\n2 5\n4 4\n", "output": "3\n"}, {"input": "3\n6 6\n4 8\n1 9\n", "output": "4\n"}, {"input": "2\n2 2\n0 1\n", "output": "1\n"}, {"input": "6\n2 4\n5 6\n2 6\n4 5\n1 4\n1 4\n", "output": "0\n"}, {"input": "2\n4 4\n0 5\n", "output": "5\n"}, {"input": "3\n3 5\n1 4\n0 6\n", "output": "3\n"}, {"input": "3\n5 5\n0 5\n2 6\n", "output": "3\n"}, {"input": "6\n2 4\n3 6\n2 5\n1 6\n3 4\n3 6\n", "output": "1\n"}, {"input": "3\n6 17\n6 6\n1 5\n", "output": "0\n"}, {"input": "2\n6 11\n4 13\n", "output": "9\n"}, {"input": "2\n1 10\n1 6\n", "output": "9\n"}, {"input": "2\n0 2\n4 4\n", "output": "2\n"}, {"input": "2\n3 6\n0 5\n", "output": "5\n"}, {"input": "3\n-1 16\n1 7\n2 6\n", "output": "6\n"}, {"input": "4\n3 4\n2 5\n1 6\n2 3\n", "output": "1\n"}, {"input": "2\n1 2\n8 14\n", "output": "6\n"}, {"input": "2\n0 8\n1 3\n", "output": "8\n"}, {"input": "5\n2 6\n1 4\n1 6\n0 5\n2 6\n", "output": "3\n"}, {"input": "2\n1 1\n0 8\n", "output": "8\n"}, {"input": "2\n0 6\n0 4\n", "output": "6\n"}, {"input": "4\n1 4\n4 5\n1 5\n3 5\n", "output": "1\n"}, {"input": "2\n0 0\n2 5\n", "output": "3\n"}, {"input": "3\n111 200\n1 100\n1 3\n", "output": "2\n"}, {"input": "2\n0 1\n2 3\n", "output": "1\n"}, {"input": "3\n3 4\n2 20\n3 10\n", "output": "7\n"}, {"input": "5\n0 5\n2 8\n2 5\n3 4\n2 5\n", "output": "3\n"}, {"input": "2\n2 5\n2 9\n", "output": "7\n"}]}, "problem_time_curve_coefficient_list": [6.013489350688375e-05, 3.2867072921219406e-05, 3.2607883809549825e-05, 3.093386614947553e-05, 2.551493956239074e-05, 2.224091623415647e-05, 2.059293919361888e-05, 2.014491912969843e-05, 1.8879745998142485e-05, 1.8158814111669583e-05, 1.8059213122814685e-05, 1.7879335596044582e-05, 1.637682613090035e-05, 1.636296119700612e-05, 1.5430987024694056e-05, 1.5381310396634614e-05, 1.4656446924169583e-05, 1.4578677556818182e-05, 1.4227171424278848e-05, 1.1160475005463287e-05, 9.86389789117133e-06, 9.66020300207605e-06, 9.515885462194057e-06, 8.622030922202797e-06, 8.352559099104022e-06, 8.041144599541084e-06, 7.820369686953672e-06, 7.53146119700612e-06, 7.5073785647945805e-06, 7.365561366368007e-06, 7.226483309659091e-06, 5.832611929086538e-06, 5.696818987652972e-06, 5.653126570694931e-06, 6.8611027644230825e-09, 4.965526660839162e-09, 3.56084735576923e-09, 3.000635991355123e-09, 2.9274953562062934e-09, 2.2282083151223795e-09, 2.130374508304196e-09, 1.974247432255245e-09, 1.856472628933564e-09, 1.7564330201048961e-09, 1.7415660511363631e-09, 1.6896033653846136e-09, 1.6876980441433564e-09, 1.2901210118006986e-09, 1.2182036713286709e-09, 1.167750218531467e-09, 1.0780976835664333e-09, 9.505435970279723e-11], "human_label": true, "framework_note": ""}, "O(nlogn)": {"problem_name": "1029_C. Maximal Intersection", "problem_id": "1333", "solution_id": "1333_127", "description": "You are given n segments on a number line; each endpoint of every segment has integer coordinates. Some segments can degenerate to points. Segments can intersect with each other, be nested in each other or even coincide.\n\nThe intersection of a sequence of segments is such a maximal set of points (not necesserily having integer coordinates) that each point lies within every segment from the sequence. If the resulting set isn't empty, then it always forms some continuous segment. The length of the intersection is the length of the resulting segment or 0 in case the intersection is an empty set.\n\nFor example, the intersection of segments [1;5] and [3;10] is [3;5] (length 2), the intersection of segments [1;5] and [5;7] is [5;5] (length 0) and the intersection of segments [1;5] and [6;6] is an empty set (length 0).\n\nYour task is to remove exactly one segment from the given sequence in such a way that the intersection of the remaining (n - 1) segments has the maximal possible length.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 3 \u22c5 10^5) \u2014 the number of segments in the sequence.\n\nEach of the next n lines contains two integers l_i and r_i (0 \u2264 l_i \u2264 r_i \u2264 10^9) \u2014 the description of the i-th segment.\n\nOutput\n\nPrint a single integer \u2014 the maximal possible length of the intersection of (n - 1) remaining segments after you remove exactly one segment from the sequence.\n\nExamples\n\nInput\n\n4\n1 3\n2 6\n0 4\n3 3\n\n\nOutput\n\n1\n\n\nInput\n\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n\n\nOutput\n\n2\n\n\nInput\n\n3\n4 5\n1 2\n9 20\n\n\nOutput\n\n0\n\n\nInput\n\n2\n3 10\n1 5\n\n\nOutput\n\n7\n\nNote\n\nIn the first example you should remove the segment [3;3], the intersection will become [2;3] (length 1). Removing any other segment will result in the intersection [3;3] (length 0).\n\nIn the second example you should remove the segment [1;3] or segment [2;6], the intersection will become [2;4] (length 2) or [1;3] (length 2), respectively. Removing any other segment will result in the intersection [2;3] (length 1).\n\nIn the third example the intersection will become an empty set no matter the segment you remove.\n\nIn the fourth example you will get the intersection [3;10] (length 7) if you remove the segment [1;5] or the intersection [1;5] (length 4) if you remove the segment [3;10].", "solution_code": "n = int(input())\nL = []\nR = []\nS = []\nfor _ in range(n):\n    a,b = [int(x) for x in input().split()]\n    L.append(a)\n    R.append(b)\n    S.append((a,b))\n\n\nL.sort(reverse = True)\nR.sort()\n\nif (L[0],R[0]) in S:\n    print(max(R[1]-L[1],0))\nelse:\n    print(max(R[0]-L[1],R[1]-L[0],0))", "dataclass_code": "import sys\nimport time\nimport itertools\nfrom itertools import accumulate, product, permutations, combinations\nimport collections\nfrom collections import Counter, OrderedDict, deque, defaultdict, ChainMap\nfrom functools import lru_cache\nimport math\nfrom math import sqrt, sin, cos, tan, ceil, fabs, floor, gcd, exp, log, log2\nimport fractions\nfrom typing import List, Tuple\nimport numpy as np\nimport random\nimport heapq\nfrom heapq import *\nfrom dataclasses import dataclass\n\nimport builtins\nimport re\n\ndef strip(s, characters = None):\n    if characters is None:\n        characters = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n    else:\n        characters = list(characters)\n\n    characters = [x for x in characters if len(x) > 0] \n\n    i = 0\n    while i < len(s):\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[i:i + len(sep_candidate)] == sep_candidate:\n                found_sep_candidate = True\n                i += len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    j = len(s) - 1\n    while j >= 0:\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[j + 1 - len(sep_candidate):j+1] == sep_candidate:\n                found_sep_candidate = True\n                j -= len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    return s[i:j+1]\n\ndef split(s, sep=None, maxsplit=-1):\n    if sep == '':\n        raise builtins.ValueError('empty separator')\n\n    if type(sep) == list and '' in sep:\n        raise builtins.ValueError('empty separator')\n\n    if sep is None:\n        sep = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n        result = []\n        word = ''\n        count_split = 0\n        \n        if maxsplit == -1:\n            maxsplit = len(s) * 1000\n\n        i = 0\n        while i < len(s):\n            found_sep_candidate = False\n\n            for sep_candidate in sep:\n                if s[i:i + len(sep_candidate)] == sep_candidate:\n                    found_sep_candidate = True\n\n                    if word:\n                        result.append(word)\n                        count_split += 1\n                        word = ''\n\n                    i += len(sep_candidate)\n                    break\n\n            if not found_sep_candidate and count_split < maxsplit:\n                word += s[i]\n                i += 1\n\n            elif not found_sep_candidate and count_split >= maxsplit:\n                word += s[i:]\n                i = len(s)\n\n        if word:\n            result.append(word)\n        return result\n    \n    if type(sep) == str:\n        sep = [sep]\n\n    if maxsplit == -1:\n        maxsplit = 0\n    elif maxsplit == 0:\n        maxsplit = -1\n\n    return re.split(re.compile(\"|\".join([re.escape(x) for x in sep])), s, maxsplit=maxsplit)\n\nclass str_escaped(str):\n    def split(self, sep=None, maxsplit=-1):\n        return split(self, sep=sep, maxsplit=maxsplit)\n    \n    def strip(self, chars=None):\n        return strip(self, characters = chars)\n\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Input:\n    n: int\n    intervals: List[List[int]]\n\n    @classmethod\n    def from_str(cls, input_: str):\n        lines = input_.split('\\n')\n        n = int(lines[0])\n        intervals = [list(map(int, line.split(' '))) for line in lines[1:-1]]\n        assert len(intervals) == n\n        return cls(n, intervals)\n\n    def __repr__(self):\n        return str(self.n) + '\\n' + '\\n'.join([' '.join(map(str, interval)) for interval in self.intervals]) + '\\n'\n", "inputs_example": "2\n3 10\n1 5\n", "time_complexity_inferred": "O(nlogn)", "time_curve_coefficient": 1.0970126230582419e-05, "tests": {"public_tests": [{"input": "2\n3 10\n1 5\n", "output": "7\n"}, {"input": "5\n2 6\n1 3\n0 4\n1 20\n0 4\n", "output": "2\n"}, {"input": "4\n1 3\n2 6\n0 4\n3 3\n", "output": "1\n"}, {"input": "3\n4 5\n1 2\n9 20\n", "output": "0\n"}], "private_tests": [{"input": "3\n1 6\n2 5\n3 4\n", "output": "3\n"}, {"input": "2\n1 3\n2 2\n", "output": "2\n"}, {"input": "3\n6 10\n4 8\n5 9\n", "output": "3\n"}, {"input": "2\n2 2\n1 3\n", "output": "2\n"}, {"input": "6\n2 4\n3 6\n2 6\n2 5\n1 4\n1 4\n", "output": "2\n"}, {"input": "2\n4 4\n1 3\n", "output": "2\n"}, {"input": "3\n2 5\n1 4\n1 6\n", "output": "3\n"}, {"input": "3\n3 5\n2 5\n2 6\n", "output": "3\n"}, {"input": "3\n0 10\n5 10\n0 9\n", "output": "9\n"}, {"input": "6\n2 4\n3 5\n2 5\n1 6\n2 4\n3 6\n", "output": "1\n"}, {"input": "3\n6 10\n6 10\n1 5\n", "output": "4\n"}, {"input": "2\n8 11\n5 13\n", "output": "8\n"}, {"input": "2\n1 10\n2 5\n", "output": "9\n"}, {"input": "2\n0 10\n3 4\n", "output": "10\n"}, {"input": "2\n3 4\n2 5\n", "output": "3\n"}, {"input": "3\n1 20\n2 19\n10 11\n", "output": "17\n"}, {"input": "3\n0 8\n1 7\n2 6\n", "output": "6\n"}, {"input": "3\n1 10\n11 100\n50 51\n", "output": "1\n"}, {"input": "4\n3 4\n2 5\n1 6\n1 6\n", "output": "3\n"}, {"input": "2\n1 2\n6 9\n", "output": "3\n"}, {"input": "2\n0 4\n1 2\n", "output": "4\n"}, {"input": "5\n2 6\n2 4\n1 6\n2 5\n2 6\n", "output": "3\n"}, {"input": "4\n1 6\n4 6\n6 9\n4 10\n", "output": "2\n"}, {"input": "2\n0 0\n1 1\n", "output": "0\n"}, {"input": "2\n1 2\n0 4\n", "output": "4\n"}, {"input": "2\n0 5\n1 4\n", "output": "5\n"}, {"input": "4\n1 4\n2 5\n1 5\n2 5\n", "output": "3\n"}, {"input": "2\n0 0\n1 3\n", "output": "2\n"}, {"input": "3\n101 200\n1 100\n2 3\n", "output": "1\n"}, {"input": "2\n1 4\n2 3\n", "output": "3\n"}, {"input": "2\n0 1\n2 4\n", "output": "2\n"}, {"input": "3\n3 4\n2 10\n2 10\n", "output": "8\n"}, {"input": "5\n3 5\n2 6\n2 5\n3 4\n2 5\n", "output": "2\n"}, {"input": "2\n1 6\n2 9\n", "output": "7\n"}, {"input": "4\n2 4\n1 5\n3 5\n2 6\n", "output": "2\n"}, {"input": "4\n1 4\n1 4\n2 2\n1 5\n", "output": "3\n"}, {"input": "3\n3 4\n2 5\n1 5\n", "output": "3\n"}, {"input": "2\n2 3\n1 6\n", "output": "5\n"}, {"input": "2\n7 9\n2 5\n", "output": "3\n"}, {"input": "5\n5 5\n1 4\n2 5\n2 4\n1 4\n", "output": "2\n"}, {"input": "3\n1 7\n2 8\n4 4\n", "output": "5\n"}, {"input": "2\n1 4\n0 2\n", "output": "3\n"}, {"input": "3\n2 2\n3 5\n4 4\n", "output": "0\n"}, {"input": "4\n2 5\n1 2\n3 4\n2 4\n", "output": "1\n"}, {"input": "3\n1 7\n2 3\n4 10\n", "output": "3\n"}, {"input": "2\n2 4\n0 1\n", "output": "2\n"}, {"input": "4\n0 11\n10 16\n11 15\n12 14\n", "output": "2\n"}, {"input": "3\n2 6\n2 5\n2 4\n", "output": "3\n"}, {"input": "5\n1 3\n5 5\n3 4\n2 6\n1 2\n", "output": "0\n"}, {"input": "4\n3 5\n2 6\n2 4\n2 4\n", "output": "2\n"}, {"input": "3\n1 5\n1 5\n6 10\n", "output": "4\n"}, {"input": "3\n1 6\n2 7\n4 4\n", "output": "4\n"}, {"input": "2\n0 1\n1 2\n", "output": "1\n"}, {"input": "3\n1 2\n5 9\n8 28\n", "output": "1\n"}, {"input": "3\n1 9\n2 8\n3 7\n", "output": "6\n"}, {"input": "6\n1 5\n1 4\n1 6\n2 5\n2 6\n2 6\n", "output": "3\n"}, {"input": "2\n1 5\n2 4\n", "output": "4\n"}, {"input": "6\n6 6\n3 4\n3 5\n4 5\n1 2\n5 6\n", "output": "0\n"}], "generated_tests": [{"input": "3\n2 6\n2 5\n3 4\n", "output": "3\n"}, {"input": "3\n6 10\n4 8\n1 9\n", "output": "4\n"}, {"input": "2\n2 2\n1 1\n", "output": "0\n"}, {"input": "6\n2 4\n3 6\n2 6\n4 5\n1 4\n1 4\n", "output": "1\n"}, {"input": "3\n0 10\n5 10\n-1 9\n", "output": "9\n"}, {"input": "2\n6 11\n5 13\n", "output": "8\n"}, {"input": "2\n0 10\n4 4\n", "output": "10\n"}, {"input": "2\n3 4\n0 5\n", "output": "5\n"}, {"input": "3\n0 16\n1 7\n2 6\n", "output": "6\n"}, {"input": "4\n1 4\n2 5\n1 5\n3 5\n", "output": "2\n"}, {"input": "3\n3 4\n2 10\n3 10\n", "output": "7\n"}, {"input": "2\n4 4\n0 3\n", "output": "3\n"}, {"input": "3\n3 5\n1 4\n1 6\n", "output": "3\n"}, {"input": "3\n3 5\n0 5\n2 6\n", "output": "3\n"}, {"input": "6\n2 4\n3 5\n2 5\n1 6\n3 4\n3 6\n", "output": "1\n"}, {"input": "3\n6 10\n6 6\n1 5\n", "output": "0\n"}, {"input": "2\n1 10\n1 5\n", "output": "9\n"}, {"input": "3\n1 7\n11 100\n50 51\n", "output": "1\n"}, {"input": "4\n3 4\n2 5\n1 6\n1 3\n", "output": "1\n"}, {"input": "2\n1 2\n6 14\n", "output": "8\n"}, {"input": "2\n0 8\n1 2\n", "output": "8\n"}, {"input": "5\n2 6\n2 4\n1 6\n0 5\n2 6\n", "output": "3\n"}, {"input": "2\n1 1\n0 4\n", "output": "4\n"}, {"input": "2\n0 6\n1 4\n", "output": "6\n"}, {"input": "2\n0 0\n2 3\n", "output": "1\n"}, {"input": "3\n101 200\n1 100\n1 3\n", "output": "2\n"}, {"input": "2\n1 1\n2 3\n", "output": "1\n"}, {"input": "2\n1 1\n2 4\n", "output": "2\n"}, {"input": "5\n0 5\n2 6\n2 5\n3 4\n2 5\n", "output": "3\n"}, {"input": "2\n2 6\n2 9\n", "output": "7\n"}, {"input": "4\n2 4\n0 5\n3 5\n2 6\n", "output": "2\n"}, {"input": "4\n1 3\n1 4\n2 2\n1 5\n", "output": "2\n"}, {"input": "3\n3 8\n2 5\n1 5\n", "output": "3\n"}, {"input": "2\n2 3\n1 11\n", "output": "10\n"}, {"input": "5\n5 5\n1 4\n2 5\n2 4\n1 1\n", "output": "0\n"}, {"input": "3\n1 7\n2 8\n0 4\n", "output": "5\n"}, {"input": "2\n1 4\n1 2\n", "output": "3\n"}, {"input": "3\n0 2\n3 5\n4 4\n", "output": "0\n"}, {"input": "4\n2 5\n1 2\n3 4\n1 4\n", "output": "1\n"}, {"input": "3\n1 7\n2 3\n4 19\n", "output": "3\n"}, {"input": "2\n2 4\n0 2\n", "output": "2\n"}, {"input": "4\n0 11\n8 16\n11 15\n12 14\n", "output": "2\n"}, {"input": "3\n2 3\n2 5\n2 4\n", "output": "2\n"}, {"input": "4\n3 5\n2 7\n2 4\n2 4\n", "output": "2\n"}, {"input": "3\n1 6\n2 5\n4 4\n", "output": "3\n"}, {"input": "3\n1 1\n5 9\n8 28\n", "output": "1\n"}, {"input": "3\n1 16\n2 8\n3 7\n", "output": "6\n"}, {"input": "6\n1 5\n1 4\n1 6\n1 5\n2 6\n2 6\n", "output": "3\n"}, {"input": "2\n0 5\n2 4\n", "output": "5\n"}, {"input": "2\n3 10\n0 5\n", "output": "7\n"}, {"input": "5\n2 6\n1 3\n1 4\n1 20\n0 4\n", "output": "2\n"}, {"input": "4\n1 3\n2 6\n0 5\n3 3\n", "output": "1\n"}, {"input": "3\n4 5\n1 2\n9 23\n", "output": "0\n"}, {"input": "3\n2 6\n2 5\n4 4\n", "output": "3\n"}, {"input": "3\n6 6\n4 8\n1 9\n", "output": "4\n"}, {"input": "2\n2 2\n0 1\n", "output": "1\n"}, {"input": "6\n2 4\n5 6\n2 6\n4 5\n1 4\n1 4\n", "output": "0\n"}, {"input": "2\n4 4\n0 5\n", "output": "5\n"}, {"input": "3\n3 5\n1 4\n0 6\n", "output": "3\n"}, {"input": "3\n5 5\n0 5\n2 6\n", "output": "3\n"}, {"input": "6\n2 4\n3 6\n2 5\n1 6\n3 4\n3 6\n", "output": "1\n"}, {"input": "3\n6 17\n6 6\n1 5\n", "output": "0\n"}, {"input": "2\n6 11\n4 13\n", "output": "9\n"}, {"input": "2\n1 10\n1 6\n", "output": "9\n"}, {"input": "2\n0 2\n4 4\n", "output": "2\n"}, {"input": "2\n3 6\n0 5\n", "output": "5\n"}, {"input": "3\n-1 16\n1 7\n2 6\n", "output": "6\n"}, {"input": "4\n3 4\n2 5\n1 6\n2 3\n", "output": "1\n"}, {"input": "2\n1 2\n8 14\n", "output": "6\n"}, {"input": "2\n0 8\n1 3\n", "output": "8\n"}, {"input": "5\n2 6\n1 4\n1 6\n0 5\n2 6\n", "output": "3\n"}, {"input": "2\n1 1\n0 8\n", "output": "8\n"}, {"input": "2\n0 6\n0 4\n", "output": "6\n"}, {"input": "4\n1 4\n4 5\n1 5\n3 5\n", "output": "1\n"}, {"input": "2\n0 0\n2 5\n", "output": "3\n"}, {"input": "3\n111 200\n1 100\n1 3\n", "output": "2\n"}, {"input": "2\n0 1\n2 3\n", "output": "1\n"}, {"input": "3\n3 4\n2 20\n3 10\n", "output": "7\n"}, {"input": "5\n0 5\n2 8\n2 5\n3 4\n2 5\n", "output": "3\n"}, {"input": "2\n2 5\n2 9\n", "output": "7\n"}]}, "problem_time_curve_coefficient_list": [2.0716858674227997e-05, 1.440352017251919e-05, 1.3234265845727208e-05, 1.1400375249232763e-05, 1.1286910941903415e-05, 1.1193764429980278e-05, 1.1161331334245002e-05, 1.1140512087161246e-05, 1.1133527767760614e-05, 1.1107653965090663e-05, 1.109600302841008e-05, 1.1085927291587105e-05, 1.1076212576135018e-05, 1.1076211532113815e-05, 1.106883677502357e-05, 1.106862729964605e-05, 1.1025883774533021e-05, 1.1025374510446252e-05, 1.0999310320164316e-05, 1.0987814630177427e-05, 1.0985132930016152e-05, 1.0970126230582419e-05, 1.0963036967679724e-05, 1.094672847647684e-05, 1.0881341556357058e-05, 1.0857668705441792e-05, 1.0843996538116754e-05, 1.0813402478700729e-05, 1.0801154047039575e-05, 1.0779006061199756e-05, 1.0754923434399435e-05, 1.0732338454360377e-05, 1.0710070387895229e-05, 1.0696699195730753e-05, 1.0620590271718699e-05, 1.0369827375151823e-05, 1.021096873324298e-05, 8.559926613166881e-06, 7.1301647347332545e-06, 1.375657380756408e-06, 3.992132867132863e-09, 2.5145869755244792e-09, 2.4990097792832165e-09, 1.0658462631118893e-09], "human_label": true, "framework_note": ""}}, "1003_A. Polycarp's Pockets": {"O(n)": {"problem_name": "1003_A. Polycarp's Pockets", "problem_id": "976", "solution_id": "976_1131", "description": "Polycarp has n coins, the value of the i-th coin is a_i. Polycarp wants to distribute all the coins between his pockets, but he cannot put two coins with the same value into the same pocket.\n\nFor example, if Polycarp has got six coins represented as an array a = [1, 2, 4, 3, 3, 2], he can distribute the coins into two pockets as follows: [1, 2, 3], [2, 3, 4].\n\nPolycarp wants to distribute all the coins with the minimum number of used pockets. Help him to do that.\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of coins.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 100) \u2014 values of coins.\n\nOutput\n\nPrint only one integer \u2014 the minimum number of pockets Polycarp needs to distribute all the coins so no two coins with the same value are put into the same pocket.\n\nExamples\n\nInput\n\n6\n1 2 4 3 3 2\n\n\nOutput\n\n2\n\n\nInput\n\n1\n100\n\n\nOutput\n\n1", "solution_code": "n = int(input())\narr = list(map(int, input().split()))\n\nd = dict()\nfor a in arr:\n    if not a in d:\n        d[a] = 0\n    d[a] += 1\n\nmaxn = 0\nfor a in d:\n    maxn = max(maxn, d[a])\n\nprint(maxn)\n", "dataclass_code": "import sys\nimport time\nimport itertools\nfrom itertools import accumulate, product, permutations, combinations\nimport collections\nfrom collections import Counter, OrderedDict, deque, defaultdict, ChainMap\nfrom functools import lru_cache\nimport math\nfrom math import sqrt, sin, cos, tan, ceil, fabs, floor, gcd, exp, log, log2\nimport fractions\nfrom typing import List, Tuple\nimport numpy as np\nimport random\nimport heapq\nfrom heapq import *\nfrom dataclasses import dataclass\n\nimport builtins\nimport re\n\ndef strip(s, characters = None):\n    if characters is None:\n        characters = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n    else:\n        characters = list(characters)\n\n    characters = [x for x in characters if len(x) > 0] \n\n    i = 0\n    while i < len(s):\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[i:i + len(sep_candidate)] == sep_candidate:\n                found_sep_candidate = True\n                i += len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    j = len(s) - 1\n    while j >= 0:\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[j + 1 - len(sep_candidate):j+1] == sep_candidate:\n                found_sep_candidate = True\n                j -= len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    return s[i:j+1]\n\ndef split(s, sep=None, maxsplit=-1):\n    if sep == '':\n        raise builtins.ValueError('empty separator')\n\n    if type(sep) == list and '' in sep:\n        raise builtins.ValueError('empty separator')\n\n    if sep is None:\n        sep = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n        result = []\n        word = ''\n        count_split = 0\n        \n        if maxsplit == -1:\n            maxsplit = len(s) * 1000\n\n        i = 0\n        while i < len(s):\n            found_sep_candidate = False\n\n            for sep_candidate in sep:\n                if s[i:i + len(sep_candidate)] == sep_candidate:\n                    found_sep_candidate = True\n\n                    if word:\n                        result.append(word)\n                        count_split += 1\n                        word = ''\n\n                    i += len(sep_candidate)\n                    break\n\n            if not found_sep_candidate and count_split < maxsplit:\n                word += s[i]\n                i += 1\n\n            elif not found_sep_candidate and count_split >= maxsplit:\n                word += s[i:]\n                i = len(s)\n\n        if word:\n            result.append(word)\n        return result\n    \n    if type(sep) == str:\n        sep = [sep]\n\n    if maxsplit == -1:\n        maxsplit = 0\n    elif maxsplit == 0:\n        maxsplit = -1\n\n    return re.split(re.compile(\"|\".join([re.escape(x) for x in sep])), s, maxsplit=maxsplit)\n\nclass str_escaped(str):\n    def split(self, sep=None, maxsplit=-1):\n        return split(self, sep=sep, maxsplit=maxsplit)\n    \n    def strip(self, chars=None):\n        return strip(self, characters = chars)\n\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Input:\n    n: int\n    a_list: List[str]\n\n    @classmethod\n    def from_str(cls, input_: str):\n        n, a_list, _ = input_.split('\\n')\n        n = int(n)\n        a_list = a_list.split(' ')\n        assert n == len(a_list)\n        return cls(n, a_list)\n\n    def __repr__(self):\n        return str(self.n) + '\\n' + ' '.join(self.a_list) + '\\n'\n", "inputs_example": "6\n1 2 4 3 3 2\n", "time_complexity_inferred": "O(n)", "time_curve_coefficient": 2.5661301901223775e-06, "tests": {"public_tests": [{"input": "6\n1 2 4 3 3 2\n", "output": "2\n"}, {"input": "1\n100\n", "output": "1\n"}], "private_tests": [{"input": "3\n58 59 58\n", "output": "2\n"}, {"input": "3\n1 1 1\n", "output": "3\n"}, {"input": "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "100\n"}, {"input": "15\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "15\n"}, {"input": "50\n7 7 3 3 7 4 5 6 4 3 7 5 6 4 5 4 4 5 6 7 7 7 4 5 5 5 3 7 6 3 4 6 3 6 4 4 5 4 6 6 3 5 6 3 5 3 3 7 7 6\n", "output": "10\n"}, {"input": "100\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 99 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n", "output": "99\n"}, {"input": "97\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "97\n"}, {"input": "5\n1 2 3 4 5\n", "output": "1\n"}, {"input": "99\n97 44 33 56 42 10 61 85 64 26 40 39 82 34 75 9 51 51 39 73 58 38 74 31 13 99 58 1 28 89 76 19 52 7 40 56 12 27 72 72 67 75 62 46 22 55 35 16 18 39 60 63 92 42 85 69 34 61 73 50 57 95 30 4 45 63 76 58 32 35 48 81 10 78 95 79 55 97 21 21 22 94 30 17 78 57 89 93 100 44 16 89 68 55 19 46 42 73 21\n", "output": "3\n"}, {"input": "10\n1 2 2 3 3 3 4 4 4 4\n", "output": "4\n"}, {"input": "9\n1 2 3 4 5 6 7 8 9\n", "output": "1\n"}, {"input": "7\n1 2 3 3 3 1 2\n", "output": "3\n"}, {"input": "100\n45 29 5 2 6 50 22 36 14 15 9 48 46 20 8 37 7 47 12 50 21 38 18 27 33 19 40 10 5 49 38 42 34 37 27 30 35 24 10 3 40 49 41 3 4 44 13 25 28 31 46 36 23 1 1 23 7 22 35 26 21 16 48 42 32 8 11 16 34 11 39 32 47 28 43 41 39 4 14 19 26 45 13 18 15 25 2 44 17 29 17 33 43 6 12 30 9 20 31 24\n", "output": "2\n"}, {"input": "13\n1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "13\n"}, {"input": "6\n2 3 2 5 2 6\n", "output": "3\n"}, {"input": "9\n1 2 3 4 5 6 7 8 8\n", "output": "2\n"}, {"input": "10\n1 1 1 1 2 2 1 1 9 10\n", "output": "6\n"}, {"input": "3\n1 2 3\n", "output": "1\n"}, {"input": "16\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "16\n"}, {"input": "14\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "14\n"}, {"input": "5\n5 5 5 5 1\n", "output": "4\n"}, {"input": "10\n1 2 3 4 5 6 7 8 9 10\n", "output": "1\n"}, {"input": "3\n95 95 4\n", "output": "2\n"}, {"input": "3\n2 2 5\n", "output": "2\n"}, {"input": "100\n59 47 39 47 47 71 47 28 58 47 35 79 58 47 38 47 47 47 47 27 47 43 29 95 47 49 46 71 47 74 79 47 47 32 45 67 47 47 30 37 47 47 16 67 22 76 47 86 84 10 5 47 47 47 47 47 1 51 47 54 47 8 47 47 9 47 47 47 47 28 47 47 26 47 47 47 47 47 47 92 47 47 77 47 47 24 45 47 10 47 47 89 47 27 47 89 47 67 24 71\n", "output": "51\n"}, {"input": "100\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n", "output": "100\n"}, {"input": "12\n1 2 1 1 1 1 1 1 1 1 1 1\n", "output": "11\n"}, {"input": "100\n45 99 10 27 16 85 39 38 17 32 15 23 67 48 50 97 42 70 62 30 44 81 64 73 34 22 46 5 83 52 58 60 33 74 47 88 18 61 78 53 25 95 94 31 3 75 1 57 20 54 59 9 68 7 77 43 21 87 86 24 4 80 11 49 2 72 36 84 71 8 65 55 79 100 41 14 35 89 66 69 93 37 56 82 90 91 51 19 26 92 6 96 13 98 12 28 76 40 63 29\n", "output": "1\n"}, {"input": "8\n1 2 3 4 5 6 7 8\n", "output": "1\n"}, {"input": "2\n1 1\n", "output": "2\n"}, {"input": "7\n1 2 3 4 5 6 7\n", "output": "1\n"}, {"input": "56\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "56\n"}, {"input": "3\n2 1 1\n", "output": "2\n"}, {"input": "99\n35 96 73 72 70 83 22 93 98 75 45 32 81 82 45 54 25 7 53 72 29 2 94 19 21 98 34 28 39 99 55 85 44 23 6 47 98 2 33 34 19 57 49 35 67 4 60 4 4 23 55 6 57 66 16 68 34 45 84 79 48 63 4 9 46 88 98 13 19 27 83 12 4 63 57 22 44 77 44 62 28 52 44 64 9 24 55 22 48 4 2 9 80 76 45 1 56 22 92\n", "output": "6\n"}, {"input": "11\n1 2 3 4 5 6 7 8 9 1 1\n", "output": "3\n"}], "generated_tests": [{"input": "3\n87 59 58\n", "output": "1\n"}, {"input": "100\n1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "99\n"}, {"input": "15\n1 1 1 1 1 1 1 1 1 1 1 1 0 1 1\n", "output": "14\n"}, {"input": "50\n7 6 3 3 7 4 5 6 4 3 7 5 6 4 5 4 4 5 6 7 7 7 4 5 5 5 3 7 6 3 4 6 3 6 4 4 5 4 6 6 3 5 6 3 5 3 3 7 7 6\n", "output": "11\n"}, {"input": "97\n1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "96\n"}, {"input": "5\n1 2 4 4 5\n", "output": "2\n"}, {"input": "99\n97 44 33 56 42 10 61 85 64 26 40 39 82 34 75 9 51 51 39 73 58 38 74 31 13 99 58 1 28 89 76 19 52 7 40 56 12 27 72 72 67 75 62 46 22 55 35 16 18 39 60 63 92 42 85 69 34 61 73 50 57 95 51 4 45 63 76 58 32 35 48 81 10 78 95 79 55 97 21 21 22 94 30 17 78 57 89 93 100 44 16 89 68 55 19 46 42 73 21\n", "output": "3\n"}, {"input": "13\n1 1 1 1 1 1 1 1 1 1 1 1 0\n", "output": "12\n"}, {"input": "10\n1 1 2 1 2 2 1 1 9 10\n", "output": "5\n"}, {"input": "16\n1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1\n", "output": "15\n"}, {"input": "14\n1 1 1 1 1 1 1 0 1 1 1 1 1 1\n", "output": "13\n"}, {"input": "12\n1 2 1 0 1 1 1 1 1 1 1 1\n", "output": "10\n"}, {"input": "56\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "55\n"}, {"input": "99\n35 96 73 72 70 83 22 93 98 75 45 32 81 82 45 54 25 7 53 72 29 2 94 19 21 98 34 28 39 99 55 85 44 23 6 47 98 2 33 34 19 57 49 35 67 4 60 4 4 23 55 6 57 66 16 68 34 39 84 79 48 63 4 9 46 88 98 13 19 27 83 12 4 63 57 22 44 77 44 62 28 52 44 64 9 24 55 22 48 4 2 9 80 76 45 1 56 22 92\n", "output": "6\n"}, {"input": "100\n1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "98\n"}, {"input": "97\n1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "95\n"}, {"input": "12\n1 2 1 0 1 1 1 1 0 1 1 1\n", "output": "9\n"}, {"input": "56\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "54\n"}, {"input": "100\n1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "97\n"}, {"input": "97\n1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "94\n"}, {"input": "10\n1 1 2 0 2 4 1 1 9 10\n", "output": "4\n"}, {"input": "12\n1 2 1 0 1 1 1 1 0 1 1 0\n", "output": "8\n"}, {"input": "56\n1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "53\n"}, {"input": "97\n1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "93\n"}, {"input": "10\n1 2 2 3 3 3 4 7 4 4\n", "output": "3\n"}, {"input": "9\n1 2 3 4 5 1 7 8 9\n", "output": "2\n"}, {"input": "7\n1 2 3 2 3 1 2\n", "output": "3\n"}, {"input": "100\n45 29 5 2 6 50 22 36 14 15 9 48 46 20 8 37 7 47 12 50 21 38 18 27 33 19 40 10 5 49 38 42 34 37 27 30 35 24 10 3 40 49 41 3 4 44 13 25 28 31 46 36 23 1 1 23 7 22 35 26 21 16 48 42 32 8 11 16 34 11 39 32 47 28 43 41 68 4 14 19 26 45 13 18 15 25 2 44 17 29 17 33 43 6 12 30 9 20 31 24\n", "output": "2\n"}, {"input": "6\n3 3 2 5 2 6\n", "output": "2\n"}, {"input": "9\n1 2 3 4 5 10 7 8 8\n", "output": "2\n"}, {"input": "3\n1 2 2\n", "output": "2\n"}, {"input": "5\n5 5 3 5 1\n", "output": "3\n"}, {"input": "10\n1 2 5 4 5 6 7 8 9 10\n", "output": "2\n"}, {"input": "3\n2 4 5\n", "output": "1\n"}, {"input": "100\n45 99 10 27 16 85 39 38 17 32 15 23 67 48 50 97 42 70 62 30 64 81 64 73 34 22 46 5 83 52 58 60 33 74 47 88 18 61 78 53 25 95 94 31 3 75 1 57 20 54 59 9 68 7 77 43 21 87 86 24 4 80 11 49 2 72 36 84 71 8 65 55 79 100 41 14 35 89 66 69 93 37 56 82 90 91 51 19 26 92 6 96 13 98 12 28 76 40 63 29\n", "output": "2\n"}, {"input": "8\n1 2 3 4 5 6 7 11\n", "output": "1\n"}, {"input": "2\n1 2\n", "output": "1\n"}, {"input": "7\n1 4 3 4 5 6 7\n", "output": "2\n"}, {"input": "11\n1 2 3 4 5 6 7 8 18 1 1\n", "output": "3\n"}, {"input": "6\n1 2 4 3 3 3\n", "output": "3\n"}, {"input": "3\n87 84 58\n", "output": "1\n"}, {"input": "15\n1 1 1 1 1 1 1 1 1 0 1 1 0 1 1\n", "output": "13\n"}, {"input": "50\n7 6 3 3 7 4 5 6 4 3 7 5 6 4 5 4 4 5 6 7 7 7 4 5 5 5 3 7 6 3 4 6 3 6 4 4 5 4 6 6 3 5 6 3 5 3 3 7 7 3\n", "output": "11\n"}, {"input": "5\n1 2 4 7 5\n", "output": "1\n"}, {"input": "10\n0 2 2 3 3 3 4 7 4 4\n", "output": "3\n"}, {"input": "9\n1 2 3 4 5 1 7 2 9\n", "output": "2\n"}, {"input": "7\n1 2 3 1 3 1 2\n", "output": "3\n"}, {"input": "100\n45 29 5 2 6 50 22 36 14 15 9 48 46 20 8 37 7 47 12 50 21 38 18 27 33 19 40 10 5 49 38 42 34 37 27 30 35 24 10 3 40 49 41 3 4 44 13 25 28 31 46 69 23 1 1 23 7 22 35 26 21 16 48 42 32 8 11 16 34 11 39 32 47 28 43 41 68 4 14 19 26 45 13 18 15 25 2 44 17 29 17 33 43 6 12 30 9 20 31 24\n", "output": "2\n"}, {"input": "13\n2 1 1 1 1 1 1 1 1 1 1 1 0\n", "output": "11\n"}, {"input": "6\n3 3 2 8 2 6\n", "output": "2\n"}, {"input": "9\n1 3 3 4 5 10 7 8 8\n", "output": "2\n"}, {"input": "10\n1 1 2 1 2 4 1 1 9 10\n", "output": "5\n"}, {"input": "3\n2 2 3\n", "output": "2\n"}, {"input": "16\n1 1 1 1 1 1 1 1 1 0 2 1 1 1 1 1\n", "output": "14\n"}, {"input": "14\n1 1 1 1 1 1 1 0 1 1 1 1 0 1\n", "output": "12\n"}, {"input": "5\n5 5 3 5 0\n", "output": "3\n"}, {"input": "10\n1 2 5 4 5 6 12 8 9 10\n", "output": "2\n"}, {"input": "3\n2 4 4\n", "output": "2\n"}, {"input": "100\n45 99 10 27 16 85 39 38 17 32 15 23 67 48 50 97 42 70 62 30 64 81 64 73 34 22 46 5 83 52 58 60 33 74 47 88 18 61 78 53 25 95 94 31 3 75 1 57 20 54 59 9 68 7 77 43 21 87 86 24 4 80 11 49 2 72 36 84 71 8 65 55 79 100 41 14 12 89 66 69 93 37 56 82 90 91 51 19 26 92 6 96 13 98 12 28 76 40 63 29\n", "output": "2\n"}, {"input": "8\n1 2 5 4 5 6 7 11\n", "output": "2\n"}, {"input": "7\n1 6 3 4 5 6 7\n", "output": "2\n"}, {"input": "99\n35 96 73 72 70 83 22 93 98 75 45 32 81 82 45 54 6 7 53 72 29 2 94 19 21 98 34 28 39 99 55 85 44 23 6 47 98 2 33 34 19 57 49 35 67 4 60 4 4 23 55 6 57 66 16 68 34 39 84 79 48 63 4 9 46 88 98 13 19 27 83 12 4 63 57 22 44 77 44 62 28 52 44 64 9 24 55 22 48 4 2 9 80 76 45 1 56 22 92\n", "output": "6\n"}, {"input": "11\n1 2 4 4 5 6 7 8 18 1 1\n", "output": "3\n"}, {"input": "15\n1 0 1 1 1 1 1 1 1 0 1 1 0 1 1\n", "output": "12\n"}, {"input": "50\n7 6 3 3 7 4 5 6 4 3 7 5 6 4 5 4 4 5 6 7 7 7 4 5 5 5 3 7 6 3 4 6 3 6 4 4 5 4 6 6 3 5 6 3 1 3 3 7 7 3\n", "output": "11\n"}, {"input": "5\n1 2 4 12 5\n", "output": "1\n"}, {"input": "10\n0 2 2 3 6 3 4 7 4 4\n", "output": "3\n"}, {"input": "9\n1 2 3 4 5 1 7 2 10\n", "output": "2\n"}, {"input": "7\n1 2 0 1 3 1 2\n", "output": "3\n"}, {"input": "100\n45 29 5 2 6 50 22 36 14 15 9 48 46 20 8 37 7 47 12 50 21 38 18 27 33 19 40 10 5 49 38 42 34 37 27 30 35 24 10 3 40 49 41 3 4 44 13 25 28 31 46 69 23 1 1 23 7 22 35 26 21 16 48 42 32 8 11 16 34 11 39 32 47 28 43 41 68 4 14 19 26 14 13 18 15 25 2 44 17 29 17 33 43 6 12 30 9 20 31 24\n", "output": "3\n"}, {"input": "13\n2 1 1 1 1 1 1 1 1 1 2 1 0\n", "output": "10\n"}, {"input": "6\n3 3 2 15 2 6\n", "output": "2\n"}, {"input": "9\n1 3 3 6 5 10 7 8 8\n", "output": "2\n"}, {"input": "16\n1 1 1 1 1 1 2 1 1 0 2 1 1 1 1 1\n", "output": "13\n"}, {"input": "14\n1 1 1 1 1 1 1 0 1 1 1 1 0 0\n", "output": "11\n"}, {"input": "10\n1 2 9 4 5 6 12 8 9 10\n", "output": "2\n"}, {"input": "3\n1 4 4\n", "output": "2\n"}, {"input": "100\n45 99 10 27 16 85 39 38 17 32 15 23 67 48 50 97 42 70 62 30 64 81 64 73 34 22 46 5 83 52 58 60 33 74 47 88 18 61 78 53 25 95 94 31 3 75 1 57 20 54 59 9 68 7 77 14 21 87 86 24 4 80 11 49 2 72 36 84 71 8 65 55 79 100 41 14 12 89 66 69 93 37 56 82 90 91 51 19 26 92 6 96 13 98 12 28 76 40 63 29\n", "output": "2\n"}, {"input": "8\n1 2 5 4 5 6 11 11\n", "output": "2\n"}, {"input": "7\n1 6 3 4 1 6 7\n", "output": "2\n"}, {"input": "99\n35 96 73 72 70 83 22 93 98 75 45 32 81 82 45 54 6 7 53 72 29 2 94 19 21 98 34 28 39 99 55 85 44 23 6 47 98 2 33 34 19 57 49 35 67 4 60 4 4 23 55 6 57 66 16 68 34 39 84 79 48 63 4 9 46 88 98 9 19 27 83 12 4 63 57 22 44 77 44 62 28 52 44 64 9 24 55 22 48 4 2 9 80 76 45 1 56 22 92\n", "output": "6\n"}, {"input": "11\n1 2 4 4 5 10 7 8 18 1 1\n", "output": "3\n"}, {"input": "100\n1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "96\n"}, {"input": "15\n1 0 1 1 1 0 1 1 1 0 1 1 0 1 1\n", "output": "11\n"}, {"input": "50\n7 6 3 3 7 4 5 6 4 3 7 5 6 4 5 4 4 5 6 7 7 7 4 5 5 5 3 7 6 3 4 6 3 6 4 4 5 4 6 6 3 5 6 3 1 3 3 7 7 4\n", "output": "11\n"}, {"input": "5\n1 2 4 18 5\n", "output": "1\n"}, {"input": "9\n1 2 6 4 5 1 7 2 10\n", "output": "2\n"}, {"input": "7\n1 2 1 1 3 1 2\n", "output": "4\n"}, {"input": "100\n45 29 5 2 6 50 22 36 14 15 9 48 46 20 8 37 0 47 12 50 21 38 18 27 33 19 40 10 5 49 38 42 34 37 27 30 35 24 10 3 40 49 41 3 4 44 13 25 28 31 46 69 23 1 1 23 7 22 35 26 21 16 48 42 32 8 11 16 34 11 39 32 47 28 43 41 68 4 14 19 26 14 13 18 15 25 2 44 17 29 17 33 43 6 12 30 9 20 31 24\n", "output": "3\n"}, {"input": "13\n2 1 1 1 2 1 1 1 1 1 2 1 0\n", "output": "9\n"}, {"input": "6\n3 3 3 15 2 6\n", "output": "3\n"}, {"input": "9\n1 3 3 6 5 20 7 8 8\n", "output": "2\n"}, {"input": "16\n1 1 1 1 1 1 2 1 1 1 2 1 1 1 1 1\n", "output": "14\n"}, {"input": "14\n1 1 1 1 1 1 1 1 1 1 1 1 0 0\n", "output": "12\n"}, {"input": "10\n1 2 9 8 5 6 12 8 9 10\n", "output": "2\n"}]}, "problem_time_curve_coefficient_list": [0.00011359099269285403, 6.577476253061248e-05, 6.327433696186626e-05, 3.0427446118334794e-05, 2.1243027903736887e-05, 1.3880008509069056e-05, 9.871267107735785e-06, 9.628473680616261e-06, 8.602608593750003e-06, 7.926059375000002e-06, 7.902816796875e-06, 7.791985937500001e-06, 7.748998019558568e-06, 7.606682421875e-06, 7.585059372268357e-06, 7.579204258631994e-06, 7.530341796875e-06, 7.489948828125001e-06, 7.461189062500002e-06, 7.3400632812500004e-06, 7.2770089843750005e-06, 7.237295703125e-06, 7.15020234375e-06, 7.106314453124999e-06, 7.07646171875e-06, 7.060027425699301e-06, 7.008732257976399e-06, 6.770178348994755e-06, 6.668993280157343e-06, 6.668963671875e-06, 6.6661957768793715e-06, 6.580716796875001e-06, 6.562818359375e-06, 6.515699041193183e-06, 6.504044402862762e-06, 6.425281250000001e-06, 6.3947214843750005e-06, 6.372104867788462e-06, 6.306655078125001e-06, 6.244941796875e-06, 6.139164453125e-06, 6.120363281250001e-06, 6.0979046875e-06, 6.019963281250001e-06, 5.9850895159527976e-06, 5.946359839379372e-06, 5.840012109375001e-06, 5.828173437500001e-06, 5.8266183593750014e-06, 5.605559768356644e-06, 5.569341250546329e-06, 5.562528515625e-06, 5.482238008085664e-06, 5.467894326376749e-06, 5.4219205501529715e-06, 5.42191875e-06, 5.304685478583916e-06, 5.244095511909966e-06, 5.2331368280157354e-06, 5.231273574082168e-06, 5.220695899803321e-06, 5.199932746940561e-06, 4.963191133085666e-06, 4.940220484593531e-06, 4.936691856971154e-06, 4.936549770541959e-06, 4.910468053430945e-06, 4.89168653026661e-06, 4.890129466236889e-06, 4.888041425371504e-06, 4.8842867679195796e-06, 4.880606301901225e-06, 4.870755078125001e-06, 4.863491695804196e-06, 4.8496761718750015e-06, 4.815144285402098e-06, 4.784539895651224e-06, 4.7740844077797205e-06, 4.712567020869755e-06, 4.68736235249126e-06, 4.678683197661714e-06, 4.6775821405157346e-06, 4.676553854348776e-06, 4.67487848284528e-06, 4.642208041958042e-06, 4.6237511063155596e-06, 4.4753785647945806e-06, 4.4440500846809435e-06, 4.3672770159527976e-06, 4.360502171656469e-06, 4.327452961101398e-06, 4.3249303430944056e-06, 4.308356260926575e-06, 4.29896595006556e-06, 4.285529815887238e-06, 4.251320380791084e-06, 4.220940081402972e-06, 4.218243771853147e-06, 4.185406318291085e-06, 4.184946855878497e-06, 4.183937486341783e-06, 4.180479007320804e-06, 4.167638958697553e-06, 4.1611164636145105e-06, 4.160830542504371e-06, 4.150641908872378e-06, 4.146833274147728e-06, 4.146412068400351e-06, 4.1367943618881125e-06, 4.135958041958042e-06, 4.126229539991259e-06, 4.117105291193182e-06, 4.0535989264641615e-06, 4.048429769449301e-06, 4.017065668706295e-06, 4.01295970826049e-06, 3.909204695694931e-06, 3.858543433129371e-06, 3.850483200393357e-06, 3.7786197415865386e-06, 3.7210459325830426e-06, 3.709046902316433e-06, 3.655012743116259e-06, 3.648187445367133e-06, 3.595327605987762e-06, 3.54472855659965e-06, 3.5148738663680073e-06, 3.4400751884833925e-06, 3.315450475305944e-06, 3.112501461429196e-06, 3.0995712822333916e-06, 3.0801493389423085e-06, 3.070306872814685e-06, 3.0574061953671327e-06, 3.037912737652972e-06, 3.012866286057692e-06, 2.9376253687718534e-06, 2.891026551573427e-06, 2.8819846618225527e-06, 2.8798985604239514e-06, 2.8594605277534968e-06, 2.854617324082168e-06, 2.8468638412368882e-06, 2.842451431381119e-06, 2.8415010653409093e-06, 2.8344158517263993e-06, 2.8198692498907344e-06, 2.819209312172203e-06, 2.818730318509616e-06, 2.8165889969405595e-06, 2.813564152644231e-06, 2.8091078725961537e-06, 2.8062660620629367e-06, 2.796753277972028e-06, 2.794942239401224e-06, 2.790642578125e-06, 2.782614783653846e-06, 2.7822319711538464e-06, 2.7790855140952797e-06, 2.7790399502840913e-06, 2.7758551682692307e-06, 2.7679743362106644e-06, 2.7656935915646853e-06, 2.763706075174825e-06, 2.7598153955419582e-06, 2.7549568127185316e-06, 2.7429505435970283e-06, 2.7328904747596154e-06, 2.7276228829763987e-06, 2.7237671956949306e-06, 2.722669238964161e-06, 2.719456252731644e-06, 2.712929591892483e-06, 2.700350264969406e-06, 2.6857261664117137e-06, 2.6800183020104895e-06, 2.677414130791084e-06, 2.676574751420455e-06, 2.6730430780157348e-06, 2.6721644859047204e-06, 2.671066337958916e-06, 2.6710168132648602e-06, 2.6692937472683564e-06, 2.6678728556599647e-06, 2.6660243662587415e-06, 2.6644932664991264e-06, 2.662269845388986e-06, 2.653318933020105e-06, 2.6511004015515734e-06, 2.6486665482954548e-06, 2.6426190859921327e-06, 2.6409723830856648e-06, 2.6409402589597905e-06, 2.639618389423077e-06, 2.6395569137893356e-06, 2.6338711620410837e-06, 2.6317422694493006e-06, 2.630907970935315e-06, 2.627245356206294e-06, 2.6271098530375874e-06, 2.6258674470061193e-06, 2.6252971208479022e-06, 2.6209189521416086e-06, 2.6208559467875876e-06, 2.6195901442307696e-06, 2.619078562062937e-06, 2.6173557145979026e-06, 2.6169011828015733e-06, 2.6162309467875876e-06, 2.615337521853147e-06, 2.6135196541739513e-06, 2.607419238964161e-06, 2.6072162505463287e-06, 2.606945913461539e-06, 2.605392141062063e-06, 2.605319848120629e-06, 2.604897440450175e-06, 2.603655812937063e-06, 2.6015435560533224e-06, 2.5988601535183566e-06, 2.5974004725743005e-06, 2.5928248197115385e-06, 2.5917213723776227e-06, 2.5915259506118885e-06, 2.5911504315996503e-06, 2.59038748361014e-06, 2.5895243662587415e-06, 2.588296560861014e-06, 2.5857621831293707e-06, 2.5843096864073425e-06, 2.5840419443837413e-06, 2.5831794279938815e-06, 2.582643438592658e-06, 2.582562827797203e-06, 2.5819798404720283e-06, 2.5799472383085666e-06, 2.5794794853583915e-06, 2.578806326486014e-06, 2.577851098120629e-06, 2.5777265625e-06, 2.5776789089816435e-06, 2.577226207386364e-06, 2.577017660074301e-06, 2.57678817471591e-06, 2.5767541930725524e-06, 2.575997992242133e-06, 2.5743774448208044e-06, 2.5715770323426576e-06, 2.5707858391608393e-06, 2.5700209517045457e-06, 2.5699729977054198e-06, 2.5690445667613636e-06, 2.5675569274475526e-06, 2.5670970962631117e-06, 2.5670511636800704e-06, 2.56624452305507e-06, 2.5661301901223775e-06, 2.5660953480113633e-06, 2.56458321951486e-06, 2.564200926027098e-06, 2.5641357217001752e-06, 2.5640566269667836e-06, 2.563753073098776e-06, 2.562695940777972e-06, 2.561962194055944e-06, 2.561245055725524e-06, 2.56123789881993e-06, 2.561107121394231e-06, 2.560969036822553e-06, 2.5598355140952797e-06, 2.5597368061625877e-06, 2.559466687609266e-06, 2.5576981807255246e-06, 2.5572682200611884e-06, 2.5572540428321684e-06, 2.5561839488636365e-06, 2.556119085992133e-06, 2.555217070039336e-06, 2.5551529583697552e-06, 2.554296601835665e-06, 2.5527693673513987e-06, 2.5512406031468533e-06, 2.550867515297203e-06, 2.5488205720061187e-06, 2.547985658872378e-06, 2.545796574519231e-06, 2.5450982845279723e-06, 2.544171301354895e-06, 2.542731834571678e-06, 2.542552529501748e-06, 2.541389040646853e-06, 2.54131284145542e-06, 2.537015338177448e-06, 2.532193454982518e-06, 2.531619591346154e-06, 2.530883331512238e-06, 2.5227820012019234e-06, 2.5206009751966784e-06, 2.5132849650349652e-06, 2.5120787123033224e-06, 2.5112084517045455e-06, 2.5097152125218536e-06, 2.503229539991259e-06, 2.501818823754371e-06, 2.50072265625e-06, 2.5005992679195807e-06, 2.499200243116259e-06, 2.4985944738854898e-06, 2.49505422312063e-06, 2.4941697170017486e-06, 2.4879644613199306e-06, 2.4865187937062935e-06, 2.485832481971154e-06, 2.4786519476617135e-06, 2.475631733500874e-06, 2.4743390105987765e-06, 2.4741109320367134e-06, 2.4740613390515735e-06, 2.470582604895105e-06, 2.469899871612762e-06, 2.4685264286494755e-06, 2.4636200284090913e-06, 2.4598992569930074e-06, 2.4574941952578673e-06, 2.456604485358392e-06, 2.4561067253059447e-06, 2.4530387893356644e-06, 2.4490533353365387e-06, 2.447714515952797e-06, 2.447038065450175e-06, 2.4449414062500002e-06, 2.444644121503497e-06, 2.4431968422202798e-06, 2.4416324164117134e-06, 2.4405658189466786e-06, 2.4381908599213285e-06, 2.4378479703889863e-06, 2.4360906495847904e-06, 2.435715813483392e-06, 2.434171943291084e-06, 2.433599677666084e-06, 2.4335263193837414e-06, 2.4315356616040213e-06, 2.4315133987106645e-06, 2.4314197716346153e-06, 2.429596208479021e-06, 2.4283270323426578e-06, 2.4269572907561193e-06, 2.4267524994536716e-06, 2.4258773082386365e-06, 2.4248047967657344e-06, 2.4237481834571676e-06, 2.422835582386364e-06, 2.421246407888986e-06, 2.42114763166521e-06, 2.421135161713287e-06, 2.4202868088942313e-06, 2.4199564849213286e-06, 2.419787054742133e-06, 2.419240302666084e-06, 2.4190475032779726e-06, 2.418600647399476e-06, 2.4183759014423076e-06, 2.417636541193182e-06, 2.417428622159091e-06, 2.4168435178103146e-06, 2.4161379479895104e-06, 2.415018588833042e-06, 2.4141719842657343e-06, 2.413803799715909e-06, 2.4136758768575175e-06, 2.413385789991259e-06, 2.4132790237106645e-06, 2.4131502267263986e-06, 2.4131170918924827e-06, 2.408833888767483e-06, 2.407744796219406e-06, 2.4073295317963286e-06, 2.40731326486014e-06, 2.4067497268356644e-06, 2.4018870192307697e-06, 2.4017157178758744e-06, 2.4015199683129374e-06, 2.4000242296765735e-06, 2.3996088423295453e-06, 2.399539977600525e-06, 2.3986835937500003e-06, 2.397767851289336e-06, 2.3975980386800705e-06, 2.3965348830856645e-06, 2.396189207277098e-06, 2.393109934986888e-06, 2.392890406468532e-06, 2.392811830747378e-06, 2.3928068045236018e-06, 2.3924808921547204e-06, 2.3921202469405597e-06, 2.3916235658872377e-06, 2.38994140625e-06, 2.38893822388549e-06, 2.3886039936625876e-06, 2.387262237762238e-06, 2.3865524612106643e-06, 2.386376830201049e-06, 2.385696664663462e-06, 2.3843341619318183e-06, 2.3826681872814686e-06, 2.3825814849213288e-06, 2.382254001857518e-06, 2.382202114291958e-06, 2.3815317826704552e-06, 2.3815285729895105e-06, 2.381171560861014e-06, 2.3794702250874127e-06, 2.378096727491259e-06, 2.3776281550480772e-06, 2.3758073371940557e-06, 2.3750175371503497e-06, 2.3748590608610146e-06, 2.3744139532342662e-06, 2.3742967793924826e-06, 2.3736474814248258e-06, 2.3727966564685313e-06, 2.3725339133522728e-06, 2.371541903409091e-06, 2.3704172994973777e-06, 2.369767782998252e-06, 2.3687117023601395e-06, 2.3683491996284964e-06, 2.3645972465034964e-06, 2.3641538324956295e-06, 2.363594979239511e-06, 2.361252895541958e-06, 2.3588219105113638e-06, 2.355272454108392e-06, 2.3529758522727275e-06, 1.8480969596809442e-06, 1.8360556162587415e-06, 1.6466682419143358e-06, 1.624681640625e-06, 1.6185754343312937e-06, 1.6129496011800702e-06, 1.6083199164117134e-06, 1.6051549251529722e-06, 1.6024709899475525e-06, 1.6007449054851402e-06, 1.6000416712194057e-06, 1.5961150021853146e-06, 1.590858241368007e-06, 1.5843493498688813e-06, 1.5831037341564687e-06, 1.5795236287150352e-06, 1.573528600305944e-06, 1.5693030348557692e-06, 1.5684428267045455e-06, 1.5639040100524478e-06, 1.5638262265078672e-06, 1.5540526251092658e-06, 1.5512073863636365e-06, 1.5496562090253498e-06, 1.5458544443837413e-06, 1.537935178103147e-06, 1.484501024366259e-06, 1.473050207604895e-06, 1.4665404829545455e-06, 1.4426368143575175e-06, 1.4121490521197553e-06, 1.4059903436407342e-06, 1.4003145077578672e-06, 1.3995204053758744e-06, 1.39888319493007e-06, 1.3978227573208043e-06, 1.3976917477054196e-06, 1.3960102846372378e-06, 1.395525076486014e-06, 1.395216619318182e-06, 1.3951122295673077e-06, 1.3949516089379371e-06, 1.3878479567307692e-06, 1.3857498497596156e-06, 1.3844063592657343e-06, 1.3818814193618882e-06, 1.3803492132867135e-06, 1.3795782206075175e-06, 1.3783125546328672e-06, 1.3779911494755247e-06, 1.3768775950611889e-06, 1.3733622295673077e-06, 1.3709124371722028e-06, 1.3702356861888111e-06, 1.3695577605987763e-06, 1.3691869263548951e-06, 1.3667992515297203e-06, 1.3646682419143358e-06, 1.3634581921984267e-06, 1.3621806435751748e-06, 1.3617500136582169e-06, 1.3606832522945805e-06, 1.3605569137893356e-06, 1.359015952797203e-06, 1.3586827059659092e-06, 1.3582190641389863e-06, 1.3579495738636366e-06, 1.3578889860139862e-06, 1.3578349541083915e-06, 1.357493266499126e-06, 1.3571559495192309e-06, 1.3563142619099652e-06, 1.3562205665428322e-06, 1.3553065313592657e-06, 1.355304742132867e-06, 1.3552383222246506e-06, 1.3551031468531468e-06, 1.3550125519012238e-06, 1.3547379807692307e-06, 1.3532853338068182e-06, 1.3531090472027974e-06, 1.3526026961319932e-06, 1.3524396853146853e-06, 1.352121913243007e-06, 1.351775841346154e-06, 1.351702305506993e-06, 1.3513373579545455e-06, 1.3513039772727273e-06, 1.3512923951048952e-06, 1.3506443400349653e-06, 1.3502711565777972e-06, 1.3495514778190561e-06, 1.349532328999126e-06, 1.3491365002185313e-06, 1.3491195093968532e-06, 1.3488532424606643e-06, 1.348495410839161e-06, 1.3484010189029718e-06, 1.3481839761800699e-06, 1.3477945804195806e-06, 1.3476976617132866e-06, 1.3468030075393357e-06, 1.3459140761582168e-06, 1.3458649065777975e-06, 1.345430247486888e-06, 1.345217821241259e-06, 1.3450201322115387e-06, 1.34443711756993e-06, 1.3441521115603148e-06, 1.3405859648164337e-06, 1.3391763139204548e-06, 2.7251562500000003e-08, 6.1070312500000006e-09, 4.734765625000002e-09, 4.40546875e-09, 3.973828124999999e-09, 2.1640625000000005e-09, 9.390625000000007e-10, 3.1953125e-10, 2.769531250000001e-10, 2.703125e-10, 2.6015625000000005e-10, 2.414062500000001e-10, 2.0117187499999994e-10, 6.575065559440557e-11], "human_label": true, "framework_note": ""}, "O(n**2)": {"problem_name": "1003_A. Polycarp's Pockets", "problem_id": "976", "solution_id": "976_656", "description": "Polycarp has n coins, the value of the i-th coin is a_i. Polycarp wants to distribute all the coins between his pockets, but he cannot put two coins with the same value into the same pocket.\n\nFor example, if Polycarp has got six coins represented as an array a = [1, 2, 4, 3, 3, 2], he can distribute the coins into two pockets as follows: [1, 2, 3], [2, 3, 4].\n\nPolycarp wants to distribute all the coins with the minimum number of used pockets. Help him to do that.\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of coins.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 100) \u2014 values of coins.\n\nOutput\n\nPrint only one integer \u2014 the minimum number of pockets Polycarp needs to distribute all the coins so no two coins with the same value are put into the same pocket.\n\nExamples\n\nInput\n\n6\n1 2 4 3 3 2\n\n\nOutput\n\n2\n\n\nInput\n\n1\n100\n\n\nOutput\n\n1", "solution_code": "charNum = int(input())\nnumArray = input().split()\n\nb = 0\nfor x in numArray:\n    if numArray.count(x) > b:\n        b = numArray.count(x)\nprint(b)\n", "dataclass_code": "import sys\nimport time\nimport itertools\nfrom itertools import accumulate, product, permutations, combinations\nimport collections\nfrom collections import Counter, OrderedDict, deque, defaultdict, ChainMap\nfrom functools import lru_cache\nimport math\nfrom math import sqrt, sin, cos, tan, ceil, fabs, floor, gcd, exp, log, log2\nimport fractions\nfrom typing import List, Tuple\nimport numpy as np\nimport random\nimport heapq\nfrom heapq import *\nfrom dataclasses import dataclass\n\nimport builtins\nimport re\n\ndef strip(s, characters = None):\n    if characters is None:\n        characters = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n    else:\n        characters = list(characters)\n\n    characters = [x for x in characters if len(x) > 0] \n\n    i = 0\n    while i < len(s):\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[i:i + len(sep_candidate)] == sep_candidate:\n                found_sep_candidate = True\n                i += len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    j = len(s) - 1\n    while j >= 0:\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[j + 1 - len(sep_candidate):j+1] == sep_candidate:\n                found_sep_candidate = True\n                j -= len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    return s[i:j+1]\n\ndef split(s, sep=None, maxsplit=-1):\n    if sep == '':\n        raise builtins.ValueError('empty separator')\n\n    if type(sep) == list and '' in sep:\n        raise builtins.ValueError('empty separator')\n\n    if sep is None:\n        sep = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n        result = []\n        word = ''\n        count_split = 0\n        \n        if maxsplit == -1:\n            maxsplit = len(s) * 1000\n\n        i = 0\n        while i < len(s):\n            found_sep_candidate = False\n\n            for sep_candidate in sep:\n                if s[i:i + len(sep_candidate)] == sep_candidate:\n                    found_sep_candidate = True\n\n                    if word:\n                        result.append(word)\n                        count_split += 1\n                        word = ''\n\n                    i += len(sep_candidate)\n                    break\n\n            if not found_sep_candidate and count_split < maxsplit:\n                word += s[i]\n                i += 1\n\n            elif not found_sep_candidate and count_split >= maxsplit:\n                word += s[i:]\n                i = len(s)\n\n        if word:\n            result.append(word)\n        return result\n    \n    if type(sep) == str:\n        sep = [sep]\n\n    if maxsplit == -1:\n        maxsplit = 0\n    elif maxsplit == 0:\n        maxsplit = -1\n\n    return re.split(re.compile(\"|\".join([re.escape(x) for x in sep])), s, maxsplit=maxsplit)\n\nclass str_escaped(str):\n    def split(self, sep=None, maxsplit=-1):\n        return split(self, sep=sep, maxsplit=maxsplit)\n    \n    def strip(self, chars=None):\n        return strip(self, characters = chars)\n\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Input:\n    n: int\n    a_list: List[str]\n\n    @classmethod\n    def from_str(cls, input_: str):\n        n, a_list, _ = input_.split('\\n')\n        n = int(n)\n        a_list = a_list.split(' ')\n        assert n == len(a_list)\n        return cls(n, a_list)\n\n    def __repr__(self):\n        return str(self.n) + '\\n' + ' '.join(self.a_list) + '\\n'\n", "inputs_example": "6\n1 2 4 3 3 2\n", "time_complexity_inferred": "O(n**2)", "time_curve_coefficient": 2.2538588761308294e-07, "tests": {"public_tests": [{"input": "6\n1 2 4 3 3 2\n", "output": "2\n"}, {"input": "1\n100\n", "output": "1\n"}], "private_tests": [{"input": "3\n58 59 58\n", "output": "2\n"}, {"input": "3\n1 1 1\n", "output": "3\n"}, {"input": "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "100\n"}, {"input": "15\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "15\n"}, {"input": "50\n7 7 3 3 7 4 5 6 4 3 7 5 6 4 5 4 4 5 6 7 7 7 4 5 5 5 3 7 6 3 4 6 3 6 4 4 5 4 6 6 3 5 6 3 5 3 3 7 7 6\n", "output": "10\n"}, {"input": "100\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 99 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n", "output": "99\n"}, {"input": "97\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "97\n"}, {"input": "5\n1 2 3 4 5\n", "output": "1\n"}, {"input": "99\n97 44 33 56 42 10 61 85 64 26 40 39 82 34 75 9 51 51 39 73 58 38 74 31 13 99 58 1 28 89 76 19 52 7 40 56 12 27 72 72 67 75 62 46 22 55 35 16 18 39 60 63 92 42 85 69 34 61 73 50 57 95 30 4 45 63 76 58 32 35 48 81 10 78 95 79 55 97 21 21 22 94 30 17 78 57 89 93 100 44 16 89 68 55 19 46 42 73 21\n", "output": "3\n"}, {"input": "10\n1 2 2 3 3 3 4 4 4 4\n", "output": "4\n"}, {"input": "9\n1 2 3 4 5 6 7 8 9\n", "output": "1\n"}, {"input": "7\n1 2 3 3 3 1 2\n", "output": "3\n"}, {"input": "100\n45 29 5 2 6 50 22 36 14 15 9 48 46 20 8 37 7 47 12 50 21 38 18 27 33 19 40 10 5 49 38 42 34 37 27 30 35 24 10 3 40 49 41 3 4 44 13 25 28 31 46 36 23 1 1 23 7 22 35 26 21 16 48 42 32 8 11 16 34 11 39 32 47 28 43 41 39 4 14 19 26 45 13 18 15 25 2 44 17 29 17 33 43 6 12 30 9 20 31 24\n", "output": "2\n"}, {"input": "13\n1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "13\n"}, {"input": "6\n2 3 2 5 2 6\n", "output": "3\n"}, {"input": "9\n1 2 3 4 5 6 7 8 8\n", "output": "2\n"}, {"input": "10\n1 1 1 1 2 2 1 1 9 10\n", "output": "6\n"}, {"input": "3\n1 2 3\n", "output": "1\n"}, {"input": "16\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "16\n"}, {"input": "14\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "14\n"}, {"input": "5\n5 5 5 5 1\n", "output": "4\n"}, {"input": "10\n1 2 3 4 5 6 7 8 9 10\n", "output": "1\n"}, {"input": "3\n95 95 4\n", "output": "2\n"}, {"input": "3\n2 2 5\n", "output": "2\n"}, {"input": "100\n59 47 39 47 47 71 47 28 58 47 35 79 58 47 38 47 47 47 47 27 47 43 29 95 47 49 46 71 47 74 79 47 47 32 45 67 47 47 30 37 47 47 16 67 22 76 47 86 84 10 5 47 47 47 47 47 1 51 47 54 47 8 47 47 9 47 47 47 47 28 47 47 26 47 47 47 47 47 47 92 47 47 77 47 47 24 45 47 10 47 47 89 47 27 47 89 47 67 24 71\n", "output": "51\n"}, {"input": "100\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n", "output": "100\n"}, {"input": "12\n1 2 1 1 1 1 1 1 1 1 1 1\n", "output": "11\n"}, {"input": "100\n45 99 10 27 16 85 39 38 17 32 15 23 67 48 50 97 42 70 62 30 44 81 64 73 34 22 46 5 83 52 58 60 33 74 47 88 18 61 78 53 25 95 94 31 3 75 1 57 20 54 59 9 68 7 77 43 21 87 86 24 4 80 11 49 2 72 36 84 71 8 65 55 79 100 41 14 35 89 66 69 93 37 56 82 90 91 51 19 26 92 6 96 13 98 12 28 76 40 63 29\n", "output": "1\n"}, {"input": "8\n1 2 3 4 5 6 7 8\n", "output": "1\n"}, {"input": "2\n1 1\n", "output": "2\n"}, {"input": "7\n1 2 3 4 5 6 7\n", "output": "1\n"}, {"input": "56\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "56\n"}, {"input": "3\n2 1 1\n", "output": "2\n"}, {"input": "99\n35 96 73 72 70 83 22 93 98 75 45 32 81 82 45 54 25 7 53 72 29 2 94 19 21 98 34 28 39 99 55 85 44 23 6 47 98 2 33 34 19 57 49 35 67 4 60 4 4 23 55 6 57 66 16 68 34 45 84 79 48 63 4 9 46 88 98 13 19 27 83 12 4 63 57 22 44 77 44 62 28 52 44 64 9 24 55 22 48 4 2 9 80 76 45 1 56 22 92\n", "output": "6\n"}, {"input": "11\n1 2 3 4 5 6 7 8 9 1 1\n", "output": "3\n"}], "generated_tests": [{"input": "3\n87 59 58\n", "output": "1\n"}, {"input": "100\n1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "99\n"}, {"input": "15\n1 1 1 1 1 1 1 1 1 1 1 1 0 1 1\n", "output": "14\n"}, {"input": "50\n7 6 3 3 7 4 5 6 4 3 7 5 6 4 5 4 4 5 6 7 7 7 4 5 5 5 3 7 6 3 4 6 3 6 4 4 5 4 6 6 3 5 6 3 5 3 3 7 7 6\n", "output": "11\n"}, {"input": "97\n1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "96\n"}, {"input": "5\n1 2 4 4 5\n", "output": "2\n"}, {"input": "99\n97 44 33 56 42 10 61 85 64 26 40 39 82 34 75 9 51 51 39 73 58 38 74 31 13 99 58 1 28 89 76 19 52 7 40 56 12 27 72 72 67 75 62 46 22 55 35 16 18 39 60 63 92 42 85 69 34 61 73 50 57 95 51 4 45 63 76 58 32 35 48 81 10 78 95 79 55 97 21 21 22 94 30 17 78 57 89 93 100 44 16 89 68 55 19 46 42 73 21\n", "output": "3\n"}, {"input": "13\n1 1 1 1 1 1 1 1 1 1 1 1 0\n", "output": "12\n"}, {"input": "10\n1 1 2 1 2 2 1 1 9 10\n", "output": "5\n"}, {"input": "16\n1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1\n", "output": "15\n"}, {"input": "14\n1 1 1 1 1 1 1 0 1 1 1 1 1 1\n", "output": "13\n"}, {"input": "12\n1 2 1 0 1 1 1 1 1 1 1 1\n", "output": "10\n"}, {"input": "56\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "55\n"}, {"input": "99\n35 96 73 72 70 83 22 93 98 75 45 32 81 82 45 54 25 7 53 72 29 2 94 19 21 98 34 28 39 99 55 85 44 23 6 47 98 2 33 34 19 57 49 35 67 4 60 4 4 23 55 6 57 66 16 68 34 39 84 79 48 63 4 9 46 88 98 13 19 27 83 12 4 63 57 22 44 77 44 62 28 52 44 64 9 24 55 22 48 4 2 9 80 76 45 1 56 22 92\n", "output": "6\n"}, {"input": "100\n1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "98\n"}, {"input": "97\n1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "95\n"}, {"input": "12\n1 2 1 0 1 1 1 1 0 1 1 1\n", "output": "9\n"}, {"input": "56\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "54\n"}, {"input": "100\n1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "97\n"}, {"input": "97\n1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "94\n"}, {"input": "10\n1 1 2 0 2 4 1 1 9 10\n", "output": "4\n"}, {"input": "12\n1 2 1 0 1 1 1 1 0 1 1 0\n", "output": "8\n"}, {"input": "56\n1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "53\n"}, {"input": "97\n1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "93\n"}, {"input": "10\n1 2 2 3 3 3 4 7 4 4\n", "output": "3\n"}, {"input": "9\n1 2 3 4 5 1 7 8 9\n", "output": "2\n"}, {"input": "7\n1 2 3 2 3 1 2\n", "output": "3\n"}, {"input": "100\n45 29 5 2 6 50 22 36 14 15 9 48 46 20 8 37 7 47 12 50 21 38 18 27 33 19 40 10 5 49 38 42 34 37 27 30 35 24 10 3 40 49 41 3 4 44 13 25 28 31 46 36 23 1 1 23 7 22 35 26 21 16 48 42 32 8 11 16 34 11 39 32 47 28 43 41 68 4 14 19 26 45 13 18 15 25 2 44 17 29 17 33 43 6 12 30 9 20 31 24\n", "output": "2\n"}, {"input": "6\n3 3 2 5 2 6\n", "output": "2\n"}, {"input": "9\n1 2 3 4 5 10 7 8 8\n", "output": "2\n"}, {"input": "3\n1 2 2\n", "output": "2\n"}, {"input": "5\n5 5 3 5 1\n", "output": "3\n"}, {"input": "10\n1 2 5 4 5 6 7 8 9 10\n", "output": "2\n"}, {"input": "3\n2 4 5\n", "output": "1\n"}, {"input": "100\n45 99 10 27 16 85 39 38 17 32 15 23 67 48 50 97 42 70 62 30 64 81 64 73 34 22 46 5 83 52 58 60 33 74 47 88 18 61 78 53 25 95 94 31 3 75 1 57 20 54 59 9 68 7 77 43 21 87 86 24 4 80 11 49 2 72 36 84 71 8 65 55 79 100 41 14 35 89 66 69 93 37 56 82 90 91 51 19 26 92 6 96 13 98 12 28 76 40 63 29\n", "output": "2\n"}, {"input": "8\n1 2 3 4 5 6 7 11\n", "output": "1\n"}, {"input": "2\n1 2\n", "output": "1\n"}, {"input": "7\n1 4 3 4 5 6 7\n", "output": "2\n"}, {"input": "11\n1 2 3 4 5 6 7 8 18 1 1\n", "output": "3\n"}, {"input": "6\n1 2 4 3 3 3\n", "output": "3\n"}, {"input": "3\n87 84 58\n", "output": "1\n"}, {"input": "15\n1 1 1 1 1 1 1 1 1 0 1 1 0 1 1\n", "output": "13\n"}, {"input": "50\n7 6 3 3 7 4 5 6 4 3 7 5 6 4 5 4 4 5 6 7 7 7 4 5 5 5 3 7 6 3 4 6 3 6 4 4 5 4 6 6 3 5 6 3 5 3 3 7 7 3\n", "output": "11\n"}, {"input": "5\n1 2 4 7 5\n", "output": "1\n"}, {"input": "10\n0 2 2 3 3 3 4 7 4 4\n", "output": "3\n"}, {"input": "9\n1 2 3 4 5 1 7 2 9\n", "output": "2\n"}, {"input": "7\n1 2 3 1 3 1 2\n", "output": "3\n"}, {"input": "100\n45 29 5 2 6 50 22 36 14 15 9 48 46 20 8 37 7 47 12 50 21 38 18 27 33 19 40 10 5 49 38 42 34 37 27 30 35 24 10 3 40 49 41 3 4 44 13 25 28 31 46 69 23 1 1 23 7 22 35 26 21 16 48 42 32 8 11 16 34 11 39 32 47 28 43 41 68 4 14 19 26 45 13 18 15 25 2 44 17 29 17 33 43 6 12 30 9 20 31 24\n", "output": "2\n"}, {"input": "13\n2 1 1 1 1 1 1 1 1 1 1 1 0\n", "output": "11\n"}, {"input": "6\n3 3 2 8 2 6\n", "output": "2\n"}, {"input": "9\n1 3 3 4 5 10 7 8 8\n", "output": "2\n"}, {"input": "10\n1 1 2 1 2 4 1 1 9 10\n", "output": "5\n"}, {"input": "3\n2 2 3\n", "output": "2\n"}, {"input": "16\n1 1 1 1 1 1 1 1 1 0 2 1 1 1 1 1\n", "output": "14\n"}, {"input": "14\n1 1 1 1 1 1 1 0 1 1 1 1 0 1\n", "output": "12\n"}, {"input": "5\n5 5 3 5 0\n", "output": "3\n"}, {"input": "10\n1 2 5 4 5 6 12 8 9 10\n", "output": "2\n"}, {"input": "3\n2 4 4\n", "output": "2\n"}, {"input": "100\n45 99 10 27 16 85 39 38 17 32 15 23 67 48 50 97 42 70 62 30 64 81 64 73 34 22 46 5 83 52 58 60 33 74 47 88 18 61 78 53 25 95 94 31 3 75 1 57 20 54 59 9 68 7 77 43 21 87 86 24 4 80 11 49 2 72 36 84 71 8 65 55 79 100 41 14 12 89 66 69 93 37 56 82 90 91 51 19 26 92 6 96 13 98 12 28 76 40 63 29\n", "output": "2\n"}, {"input": "8\n1 2 5 4 5 6 7 11\n", "output": "2\n"}, {"input": "7\n1 6 3 4 5 6 7\n", "output": "2\n"}, {"input": "99\n35 96 73 72 70 83 22 93 98 75 45 32 81 82 45 54 6 7 53 72 29 2 94 19 21 98 34 28 39 99 55 85 44 23 6 47 98 2 33 34 19 57 49 35 67 4 60 4 4 23 55 6 57 66 16 68 34 39 84 79 48 63 4 9 46 88 98 13 19 27 83 12 4 63 57 22 44 77 44 62 28 52 44 64 9 24 55 22 48 4 2 9 80 76 45 1 56 22 92\n", "output": "6\n"}, {"input": "11\n1 2 4 4 5 6 7 8 18 1 1\n", "output": "3\n"}, {"input": "15\n1 0 1 1 1 1 1 1 1 0 1 1 0 1 1\n", "output": "12\n"}, {"input": "50\n7 6 3 3 7 4 5 6 4 3 7 5 6 4 5 4 4 5 6 7 7 7 4 5 5 5 3 7 6 3 4 6 3 6 4 4 5 4 6 6 3 5 6 3 1 3 3 7 7 3\n", "output": "11\n"}, {"input": "5\n1 2 4 12 5\n", "output": "1\n"}, {"input": "10\n0 2 2 3 6 3 4 7 4 4\n", "output": "3\n"}, {"input": "9\n1 2 3 4 5 1 7 2 10\n", "output": "2\n"}, {"input": "7\n1 2 0 1 3 1 2\n", "output": "3\n"}, {"input": "100\n45 29 5 2 6 50 22 36 14 15 9 48 46 20 8 37 7 47 12 50 21 38 18 27 33 19 40 10 5 49 38 42 34 37 27 30 35 24 10 3 40 49 41 3 4 44 13 25 28 31 46 69 23 1 1 23 7 22 35 26 21 16 48 42 32 8 11 16 34 11 39 32 47 28 43 41 68 4 14 19 26 14 13 18 15 25 2 44 17 29 17 33 43 6 12 30 9 20 31 24\n", "output": "3\n"}, {"input": "13\n2 1 1 1 1 1 1 1 1 1 2 1 0\n", "output": "10\n"}, {"input": "6\n3 3 2 15 2 6\n", "output": "2\n"}, {"input": "9\n1 3 3 6 5 10 7 8 8\n", "output": "2\n"}, {"input": "16\n1 1 1 1 1 1 2 1 1 0 2 1 1 1 1 1\n", "output": "13\n"}, {"input": "14\n1 1 1 1 1 1 1 0 1 1 1 1 0 0\n", "output": "11\n"}, {"input": "10\n1 2 9 4 5 6 12 8 9 10\n", "output": "2\n"}, {"input": "3\n1 4 4\n", "output": "2\n"}, {"input": "100\n45 99 10 27 16 85 39 38 17 32 15 23 67 48 50 97 42 70 62 30 64 81 64 73 34 22 46 5 83 52 58 60 33 74 47 88 18 61 78 53 25 95 94 31 3 75 1 57 20 54 59 9 68 7 77 14 21 87 86 24 4 80 11 49 2 72 36 84 71 8 65 55 79 100 41 14 12 89 66 69 93 37 56 82 90 91 51 19 26 92 6 96 13 98 12 28 76 40 63 29\n", "output": "2\n"}, {"input": "8\n1 2 5 4 5 6 11 11\n", "output": "2\n"}, {"input": "7\n1 6 3 4 1 6 7\n", "output": "2\n"}, {"input": "99\n35 96 73 72 70 83 22 93 98 75 45 32 81 82 45 54 6 7 53 72 29 2 94 19 21 98 34 28 39 99 55 85 44 23 6 47 98 2 33 34 19 57 49 35 67 4 60 4 4 23 55 6 57 66 16 68 34 39 84 79 48 63 4 9 46 88 98 9 19 27 83 12 4 63 57 22 44 77 44 62 28 52 44 64 9 24 55 22 48 4 2 9 80 76 45 1 56 22 92\n", "output": "6\n"}, {"input": "11\n1 2 4 4 5 10 7 8 18 1 1\n", "output": "3\n"}, {"input": "100\n1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "96\n"}, {"input": "15\n1 0 1 1 1 0 1 1 1 0 1 1 0 1 1\n", "output": "11\n"}, {"input": "50\n7 6 3 3 7 4 5 6 4 3 7 5 6 4 5 4 4 5 6 7 7 7 4 5 5 5 3 7 6 3 4 6 3 6 4 4 5 4 6 6 3 5 6 3 1 3 3 7 7 4\n", "output": "11\n"}, {"input": "5\n1 2 4 18 5\n", "output": "1\n"}, {"input": "9\n1 2 6 4 5 1 7 2 10\n", "output": "2\n"}, {"input": "7\n1 2 1 1 3 1 2\n", "output": "4\n"}, {"input": "100\n45 29 5 2 6 50 22 36 14 15 9 48 46 20 8 37 0 47 12 50 21 38 18 27 33 19 40 10 5 49 38 42 34 37 27 30 35 24 10 3 40 49 41 3 4 44 13 25 28 31 46 69 23 1 1 23 7 22 35 26 21 16 48 42 32 8 11 16 34 11 39 32 47 28 43 41 68 4 14 19 26 14 13 18 15 25 2 44 17 29 17 33 43 6 12 30 9 20 31 24\n", "output": "3\n"}, {"input": "13\n2 1 1 1 2 1 1 1 1 1 2 1 0\n", "output": "9\n"}, {"input": "6\n3 3 3 15 2 6\n", "output": "3\n"}, {"input": "9\n1 3 3 6 5 20 7 8 8\n", "output": "2\n"}, {"input": "16\n1 1 1 1 1 1 2 1 1 1 2 1 1 1 1 1\n", "output": "14\n"}, {"input": "14\n1 1 1 1 1 1 1 1 1 1 1 1 0 0\n", "output": "12\n"}, {"input": "10\n1 2 9 8 5 6 12 8 9 10\n", "output": "2\n"}]}, "problem_time_curve_coefficient_list": [0.0025284463080886437, 0.00043999209522772436, 0.000362288134752467, 0.00028794203254779287, 0.0002667706476032335, 0.00026583023636719437, 0.00023670290946476002, 0.00023486622738849285, 0.00023205206044220106, 0.00023137141640167027, 0.0002150671764545065, 0.00013742742366233175, 0.0001373721352129132, 0.0001370642469459465, 0.00013692196004477843, 0.00013684362902135032, 0.00013678045706482794, 0.00013673974579051426, 0.00013665328793141654, 0.00013659322575103097, 0.00013658452446264487, 0.00013652405352975204, 0.0001364896679146678, 0.00013644799515380343, 0.0001364371237449243, 0.00013641962323411678, 0.00013631769774007235, 0.00013627514979466977, 0.00013621854776410192, 0.00013614185620264236, 0.00013523970462949906, 0.0001346925414933998, 0.00013401872442005358, 0.00013371123604200423, 0.00013370542333138603, 0.00013366230088722233, 0.00013347773928958903, 0.00013338663705613702, 0.00013332307056050695, 0.00013327998441389514, 0.0001332222278316724, 0.0001332188430166135, 0.00013317998638805834, 0.00013316912211897356, 0.00013310813641870676, 0.00013301975143385834, 0.00013292097607406277, 0.0001328849355663057, 0.00013274902176759552, 1.2811598859426214e-05, 9.47261635804409e-06, 7.71314012390335e-06, 7.574892643410954e-06, 7.542936075284048e-06, 7.501577830564434e-06, 7.393333789115395e-06, 7.343256536402418e-06, 7.174270336313356e-06, 7.043525282809784e-06, 7.030351295867301e-06, 7.01010793619946e-06, 6.991571497237739e-06, 6.818839927696858e-06, 6.715381728968927e-06, 6.647907525081812e-06, 6.194286516072279e-06, 5.99466378752044e-06, 4.51290865820904e-06, 4.449934075597378e-06, 4.4495084594775375e-06, 4.440851606559633e-06, 4.417362306979279e-06, 3.97459950836154e-06, 3.736731742759517e-06, 3.7216677994874214e-06, 3.7216305429138534e-06, 3.716031865265967e-06, 3.715216233559436e-06, 3.7111094188745526e-06, 3.71062635999995e-06, 3.7075245453640777e-06, 3.6939893059377457e-06, 3.596400848408983e-06, 3.55429816509044e-06, 3.1105767259321785e-06, 2.820989580158546e-06, 2.441222225434715e-06, 2.394567538323149e-06, 2.35876618004632e-06, 2.055815030801917e-06, 1.9758009601491255e-06, 1.9191378275450493e-06, 1.9140109015036414e-06, 1.907671899727806e-06, 1.90230552522705e-06, 1.8989331944077342e-06, 1.4535527163769633e-06, 1.2371067799388112e-06, 8.460260919727204e-07, 8.400383265358927e-07, 7.964358496297561e-07, 7.548190454826709e-07, 7.168733445397298e-07, 7.146934948970653e-07, 6.451139085666636e-07, 6.09581115778744e-07, 5.447219192015759e-07, 4.5724241458490447e-07, 3.7353895157297226e-07, 3.7339478473021993e-07, 3.348154201397547e-07, 2.8983503730963274e-07, 2.887354148306747e-07, 2.8836882766431403e-07, 2.741331859011712e-07, 2.6659139234223485e-07, 2.6529022732030757e-07, 2.440387329404635e-07, 2.433106930329234e-07, 2.430367534304854e-07, 2.4238727625070016e-07, 2.409971019207241e-07, 2.406929615784259e-07, 2.4030241950567395e-07, 2.3992884445167036e-07, 2.397929162896586e-07, 2.3952424089632274e-07, 2.3864484718722073e-07, 2.386402840934328e-07, 2.367389626234743e-07, 2.3656751484157677e-07, 2.3601463326258652e-07, 2.358102689507825e-07, 2.3445184892563508e-07, 2.3371040946718321e-07, 2.3288667374091983e-07, 2.328046361518954e-07, 2.3217971515058658e-07, 2.311635397193043e-07, 2.3073334634929248e-07, 2.3069393824099744e-07, 2.3065428989529637e-07, 2.3059547823103847e-07, 2.3054486032415178e-07, 2.304139331298923e-07, 2.3027619488771687e-07, 2.300190149707382e-07, 2.2965902689172192e-07, 2.2912370274569555e-07, 2.2901014424769666e-07, 2.283172918175268e-07, 2.281843790134577e-07, 2.281692147325778e-07, 2.2810289621431295e-07, 2.2751878751057903e-07, 2.2716728299233383e-07, 2.267153658489114e-07, 2.2637392489266637e-07, 2.2617813657410852e-07, 2.2617080836672663e-07, 2.261387991116362e-07, 2.2601025644028696e-07, 2.2599739832234627e-07, 2.2540737020275168e-07, 2.2538588761308294e-07, 2.1332333709851627e-07, 2.1163447380281367e-07, 2.0913307060776315e-07, 2.081069608434915e-07, 2.077184060305603e-07, 2.0712419199274255e-07, 2.0625970158497074e-07, 1.990915169957012e-07, 1.8985684196286559e-07, 1.782212306593499e-07, 1.4910343302250473e-07, 1.4245215801821867e-07, 1.4152167445929999e-07, 1.4149550728185699e-07, 1.413954380473059e-07, 1.4136438574200752e-07, 1.4001995750739352e-07, 1.3974777575916479e-07, 1.3917080809347441e-07, 1.390677135176705e-07, 1.3892038957251765e-07, 1.3719733652081172e-07, 1.3574273409329437e-07, 1.3570608852684122e-07, 1.3560267266549333e-07, 1.3559272493725802e-07, 1.355235731314693e-07, 1.3482921438456014e-07, 1.3465271219019614e-07, 1.3465138393586782e-07, 1.3464190589270432e-07, 1.3455821997331688e-07, 1.3454074802203538e-07, 1.3434114302332746e-07, 1.3433988502288003e-07, 1.3432195899048492e-07, 1.3412286760160492e-07, 1.3402661327228918e-07, 1.3401361585649714e-07, 1.3397032197772497e-07, 1.3397007635673733e-07, 1.3394835729734237e-07, 1.339454206807228e-07, 1.3392845908039725e-07, 1.3385326668180492e-07, 1.3385041422041189e-07, 1.338456363817503e-07, 1.3382444691567938e-07, 1.3381708456757174e-07, 1.3381529873738179e-07, 1.3380215111202163e-07, 1.3379026200076766e-07, 1.3378453832011442e-07, 1.3378414330770342e-07, 1.337769335317898e-07, 1.3375322747875985e-07, 1.3374903290885013e-07, 1.3372274569291693e-07, 1.3365898818522663e-07, 1.3362613178339952e-07, 1.3356072310415367e-07, 1.335356819275372e-07, 1.3353077399255911e-07, 1.334691194581239e-07, 1.3338705514376184e-07, 1.333176563696595e-07, 1.3328378138760894e-07, 1.3324112496072186e-07, 1.3322927615553423e-07, 1.3313947770062814e-07, 1.3313806107338465e-07, 1.3304677530417175e-07, 1.330445235483932e-07, 1.3291752667213758e-07, 1.3291166579279607e-07, 1.3289453851347285e-07, 1.3288092645202827e-07, 1.3283489773701084e-07, 1.3282269442679097e-07, 1.3282058059246e-07, 1.3281985876409655e-07, 1.3281353860049771e-07, 1.3280945571982114e-07, 1.328079345628543e-07, 1.3279975202804912e-07, 1.327666747722363e-07, 1.3276638038799074e-07, 1.3274494343523146e-07, 1.3273829959538407e-07, 1.3271724779096223e-07, 1.3271473169115425e-07, 1.3270950097146051e-07, 1.3269546433512983e-07, 1.3268124065686285e-07, 1.3267763847607034e-07, 1.3265320909423555e-07, 1.3263757485713574e-07, 1.326264024068697e-07, 1.3262375020934324e-07, 1.3261499098278077e-07, 1.326066586008988e-07, 1.3244809259108655e-07, 1.3242809420473914e-07, 1.3240719616697865e-07, 1.3238743182522898e-07, 1.3235935565551863e-07, 1.3235420426923008e-07, 1.323001595152212e-07, 1.3227890721045963e-07, 1.3222950176906013e-07, 1.3221668251600062e-07, 1.3218956690067987e-07, 1.3218798811211042e-07, 1.3217383966008245e-07, 1.3217184112733823e-07, 1.3214345504012853e-07, 1.3213058033159746e-07, 1.320619180105758e-07, 1.3201805255622646e-07, 1.3199052015426806e-07, 1.3198313730847798e-07, 1.319377324647054e-07, 1.318642232653837e-07, 1.3185582905808439e-07, 1.318464234771445e-07, 1.318128241113565e-07, 1.3178684010710434e-07, 1.3175172782789907e-07, 1.3174601525268827e-07, 1.3174568181095128e-07, 1.317148970013411e-07, 1.3169615391584878e-07, 1.3167405541543772e-07, 1.3162023237108358e-07, 1.315408823583688e-07, 1.315374049478276e-07, 1.3152550954880022e-07, 1.315237142128837e-07, 1.3152195419295532e-07, 1.315010922386763e-07, 1.3148014101399854e-07, 1.314709326786013e-07, 1.3146494032971773e-07, 1.3144022938235377e-07, 1.314112857263881e-07, 1.3141070999370304e-07, 1.3139252523168907e-07, 1.3136339034305874e-07, 1.3135682426355557e-07, 1.312633068152929e-07, 1.3125339873503008e-07, 1.3121117707540677e-07, 1.312034771405373e-07, 1.311964043159358e-07, 1.3118572632554918e-07, 1.311672283265682e-07, 1.3116707618321512e-07, 1.311562400085586e-07, 1.3113942923347305e-07, 1.311024220895376e-07, 1.3106283854196777e-07, 1.3104668619168434e-07, 1.3103393343056146e-07, 1.3102384211391577e-07, 1.3101854247930672e-07, 1.3101734783163109e-07, 1.3087975887733252e-07, 1.30485822517938e-07, 1.302418594330003e-07, 1.3022769023566964e-07, 1.3020450700074005e-07, 1.3000570096615763e-07, 1.1817680854274829e-07, 1.1802721649439417e-07, 1.1794107829230524e-07, 1.1336643908152109e-07, 1.0647208225580777e-07, 1.0130807813795149e-07, 9.426147235907008e-08, 9.392212433152511e-08, 6.871314938081495e-08, 6.234761119394249e-08, 3.117717226362142e-08, 3.100137548796778e-08, 5.22497460827565e-09, 5.14266315130109e-09, 3.398437500000002e-09, 1.0549583739406058e-11, 8.881787318137832e-12, 1.472266226361686e-12, 1.4494146169910812e-12, 7.798536776305298e-13, 6.34977520393082e-13, 3.494371939267126e-13], "human_label": true, "framework_note": ""}}, "1004_C. Sonya and Robots": {"O(n)": {"problem_name": "1004_C. Sonya and Robots", "problem_id": "1039", "solution_id": "1039_146", "description": "Since Sonya is interested in robotics too, she decided to construct robots that will read and recognize numbers.\n\nSonya has drawn n numbers in a row, a_i is located in the i-th position. She also has put a robot at each end of the row (to the left of the first number and to the right of the last number). Sonya will give a number to each robot (they can be either same or different) and run them. When a robot is running, it is moving toward to another robot, reading numbers in the row. When a robot is reading a number that is equal to the number that was given to that robot, it will turn off and stay in the same position.\n\nSonya does not want robots to break, so she will give such numbers that robots will stop before they meet. That is, the girl wants them to stop at different positions so that the first robot is to the left of the second one.\n\nFor example, if the numbers [1, 5, 4, 1, 3] are written, and Sonya gives the number 1 to the first robot and the number 4 to the second one, the first robot will stop in the 1-st position while the second one in the 3-rd position. In that case, robots will not meet each other. As a result, robots will not be broken. But if Sonya gives the number 4 to the first robot and the number 5 to the second one, they will meet since the first robot will stop in the 3-rd position while the second one is in the 2-nd position.\n\nSonya understands that it does not make sense to give a number that is not written in the row because a robot will not find this number and will meet the other robot.\n\nSonya is now interested in finding the number of different pairs that she can give to robots so that they will not meet. In other words, she wants to know the number of pairs (p, q), where she will give p to the first robot and q to the second one. Pairs (p_i, q_i) and (p_j, q_j) are different if p_i\u2260 p_j or q_i\u2260 q_j.\n\nUnfortunately, Sonya is busy fixing robots that broke after a failed launch. That is why she is asking you to find the number of pairs that she can give to robots so that they will not meet.\n\nInput\n\nThe first line contains a single integer n (1\u2264 n\u2264 10^5) \u2014 the number of numbers in a row.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1\u2264 a_i\u2264 10^5) \u2014 the numbers in a row.\n\nOutput\n\nPrint one number \u2014 the number of possible pairs that Sonya can give to robots so that they will not meet.\n\nExamples\n\nInput\n\n5\n1 5 4 1 3\n\n\nOutput\n\n9\n\n\nInput\n\n7\n1 2 1 1 1 3 2\n\n\nOutput\n\n7\n\nNote\n\nIn the first example, Sonya can give pairs (1, 1), (1, 3), (1, 4), (1, 5), (4, 1), (4, 3), (5, 1), (5, 3), and (5, 4).\n\nIn the second example, Sonya can give pairs (1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), and (3, 2).", "solution_code": "n=int(input())\nnums = list(map(int, input().split()))\nleft = {}\nfrom collections import Counter\nleft=Counter(nums)\ncount = 0\ndone = set()\nfor i in nums:\n    left[i] -= 1\n    if left[i] == 0:\n        del left[i]\n    if i not in done:\n        count += len(left.keys())\n        done.add(i)\n\nprint(count)\n\t", "dataclass_code": "import sys\nimport time\nimport itertools\nfrom itertools import accumulate, product, permutations, combinations\nimport collections\nfrom collections import Counter, OrderedDict, deque, defaultdict, ChainMap\nfrom functools import lru_cache\nimport math\nfrom math import sqrt, sin, cos, tan, ceil, fabs, floor, gcd, exp, log, log2\nimport fractions\nfrom typing import List, Tuple\nimport numpy as np\nimport random\nimport heapq\nfrom heapq import *\nfrom dataclasses import dataclass\n\nimport builtins\nimport re\n\ndef strip(s, characters = None):\n    if characters is None:\n        characters = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n    else:\n        characters = list(characters)\n\n    characters = [x for x in characters if len(x) > 0] \n\n    i = 0\n    while i < len(s):\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[i:i + len(sep_candidate)] == sep_candidate:\n                found_sep_candidate = True\n                i += len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    j = len(s) - 1\n    while j >= 0:\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[j + 1 - len(sep_candidate):j+1] == sep_candidate:\n                found_sep_candidate = True\n                j -= len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    return s[i:j+1]\n\ndef split(s, sep=None, maxsplit=-1):\n    if sep == '':\n        raise builtins.ValueError('empty separator')\n\n    if type(sep) == list and '' in sep:\n        raise builtins.ValueError('empty separator')\n\n    if sep is None:\n        sep = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n        result = []\n        word = ''\n        count_split = 0\n        \n        if maxsplit == -1:\n            maxsplit = len(s) * 1000\n\n        i = 0\n        while i < len(s):\n            found_sep_candidate = False\n\n            for sep_candidate in sep:\n                if s[i:i + len(sep_candidate)] == sep_candidate:\n                    found_sep_candidate = True\n\n                    if word:\n                        result.append(word)\n                        count_split += 1\n                        word = ''\n\n                    i += len(sep_candidate)\n                    break\n\n            if not found_sep_candidate and count_split < maxsplit:\n                word += s[i]\n                i += 1\n\n            elif not found_sep_candidate and count_split >= maxsplit:\n                word += s[i:]\n                i = len(s)\n\n        if word:\n            result.append(word)\n        return result\n    \n    if type(sep) == str:\n        sep = [sep]\n\n    if maxsplit == -1:\n        maxsplit = 0\n    elif maxsplit == 0:\n        maxsplit = -1\n\n    return re.split(re.compile(\"|\".join([re.escape(x) for x in sep])), s, maxsplit=maxsplit)\n\nclass str_escaped(str):\n    def split(self, sep=None, maxsplit=-1):\n        return split(self, sep=sep, maxsplit=maxsplit)\n    \n    def strip(self, chars=None):\n        return strip(self, characters = chars)\n\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Input:\n    n_str: str\n    a_list_str: str\n\n    @property\n    def n(self) -> int:\n        return int(self.n_str)\n\n    @property\n    def a_list(self) -> List[int]:\n        return [int(x) for x in self.a_list_str.split(' ')]\n\n    @classmethod\n    def from_str(cls, input_: str):\n        n_str, a_list_str, _ = input_.split('\\n')\n        return cls(n_str, a_list_str)\n\n    def __repr__(self):\n        return self.n_str + '\\n' + self.a_list_str + '\\n'\n", "inputs_example": "5\n1 5 4 1 3\n", "time_complexity_inferred": "O(n)", "time_curve_coefficient": 3.094732053103147e-06, "tests": {"public_tests": [{"input": "5\n1 5 4 1 3\n", "output": "9\n"}, {"input": "7\n1 2 1 1 1 3 2\n", "output": "7\n"}], "private_tests": [{"input": "10\n2 2 4 4 3 1 1 2 3 2\n", "output": "14\n"}, {"input": "15\n1 2 2 1 2 4 2 1 1 6 6 4 2 5 4\n", "output": "20\n"}, {"input": "1\n1\n", "output": "0\n"}], "generated_tests": [{"input": "10\n2 2 4 4 3 1 1 2 4 2\n", "output": "14\n"}, {"input": "15\n1 2 2 1 2 4 2 1 1 6 6 4 2 5 5\n", "output": "20\n"}, {"input": "15\n1 2 3 1 2 4 2 1 1 6 6 4 2 5 5\n", "output": "27\n"}, {"input": "15\n1 2 3 1 2 7 2 1 1 6 6 4 2 5 5\n", "output": "32\n"}, {"input": "15\n1 2 3 1 3 7 2 1 1 6 6 4 2 5 5\n", "output": "33\n"}, {"input": "15\n1 2 3 2 3 7 2 1 1 6 6 1 1 5 5\n", "output": "26\n"}, {"input": "15\n1 2 3 2 3 7 2 1 1 6 6 1 1 1 5\n", "output": "25\n"}, {"input": "15\n1 3 3 1 3 7 2 1 1 6 6 1 1 1 5\n", "output": "22\n"}, {"input": "15\n1 1 3 1 1 7 2 1 1 6 6 1 1 1 5\n", "output": "21\n"}, {"input": "15\n1 2 3 1 1 7 2 1 1 6 6 1 1 1 5\n", "output": "24\n"}, {"input": "15\n1 2 3 1 1 7 3 1 1 6 6 1 1 1 5\n", "output": "23\n"}, {"input": "7\n1 2 1 1 1 5 2\n", "output": "7\n"}, {"input": "10\n2 2 4 4 2 1 1 2 4 2\n", "output": "9\n"}, {"input": "15\n1 2 3 1 3 4 2 1 1 6 6 4 2 5 5\n", "output": "28\n"}, {"input": "15\n1 2 3 2 3 7 2 1 1 6 9 1 1 1 5\n", "output": "31\n"}, {"input": "10\n3 2 1 4 3 1 1 2 3 2\n", "output": "15\n"}, {"input": "15\n1 2 3 1 2 7 2 1 1 6 4 4 2 7 5\n", "output": "34\n"}, {"input": "15\n1 2 3 1 3 7 2 1 1 6 2 4 1 5 3\n", "output": "36\n"}, {"input": "15\n1 2 3 2 3 9 2 1 1 7 6 4 1 5 5\n", "output": "40\n"}, {"input": "15\n1 2 5 2 3 7 2 1 1 6 9 1 1 1 5\n", "output": "37\n"}, {"input": "15\n1 2 2 1 3 1 2 1 1 6 6 8 2 5 4\n", "output": "29\n"}, {"input": "10\n2 2 6 4 2 1 1 2 4 1\n", "output": "13\n"}, {"input": "15\n1 2 2 1 2 7 2 1 1 6 6 5 2 5 5\n", "output": "19\n"}, {"input": "15\n1 2 3 1 3 7 2 1 1 6 1 4 1 5 3\n", "output": "35\n"}, {"input": "15\n1 2 1 2 3 9 2 1 1 7 6 4 1 5 5\n", "output": "39\n"}, {"input": "15\n1 4 6 1 2 7 2 1 1 10 4 8 2 7 5\n", "output": "45\n"}, {"input": "10\n2 2 4 5 3 1 1 2 3 2\n", "output": "18\n"}, {"input": "7\n1 2 1 1 1 3 1\n", "output": "6\n"}, {"input": "15\n1 2 3 1 2 7 2 1 1 6 6 4 2 9 5\n", "output": "38\n"}, {"input": "15\n1 2 3 1 3 7 2 1 1 6 6 4 1 5 5\n", "output": "33\n"}, {"input": "15\n1 2 3 2 3 7 2 1 1 6 6 4 1 5 5\n", "output": "33\n"}, {"input": "15\n1 3 3 2 3 7 2 1 1 6 6 1 1 1 5\n", "output": "25\n"}, {"input": "15\n1 1 3 1 3 7 2 1 1 6 6 1 1 1 5\n", "output": "22\n"}, {"input": "10\n2 2 1 4 3 1 1 2 3 2\n", "output": "14\n"}, {"input": "15\n1 2 2 1 2 4 2 1 1 6 6 8 2 5 4\n", "output": "27\n"}, {"input": "15\n1 2 3 1 2 7 2 1 1 6 4 4 2 5 5\n", "output": "32\n"}, {"input": "15\n1 2 3 1 3 7 2 1 1 6 6 5 2 5 5\n", "output": "27\n"}, {"input": "15\n1 2 3 1 3 7 2 1 1 6 2 4 1 5 5\n", "output": "33\n"}, {"input": "15\n1 2 3 2 3 9 2 1 1 6 6 4 1 5 5\n", "output": "33\n"}, {"input": "15\n1 3 3 2 3 7 3 1 1 6 6 1 1 1 5\n", "output": "24\n"}, {"input": "15\n1 3 3 1 3 7 2 1 1 6 6 1 1 1 4\n", "output": "22\n"}, {"input": "15\n1 1 3 1 3 7 2 2 1 6 6 1 1 1 5\n", "output": "23\n"}, {"input": "15\n1 3 3 1 1 7 2 1 1 6 6 1 1 1 5\n", "output": "22\n"}, {"input": "15\n1 2 2 1 2 1 2 1 1 6 6 8 2 5 4\n", "output": "21\n"}, {"input": "10\n2 2 4 4 2 1 1 2 4 1\n", "output": "9\n"}, {"input": "15\n1 2 3 1 1 4 2 1 1 6 6 4 2 5 5\n", "output": "27\n"}, {"input": "15\n1 2 3 1 2 7 2 1 1 6 6 5 2 5 5\n", "output": "26\n"}, {"input": "10\n3 2 1 2 3 1 1 2 3 2\n", "output": "9\n"}, {"input": "15\n1 3 3 1 2 7 2 1 1 6 4 4 2 7 5\n", "output": "34\n"}, {"input": "15\n1 2 2 1 3 1 2 1 1 6 6 6 2 5 4\n", "output": "22\n"}, {"input": "10\n2 2 6 4 1 1 1 2 4 1\n", "output": "13\n"}, {"input": "15\n1 4 3 1 2 7 2 1 1 6 4 4 2 7 5\n", "output": "36\n"}, {"input": "15\n1 2 2 1 2 7 2 1 1 6 6 5 2 5 8\n", "output": "24\n"}, {"input": "15\n1 2 4 1 3 7 2 1 1 6 1 4 1 5 3\n", "output": "39\n"}, {"input": "15\n2 2 1 2 3 9 2 1 1 7 6 4 1 5 5\n", "output": "39\n"}, {"input": "10\n2 2 6 4 1 1 2 2 4 1\n", "output": "13\n"}, {"input": "15\n1 4 3 1 2 7 2 1 1 10 4 4 2 7 5\n", "output": "36\n"}, {"input": "15\n1 2 2 1 3 7 2 1 1 6 6 5 2 5 8\n", "output": "32\n"}, {"input": "15\n2 2 1 3 3 9 2 1 1 7 6 4 1 5 5\n", "output": "40\n"}, {"input": "10\n2 2 8 4 1 1 2 2 4 1\n", "output": "13\n"}, {"input": "15\n1 4 6 1 2 7 2 1 1 10 4 4 2 7 5\n", "output": "36\n"}, {"input": "15\n1 2 2 1 3 7 2 1 1 6 6 5 3 5 8\n", "output": "34\n"}, {"input": "10\n4 2 8 4 1 1 2 2 4 1\n", "output": "14\n"}, {"input": "15\n1 2 2 1 3 7 2 1 1 6 7 5 3 5 8\n", "output": "35\n"}, {"input": "10\n4 4 8 4 1 1 2 2 4 1\n", "output": "13\n"}, {"input": "15\n1 4 6 1 2 7 2 1 1 10 4 15 2 7 5\n", "output": "45\n"}, {"input": "15\n1 2 2 1 3 7 2 1 1 6 7 7 3 5 8\n", "output": "33\n"}, {"input": "10\n4 4 8 4 1 2 2 2 4 1\n", "output": "13\n"}, {"input": "15\n1 2 2 1 3 7 2 1 1 6 7 7 3 5 4\n", "output": "33\n"}, {"input": "15\n1 2 2 1 3 7 2 1 1 6 7 7 3 7 4\n", "output": "27\n"}, {"input": "15\n1 2 2 1 5 7 2 1 1 6 7 7 3 7 4\n", "output": "31\n"}, {"input": "15\n1 2 2 1 5 7 2 1 1 6 1 7 3 7 4\n", "output": "32\n"}, {"input": "15\n1 2 2 1 9 7 2 1 1 6 1 7 3 7 4\n", "output": "32\n"}, {"input": "15\n1 2 2 1 2 4 2 1 2 6 6 4 2 5 4\n", "output": "20\n"}, {"input": "15\n1 2 2 1 1 4 2 1 1 6 6 4 2 5 5\n", "output": "20\n"}, {"input": "15\n1 2 3 1 3 7 2 1 1 6 5 4 2 5 5\n", "output": "34\n"}]}, "problem_time_curve_coefficient_list": [1.1010376207592181e-05, 9.884639079222653e-06, 8.337355291822179e-06, 7.487326948478954e-06, 7.138373462181537e-06, 6.744818468640735e-06, 6.30546488472465e-06, 5.952968422202797e-06, 5.766935546875001e-06, 5.731574847027972e-06, 5.720007020323427e-06, 5.670603133194931e-06, 5.656660826673651e-06, 5.448907260708043e-06, 5.390757211538461e-06, 5.067086797967658e-06, 4.459692403299825e-06, 4.311551587084791e-06, 4.081240944602273e-06, 4.000328043050699e-06, 3.9681243990384615e-06, 3.6310821951486015e-06, 3.585218312937063e-06, 3.5780732626748255e-06, 3.488062677556818e-06, 3.3010696705638113e-06, 3.2177509287587406e-06, 3.183909555288462e-06, 3.1835376557036735e-06, 3.163340431053322e-06, 3.148736136909965e-06, 3.094732053103147e-06, 3.0904539718094407e-06, 3.0804482217001753e-06, 2.98973046875e-06, 2.949128605769231e-06, 2.8928236724213286e-06, 2.8186998060533217e-06, 2.8186984948645107e-06, 2.809410456730769e-06, 2.808634055397727e-06, 2.807978338068182e-06, 2.807793610686189e-06, 2.7924245246940564e-06, 2.7586712603802452e-06, 2.7153214461319933e-06, 2.6917798158872377e-06, 2.655033448972902e-06, 2.4681342466127623e-06, 2.355251393138112e-06, 2.3199277480332167e-06, 2.1750961675043708e-06, 2.1486115466564686e-06, 1.6491237024694058e-06, 1.6343286576704548e-06, 1.6257994700611892e-06, 1.6051646498033217e-06, 1.5786206293706294e-06, 1.4647934604458042e-06, 1.4436400376966784e-06, 1.234936502950175e-06, 1.2259067553540213e-06, 6.692881200830419e-07], "human_label": true, "framework_note": ""}, "O(nlogn)": {"problem_name": "1004_C. Sonya and Robots", "problem_id": "1039", "solution_id": "1039_15", "description": "Since Sonya is interested in robotics too, she decided to construct robots that will read and recognize numbers.\n\nSonya has drawn n numbers in a row, a_i is located in the i-th position. She also has put a robot at each end of the row (to the left of the first number and to the right of the last number). Sonya will give a number to each robot (they can be either same or different) and run them. When a robot is running, it is moving toward to another robot, reading numbers in the row. When a robot is reading a number that is equal to the number that was given to that robot, it will turn off and stay in the same position.\n\nSonya does not want robots to break, so she will give such numbers that robots will stop before they meet. That is, the girl wants them to stop at different positions so that the first robot is to the left of the second one.\n\nFor example, if the numbers [1, 5, 4, 1, 3] are written, and Sonya gives the number 1 to the first robot and the number 4 to the second one, the first robot will stop in the 1-st position while the second one in the 3-rd position. In that case, robots will not meet each other. As a result, robots will not be broken. But if Sonya gives the number 4 to the first robot and the number 5 to the second one, they will meet since the first robot will stop in the 3-rd position while the second one is in the 2-nd position.\n\nSonya understands that it does not make sense to give a number that is not written in the row because a robot will not find this number and will meet the other robot.\n\nSonya is now interested in finding the number of different pairs that she can give to robots so that they will not meet. In other words, she wants to know the number of pairs (p, q), where she will give p to the first robot and q to the second one. Pairs (p_i, q_i) and (p_j, q_j) are different if p_i\u2260 p_j or q_i\u2260 q_j.\n\nUnfortunately, Sonya is busy fixing robots that broke after a failed launch. That is why she is asking you to find the number of pairs that she can give to robots so that they will not meet.\n\nInput\n\nThe first line contains a single integer n (1\u2264 n\u2264 10^5) \u2014 the number of numbers in a row.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1\u2264 a_i\u2264 10^5) \u2014 the numbers in a row.\n\nOutput\n\nPrint one number \u2014 the number of possible pairs that Sonya can give to robots so that they will not meet.\n\nExamples\n\nInput\n\n5\n1 5 4 1 3\n\n\nOutput\n\n9\n\n\nInput\n\n7\n1 2 1 1 1 3 2\n\n\nOutput\n\n7\n\nNote\n\nIn the first example, Sonya can give pairs (1, 1), (1, 3), (1, 4), (1, 5), (4, 1), (4, 3), (5, 1), (5, 3), and (5, 4).\n\nIn the second example, Sonya can give pairs (1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), and (3, 2).", "solution_code": "from collections import defaultdict\nfrom bisect import bisect\n\nINF = 10**9\n\nn = int(input())\na = list(map(int, input().split()))\n\nfirst_pos = [INF] * (n+1)\nfor i, x in enumerate(a):\n    if first_pos[x] == INF:\n        first_pos[x] = i\n        \nlast_pos = [-1] * (n+1)\nfor i, x in enumerate(a):\n    last_pos[x] = i\nlast_pos.sort()\n\ntotal = 0\nfor i, first in enumerate(first_pos):\n    total += len(last_pos) - bisect(last_pos, first)\nprint(total)\n", "dataclass_code": "import sys\nimport time\nimport itertools\nfrom itertools import accumulate, product, permutations, combinations\nimport collections\nfrom collections import Counter, OrderedDict, deque, defaultdict, ChainMap\nfrom functools import lru_cache\nimport math\nfrom math import sqrt, sin, cos, tan, ceil, fabs, floor, gcd, exp, log, log2\nimport fractions\nfrom typing import List, Tuple\nimport numpy as np\nimport random\nimport heapq\nfrom heapq import *\nfrom dataclasses import dataclass\n\nimport builtins\nimport re\n\ndef strip(s, characters = None):\n    if characters is None:\n        characters = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n    else:\n        characters = list(characters)\n\n    characters = [x for x in characters if len(x) > 0] \n\n    i = 0\n    while i < len(s):\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[i:i + len(sep_candidate)] == sep_candidate:\n                found_sep_candidate = True\n                i += len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    j = len(s) - 1\n    while j >= 0:\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[j + 1 - len(sep_candidate):j+1] == sep_candidate:\n                found_sep_candidate = True\n                j -= len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    return s[i:j+1]\n\ndef split(s, sep=None, maxsplit=-1):\n    if sep == '':\n        raise builtins.ValueError('empty separator')\n\n    if type(sep) == list and '' in sep:\n        raise builtins.ValueError('empty separator')\n\n    if sep is None:\n        sep = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n        result = []\n        word = ''\n        count_split = 0\n        \n        if maxsplit == -1:\n            maxsplit = len(s) * 1000\n\n        i = 0\n        while i < len(s):\n            found_sep_candidate = False\n\n            for sep_candidate in sep:\n                if s[i:i + len(sep_candidate)] == sep_candidate:\n                    found_sep_candidate = True\n\n                    if word:\n                        result.append(word)\n                        count_split += 1\n                        word = ''\n\n                    i += len(sep_candidate)\n                    break\n\n            if not found_sep_candidate and count_split < maxsplit:\n                word += s[i]\n                i += 1\n\n            elif not found_sep_candidate and count_split >= maxsplit:\n                word += s[i:]\n                i = len(s)\n\n        if word:\n            result.append(word)\n        return result\n    \n    if type(sep) == str:\n        sep = [sep]\n\n    if maxsplit == -1:\n        maxsplit = 0\n    elif maxsplit == 0:\n        maxsplit = -1\n\n    return re.split(re.compile(\"|\".join([re.escape(x) for x in sep])), s, maxsplit=maxsplit)\n\nclass str_escaped(str):\n    def split(self, sep=None, maxsplit=-1):\n        return split(self, sep=sep, maxsplit=maxsplit)\n    \n    def strip(self, chars=None):\n        return strip(self, characters = chars)\n\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Input:\n    n_str: str\n    a_list_str: str\n\n    @property\n    def n(self) -> int:\n        return int(self.n_str)\n\n    @property\n    def a_list(self) -> List[int]:\n        return [int(x) for x in self.a_list_str.split(' ')]\n\n    @classmethod\n    def from_str(cls, input_: str):\n        n_str, a_list_str, _ = input_.split('\\n')\n        return cls(n_str, a_list_str)\n\n    def __repr__(self):\n        return self.n_str + '\\n' + self.a_list_str + '\\n'\n", "inputs_example": "5\n1 5 4 1 3\n", "time_complexity_inferred": "O(nlogn)", "time_curve_coefficient": 1.2112067935679104e-05, "tests": {"public_tests": [{"input": "5\n1 5 4 1 3\n", "output": "9\n"}, {"input": "7\n1 2 1 1 1 3 2\n", "output": "7\n"}], "private_tests": [{"input": "10\n2 2 4 4 3 1 1 2 3 2\n", "output": "14\n"}, {"input": "15\n1 2 2 1 2 4 2 1 1 6 6 4 2 5 4\n", "output": "20\n"}, {"input": "1\n1\n", "output": "0\n"}], "generated_tests": [{"input": "10\n2 2 4 4 3 1 1 2 4 2\n", "output": "14\n"}, {"input": "15\n1 2 2 1 2 4 2 1 1 6 6 4 2 5 5\n", "output": "20\n"}, {"input": "15\n1 2 3 1 2 4 2 1 1 6 6 4 2 5 5\n", "output": "27\n"}, {"input": "15\n1 2 3 1 2 7 2 1 1 6 6 4 2 5 5\n", "output": "32\n"}, {"input": "15\n1 2 3 1 3 7 2 1 1 6 6 4 2 5 5\n", "output": "33\n"}, {"input": "15\n1 2 3 2 3 7 2 1 1 6 6 1 1 5 5\n", "output": "26\n"}, {"input": "15\n1 2 3 2 3 7 2 1 1 6 6 1 1 1 5\n", "output": "25\n"}, {"input": "15\n1 3 3 1 3 7 2 1 1 6 6 1 1 1 5\n", "output": "22\n"}, {"input": "15\n1 1 3 1 1 7 2 1 1 6 6 1 1 1 5\n", "output": "21\n"}, {"input": "15\n1 2 3 1 1 7 2 1 1 6 6 1 1 1 5\n", "output": "24\n"}, {"input": "15\n1 2 3 1 1 7 3 1 1 6 6 1 1 1 5\n", "output": "23\n"}, {"input": "7\n1 2 1 1 1 5 2\n", "output": "7\n"}, {"input": "10\n2 2 4 4 2 1 1 2 4 2\n", "output": "9\n"}, {"input": "15\n1 2 3 1 3 4 2 1 1 6 6 4 2 5 5\n", "output": "28\n"}, {"input": "15\n1 2 3 2 3 7 2 1 1 6 9 1 1 1 5\n", "output": "31\n"}, {"input": "10\n3 2 1 4 3 1 1 2 3 2\n", "output": "15\n"}, {"input": "15\n1 2 3 1 2 7 2 1 1 6 4 4 2 7 5\n", "output": "34\n"}, {"input": "15\n1 2 3 1 3 7 2 1 1 6 2 4 1 5 3\n", "output": "36\n"}, {"input": "15\n1 2 3 2 3 9 2 1 1 7 6 4 1 5 5\n", "output": "40\n"}, {"input": "15\n1 2 5 2 3 7 2 1 1 6 9 1 1 1 5\n", "output": "37\n"}, {"input": "15\n1 2 2 1 3 1 2 1 1 6 6 8 2 5 4\n", "output": "29\n"}, {"input": "10\n2 2 6 4 2 1 1 2 4 1\n", "output": "13\n"}, {"input": "15\n1 2 2 1 2 7 2 1 1 6 6 5 2 5 5\n", "output": "19\n"}, {"input": "15\n1 2 3 1 3 7 2 1 1 6 1 4 1 5 3\n", "output": "35\n"}, {"input": "15\n1 2 1 2 3 9 2 1 1 7 6 4 1 5 5\n", "output": "39\n"}, {"input": "15\n1 4 6 1 2 7 2 1 1 10 4 8 2 7 5\n", "output": "45\n"}, {"input": "10\n2 2 4 5 3 1 1 2 3 2\n", "output": "18\n"}, {"input": "7\n1 2 1 1 1 3 1\n", "output": "6\n"}, {"input": "15\n1 2 3 1 2 7 2 1 1 6 6 4 2 9 5\n", "output": "38\n"}, {"input": "15\n1 2 3 1 3 7 2 1 1 6 6 4 1 5 5\n", "output": "33\n"}, {"input": "15\n1 2 3 2 3 7 2 1 1 6 6 4 1 5 5\n", "output": "33\n"}, {"input": "15\n1 3 3 2 3 7 2 1 1 6 6 1 1 1 5\n", "output": "25\n"}, {"input": "15\n1 1 3 1 3 7 2 1 1 6 6 1 1 1 5\n", "output": "22\n"}, {"input": "10\n2 2 1 4 3 1 1 2 3 2\n", "output": "14\n"}, {"input": "15\n1 2 2 1 2 4 2 1 1 6 6 8 2 5 4\n", "output": "27\n"}, {"input": "15\n1 2 3 1 2 7 2 1 1 6 4 4 2 5 5\n", "output": "32\n"}, {"input": "15\n1 2 3 1 3 7 2 1 1 6 6 5 2 5 5\n", "output": "27\n"}, {"input": "15\n1 2 3 1 3 7 2 1 1 6 2 4 1 5 5\n", "output": "33\n"}, {"input": "15\n1 2 3 2 3 9 2 1 1 6 6 4 1 5 5\n", "output": "33\n"}, {"input": "15\n1 3 3 2 3 7 3 1 1 6 6 1 1 1 5\n", "output": "24\n"}, {"input": "15\n1 3 3 1 3 7 2 1 1 6 6 1 1 1 4\n", "output": "22\n"}, {"input": "15\n1 1 3 1 3 7 2 2 1 6 6 1 1 1 5\n", "output": "23\n"}, {"input": "15\n1 3 3 1 1 7 2 1 1 6 6 1 1 1 5\n", "output": "22\n"}, {"input": "15\n1 2 2 1 2 1 2 1 1 6 6 8 2 5 4\n", "output": "21\n"}, {"input": "10\n2 2 4 4 2 1 1 2 4 1\n", "output": "9\n"}, {"input": "15\n1 2 3 1 1 4 2 1 1 6 6 4 2 5 5\n", "output": "27\n"}, {"input": "15\n1 2 3 1 2 7 2 1 1 6 6 5 2 5 5\n", "output": "26\n"}, {"input": "10\n3 2 1 2 3 1 1 2 3 2\n", "output": "9\n"}, {"input": "15\n1 3 3 1 2 7 2 1 1 6 4 4 2 7 5\n", "output": "34\n"}, {"input": "15\n1 2 2 1 3 1 2 1 1 6 6 6 2 5 4\n", "output": "22\n"}, {"input": "10\n2 2 6 4 1 1 1 2 4 1\n", "output": "13\n"}, {"input": "15\n1 4 3 1 2 7 2 1 1 6 4 4 2 7 5\n", "output": "36\n"}, {"input": "15\n1 2 2 1 2 7 2 1 1 6 6 5 2 5 8\n", "output": "24\n"}, {"input": "15\n1 2 4 1 3 7 2 1 1 6 1 4 1 5 3\n", "output": "39\n"}, {"input": "15\n2 2 1 2 3 9 2 1 1 7 6 4 1 5 5\n", "output": "39\n"}, {"input": "10\n2 2 6 4 1 1 2 2 4 1\n", "output": "13\n"}, {"input": "15\n1 4 3 1 2 7 2 1 1 10 4 4 2 7 5\n", "output": "36\n"}, {"input": "15\n1 2 2 1 3 7 2 1 1 6 6 5 2 5 8\n", "output": "32\n"}, {"input": "15\n2 2 1 3 3 9 2 1 1 7 6 4 1 5 5\n", "output": "40\n"}, {"input": "10\n2 2 8 4 1 1 2 2 4 1\n", "output": "13\n"}, {"input": "15\n1 4 6 1 2 7 2 1 1 10 4 4 2 7 5\n", "output": "36\n"}, {"input": "15\n1 2 2 1 3 7 2 1 1 6 6 5 3 5 8\n", "output": "34\n"}, {"input": "10\n4 2 8 4 1 1 2 2 4 1\n", "output": "14\n"}, {"input": "15\n1 2 2 1 3 7 2 1 1 6 7 5 3 5 8\n", "output": "35\n"}, {"input": "10\n4 4 8 4 1 1 2 2 4 1\n", "output": "13\n"}, {"input": "15\n1 4 6 1 2 7 2 1 1 10 4 15 2 7 5\n", "output": "45\n"}, {"input": "15\n1 2 2 1 3 7 2 1 1 6 7 7 3 5 8\n", "output": "33\n"}, {"input": "10\n4 4 8 4 1 2 2 2 4 1\n", "output": "13\n"}, {"input": "15\n1 2 2 1 3 7 2 1 1 6 7 7 3 5 4\n", "output": "33\n"}, {"input": "15\n1 2 2 1 3 7 2 1 1 6 7 7 3 7 4\n", "output": "27\n"}, {"input": "15\n1 2 2 1 5 7 2 1 1 6 7 7 3 7 4\n", "output": "31\n"}, {"input": "15\n1 2 2 1 5 7 2 1 1 6 1 7 3 7 4\n", "output": "32\n"}, {"input": "15\n1 2 2 1 9 7 2 1 1 6 1 7 3 7 4\n", "output": "32\n"}, {"input": "15\n1 2 2 1 2 4 2 1 2 6 6 4 2 5 4\n", "output": "20\n"}, {"input": "15\n1 2 2 1 1 4 2 1 1 6 6 4 2 5 5\n", "output": "20\n"}, {"input": "15\n1 2 3 1 3 7 2 1 1 6 5 4 2 5 5\n", "output": "34\n"}]}, "problem_time_curve_coefficient_list": [1.2150336438618166e-05, 1.2112067935679104e-05, 2.0984015501905413e-06, 1.3128825395998442e-06, 1.3101497321457601e-06, 1.1659292514053216e-06, 1.0696984301785926e-06, 1.0425868776210676e-06, 9.718771347709944e-07, 9.395111846272619e-07, 8.918863637939339e-07, 8.721338199689024e-07, 8.576976678283295e-07, 7.475699763145078e-07, 7.211139646757589e-07, 5.226361157840944e-07, 1.3617252246786884e-07], "human_label": true, "framework_note": ""}}, "651_B. Beautiful Paintings": {"O(n)": {"problem_name": "651_B. Beautiful Paintings", "problem_id": "1054", "solution_id": "1054_174", "description": "There are n pictures delivered for the new exhibition. The i-th painting has beauty ai. We know that a visitor becomes happy every time he passes from a painting to a more beautiful one.\n\nWe are allowed to arranged pictures in any order. What is the maximum possible number of times the visitor may become happy while passing all pictures from first to last? In other words, we are allowed to rearrange elements of a in any order. What is the maximum possible number of indices i (1 \u2264 i \u2264 n - 1), such that ai + 1 > ai.\n\nInput\n\nThe first line of the input contains integer n (1 \u2264 n \u2264 1000) \u2014 the number of painting.\n\nThe second line contains the sequence a1, a2, ..., an (1 \u2264 ai \u2264 1000), where ai means the beauty of the i-th painting.\n\nOutput\n\nPrint one integer \u2014 the maximum possible number of neighbouring pairs, such that ai + 1 > ai, after the optimal rearrangement.\n\nExamples\n\nInput\n\n5\n20 30 10 50 40\n\n\nOutput\n\n4\n\n\nInput\n\n4\n200 100 100 200\n\n\nOutput\n\n2\n\nNote\n\nIn the first sample, the optimal order is: 10, 20, 30, 40, 50.\n\nIn the second sample, the optimal order is: 100, 200, 100, 200.", "solution_code": "n = int(input())\nl = list(map(int, input().split()))\nd = {}\nfor i in l:\n    if i not in d:\n        d[i] = 1\n    else:\n        d[i] += 1\n\nm = max(d.values())\nprint(n - m)\n    ", "dataclass_code": "import sys\nimport time\nimport itertools\nfrom itertools import accumulate, product, permutations, combinations\nimport collections\nfrom collections import Counter, OrderedDict, deque, defaultdict, ChainMap\nfrom functools import lru_cache\nimport math\nfrom math import sqrt, sin, cos, tan, ceil, fabs, floor, gcd, exp, log, log2\nimport fractions\nfrom typing import List, Tuple\nimport numpy as np\nimport random\nimport heapq\nfrom heapq import *\nfrom dataclasses import dataclass\n\nimport builtins\nimport re\n\ndef strip(s, characters = None):\n    if characters is None:\n        characters = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n    else:\n        characters = list(characters)\n\n    characters = [x for x in characters if len(x) > 0] \n\n    i = 0\n    while i < len(s):\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[i:i + len(sep_candidate)] == sep_candidate:\n                found_sep_candidate = True\n                i += len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    j = len(s) - 1\n    while j >= 0:\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[j + 1 - len(sep_candidate):j+1] == sep_candidate:\n                found_sep_candidate = True\n                j -= len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    return s[i:j+1]\n\ndef split(s, sep=None, maxsplit=-1):\n    if sep == '':\n        raise builtins.ValueError('empty separator')\n\n    if type(sep) == list and '' in sep:\n        raise builtins.ValueError('empty separator')\n\n    if sep is None:\n        sep = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n        result = []\n        word = ''\n        count_split = 0\n        \n        if maxsplit == -1:\n            maxsplit = len(s) * 1000\n\n        i = 0\n        while i < len(s):\n            found_sep_candidate = False\n\n            for sep_candidate in sep:\n                if s[i:i + len(sep_candidate)] == sep_candidate:\n                    found_sep_candidate = True\n\n                    if word:\n                        result.append(word)\n                        count_split += 1\n                        word = ''\n\n                    i += len(sep_candidate)\n                    break\n\n            if not found_sep_candidate and count_split < maxsplit:\n                word += s[i]\n                i += 1\n\n            elif not found_sep_candidate and count_split >= maxsplit:\n                word += s[i:]\n                i = len(s)\n\n        if word:\n            result.append(word)\n        return result\n    \n    if type(sep) == str:\n        sep = [sep]\n\n    if maxsplit == -1:\n        maxsplit = 0\n    elif maxsplit == 0:\n        maxsplit = -1\n\n    return re.split(re.compile(\"|\".join([re.escape(x) for x in sep])), s, maxsplit=maxsplit)\n\nclass str_escaped(str):\n    def split(self, sep=None, maxsplit=-1):\n        return split(self, sep=sep, maxsplit=maxsplit)\n    \n    def strip(self, chars=None):\n        return strip(self, characters = chars)\n\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Input:\n    n: int\n    a_list: List[int]\n\n    @classmethod\n    def from_str(cls, input_: str):\n        n, a_list, _ = input_.split('\\n')\n        n = int(n)\n        a_list = [int(x) for x in a_list.split(' ')]\n        assert n == len(a_list)\n        return cls(n, a_list)\n\n    def __repr__(self):\n        return str(self.n) + '\\n' + ' '.join([str(x) for x in self.a_list]) + '\\n'\n", "inputs_example": "5\n20 30 10 50 40\n", "time_complexity_inferred": "O(n)", "time_curve_coefficient": 3.214120137674825e-06, "tests": {"public_tests": [{"input": "5\n20 30 10 50 40\n", "output": "4\n"}, {"input": "4\n200 100 100 200\n", "output": "2\n"}], "private_tests": [{"input": "10\n103 101 103 103 101 102 100 100 101 104\n", "output": "7\n"}, {"input": "20\n990 994 996 999 997 994 990 992 990 993 992 990 999 999 992 994 997 990 993 998\n", "output": "15\n"}, {"input": "100\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 3 6 6 6 6 6 7 2 7 2 4 7 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 8 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 5 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 6 6 4 9 9 8 9\n", "output": "84\n"}, {"input": "1\n995\n", "output": "0\n"}, {"input": "2\n444 333\n", "output": "1\n"}, {"input": "1\n1000\n", "output": "0\n"}, {"input": "10\n2 2 2 2 2 2 2 2 2 2\n", "output": "0\n"}, {"input": "20\n102 100 102 104 102 101 104 103 100 103 105 105 100 105 100 100 101 105 105 102\n", "output": "15\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 9 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 76 55 72 89 4 78 27 29 82 18 83 12 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}], "generated_tests": [{"input": "10\n199 101 103 103 101 102 100 100 101 104\n", "output": "7\n"}, {"input": "100\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 3 6 6 6 6 6 7 2 7 2 4 1 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 8 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 5 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 6 6 4 9 9 8 9\n", "output": "84\n"}, {"input": "2\n444 312\n", "output": "1\n"}, {"input": "20\n102 100 102 104 102 101 104 103 100 103 105 105 100 105 100 100 101 105 10 102\n", "output": "15\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 9 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 76 55 72 89 4 78 27 29 82 13 83 12 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n20 19 10 50 40\n", "output": "4\n"}, {"input": "4\n200 100 101 200\n", "output": "2\n"}, {"input": "4\n200 100 101 125\n", "output": "3\n"}, {"input": "20\n102 100 102 104 102 101 104 103 100 103 105 101 100 105 100 101 101 105 10 102\n", "output": "16\n"}, {"input": "100\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 3 6 6 6 6 6 7 2 7 2 4 1 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 13 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 10 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 4 6 4 9 9 8 9\n", "output": "85\n"}, {"input": "10\n199 101 86 95 001 102 100 100 101 104\n", "output": "8\n"}, {"input": "10\n2 5 4 2 4 12 2 4 2 2\n", "output": "5\n"}, {"input": "10\n2 1 4 3 4 12 2 4 2 2\n", "output": "6\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 65 37 74 7 6 23 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "10\n2 3 2 2 2 2 2 2 2 2\n", "output": "1\n"}, {"input": "10\n199 101 66 103 101 102 100 100 101 104\n", "output": "7\n"}, {"input": "100\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 3 6 6 6 6 6 7 2 7 2 4 1 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 8 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 10 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 6 6 4 9 9 8 9\n", "output": "84\n"}, {"input": "2\n444 233\n", "output": "1\n"}, {"input": "10\n2 3 2 2 2 4 2 2 2 2\n", "output": "2\n"}, {"input": "20\n102 100 102 104 102 101 104 103 100 103 105 101 100 105 100 100 101 105 10 102\n", "output": "15\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 9 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 76 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n20 19 13 50 40\n", "output": "4\n"}, {"input": "10\n199 101 86 103 101 102 100 100 101 104\n", "output": "7\n"}, {"input": "100\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 3 6 6 6 6 6 7 2 7 2 4 1 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 13 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 10 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 6 6 4 9 9 8 9\n", "output": "84\n"}, {"input": "2\n251 233\n", "output": "1\n"}, {"input": "10\n2 3 2 2 2 8 2 2 2 2\n", "output": "2\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 76 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n20 19 13 50 10\n", "output": "4\n"}, {"input": "4\n200 110 101 125\n", "output": "3\n"}, {"input": "10\n199 101 86 95 101 102 100 100 101 104\n", "output": "7\n"}, {"input": "2\n251 75\n", "output": "1\n"}, {"input": "10\n2 3 2 2 2 8 2 4 2 2\n", "output": "3\n"}, {"input": "20\n102 100 102 22 102 101 104 103 100 103 105 101 100 105 100 101 101 105 10 102\n", "output": "16\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 139 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n20 19 13 50 14\n", "output": "4\n"}, {"input": "4\n190 110 101 125\n", "output": "3\n"}, {"input": "100\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 2 6 6 6 6 6 7 2 7 2 4 1 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 13 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 10 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 4 6 4 9 9 8 9\n", "output": "85\n"}, {"input": "2\n251 42\n", "output": "1\n"}, {"input": "10\n2 3 2 2 2 12 2 4 2 2\n", "output": "3\n"}, {"input": "20\n102 100 102 22 102 101 104 56 100 103 105 101 100 105 100 101 101 105 10 102\n", "output": "16\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n20 19 13 23 14\n", "output": "4\n"}, {"input": "4\n190 110 001 125\n", "output": "3\n"}, {"input": "10\n199 101 86 95 001 102 100 100 001 104\n", "output": "8\n"}, {"input": "2\n251 30\n", "output": "1\n"}, {"input": "10\n2 5 2 2 2 12 2 4 2 2\n", "output": "3\n"}, {"input": "20\n102 100 102 22 102 101 104 56 100 103 105 101 100 105 100 101 100 105 10 102\n", "output": "15\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n15 19 13 23 14\n", "output": "4\n"}, {"input": "4\n230 110 001 125\n", "output": "3\n"}, {"input": "10\n199 001 86 95 001 102 100 100 001 104\n", "output": "7\n"}, {"input": "2\n207 30\n", "output": "1\n"}, {"input": "10\n2 5 2 2 4 12 2 4 2 2\n", "output": "4\n"}, {"input": "20\n102 100 102 22 102 101 104 56 100 103 105 101 100 105 100 101 100 131 10 102\n", "output": "15\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n29 19 13 23 14\n", "output": "4\n"}, {"input": "4\n230 110 001 199\n", "output": "3\n"}, {"input": "2\n340 30\n", "output": "1\n"}, {"input": "20\n102 100 102 22 102 101 104 56 100 103 105 101 100 69 100 101 100 131 10 102\n", "output": "15\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n29 19 13 12 14\n", "output": "4\n"}, {"input": "4\n230 110 001 6\n", "output": "3\n"}, {"input": "2\n340 37\n", "output": "1\n"}, {"input": "10\n2 1 4 2 4 12 2 4 2 2\n", "output": "5\n"}, {"input": "20\n102 110 102 22 102 101 104 56 100 103 105 101 100 69 100 101 100 131 10 102\n", "output": "16\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 26\n", "output": "95\n"}, {"input": "5\n29 15 13 12 14\n", "output": "4\n"}, {"input": "4\n230 100 001 6\n", "output": "3\n"}, {"input": "2\n340 29\n", "output": "1\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 26\n", "output": "95\n"}, {"input": "5\n42 15 13 12 14\n", "output": "4\n"}, {"input": "4\n117 100 001 6\n", "output": "3\n"}, {"input": "2\n340 19\n", "output": "1\n"}, {"input": "10\n1 1 4 3 4 12 2 4 2 2\n", "output": "7\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 65 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 26\n", "output": "95\n"}, {"input": "4\n166 100 001 6\n", "output": "3\n"}, {"input": "2\n179 19\n", "output": "1\n"}, {"input": "4\n166 110 001 6\n", "output": "3\n"}, {"input": "2\n179 5\n", "output": "1\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 65 37 74 7 6 23 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n166 111 001 6\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 111 001 6\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 111 101 6\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 17 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 111 100 6\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 17 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 111 100 2\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 6 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 17 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 101 100 2\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 6 106 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 17 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 101 110 2\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 6 106 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 12 34 48 17 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 101 110 3\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 6 106 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 12 34 48 17 134 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 111 110 3\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 6 106 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 12 34 48 17 134 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 12 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 111 110 5\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 6 106 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 12 34 48 17 134 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 15 13 92 54 38 5 26 56 12 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}]}, "problem_time_curve_coefficient_list": [0.000711799140625, 0.00046805663279413166, 0.00029761588391881557, 0.0001840972350169362, 0.0001635716388084572, 0.00016015356198098777, 0.00015844845364025912, 0.000158211864414882, 0.00015813686535729894, 0.00015520019797585227, 0.00015343145627631378, 0.00015175317679195805, 0.00014892661412805943, 0.00014628233756752015, 0.0001183980847098214, 2.7846213805725532e-05, 1.5471704249630924e-05, 1.4404580009833917e-05, 1.385853825666521e-05, 1.262120256501311e-05, 1.2593327756228148e-05, 1.1417358842329546e-05, 1.1299151333041957e-05, 1.0756825570913463e-05, 1.0336418214597902e-05, 9.860519845388985e-06, 9.811770118553321e-06, 8.825631337412587e-06, 8.15847362598339e-06, 8.062373197115387e-06, 7.177919676027106e-06, 6.5304082850743005e-06, 6.450665401005244e-06, 6.258719378277972e-06, 6.11246862707605e-06, 5.6030650950611895e-06, 5.468694206184441e-06, 5.410303089488637e-06, 5.126745192307692e-06, 5.029262456293707e-06, 5.026348694274475e-06, 4.7758402944711535e-06, 4.702838040865386e-06, 4.470310738090035e-06, 4.3323303649475525e-06, 3.950734019886365e-06, 3.7763497322989515e-06, 3.232059765624999e-06, 3.214120137674825e-06, 3.169362557364511e-06, 3.16885925207605e-06, 3.1555234899522002e-06, 3.1372131228146854e-06, 3.127185915646853e-06, 3.114584967766609e-06, 3.113229881446679e-06, 3.1035212112106647e-06, 3.102959489729021e-06, 3.0983945722246506e-06, 3.095882512019231e-06, 3.083002253605769e-06, 3.058328029392483e-06, 3.0509557610358397e-06, 3.042058033763112e-06, 3.0283927283653846e-06, 3.0170818673513987e-06, 3.0139051710008744e-06, 3.0041210664335662e-06, 2.9885423951048953e-06, 2.9861140187937066e-06, 2.9841797557910844e-06, 2.9815263876748255e-06, 2.118297312062937e-06, 2.111503004807692e-06, 2.0536013712849653e-06, 1.9031039253715036e-06, 1.3663816652097902e-09, 6.239892919580421e-10, 1.7889532342657342e-10, 1.7651879370629382e-10, 1.6667804851398607e-10, 1.5502758959790215e-10, 1.297120847902097e-10, 5.310997596153842e-11], "human_label": true, "framework_note": ""}, "O(nlogn)": {"problem_name": "651_B. Beautiful Paintings", "problem_id": "1054", "solution_id": "1054_212", "description": "There are n pictures delivered for the new exhibition. The i-th painting has beauty ai. We know that a visitor becomes happy every time he passes from a painting to a more beautiful one.\n\nWe are allowed to arranged pictures in any order. What is the maximum possible number of times the visitor may become happy while passing all pictures from first to last? In other words, we are allowed to rearrange elements of a in any order. What is the maximum possible number of indices i (1 \u2264 i \u2264 n - 1), such that ai + 1 > ai.\n\nInput\n\nThe first line of the input contains integer n (1 \u2264 n \u2264 1000) \u2014 the number of painting.\n\nThe second line contains the sequence a1, a2, ..., an (1 \u2264 ai \u2264 1000), where ai means the beauty of the i-th painting.\n\nOutput\n\nPrint one integer \u2014 the maximum possible number of neighbouring pairs, such that ai + 1 > ai, after the optimal rearrangement.\n\nExamples\n\nInput\n\n5\n20 30 10 50 40\n\n\nOutput\n\n4\n\n\nInput\n\n4\n200 100 100 200\n\n\nOutput\n\n2\n\nNote\n\nIn the first sample, the optimal order is: 10, 20, 30, 40, 50.\n\nIn the second sample, the optimal order is: 100, 200, 100, 200.", "solution_code": "import sys\nfrom collections import Counter\ninput = sys.stdin.readline\n\nn = int(input())\na = dict(Counter(sorted(input().split())))\n\nans = 0\nf = 0\nfor val in a:\n    ans += min(f, a[val])\n    f += max(a[val] - f, 0)\nprint(ans)", "dataclass_code": "import sys\nimport time\nimport itertools\nfrom itertools import accumulate, product, permutations, combinations\nimport collections\nfrom collections import Counter, OrderedDict, deque, defaultdict, ChainMap\nfrom functools import lru_cache\nimport math\nfrom math import sqrt, sin, cos, tan, ceil, fabs, floor, gcd, exp, log, log2\nimport fractions\nfrom typing import List, Tuple\nimport numpy as np\nimport random\nimport heapq\nfrom heapq import *\nfrom dataclasses import dataclass\n\nimport builtins\nimport re\n\ndef strip(s, characters = None):\n    if characters is None:\n        characters = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n    else:\n        characters = list(characters)\n\n    characters = [x for x in characters if len(x) > 0] \n\n    i = 0\n    while i < len(s):\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[i:i + len(sep_candidate)] == sep_candidate:\n                found_sep_candidate = True\n                i += len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    j = len(s) - 1\n    while j >= 0:\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[j + 1 - len(sep_candidate):j+1] == sep_candidate:\n                found_sep_candidate = True\n                j -= len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    return s[i:j+1]\n\ndef split(s, sep=None, maxsplit=-1):\n    if sep == '':\n        raise builtins.ValueError('empty separator')\n\n    if type(sep) == list and '' in sep:\n        raise builtins.ValueError('empty separator')\n\n    if sep is None:\n        sep = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n        result = []\n        word = ''\n        count_split = 0\n        \n        if maxsplit == -1:\n            maxsplit = len(s) * 1000\n\n        i = 0\n        while i < len(s):\n            found_sep_candidate = False\n\n            for sep_candidate in sep:\n                if s[i:i + len(sep_candidate)] == sep_candidate:\n                    found_sep_candidate = True\n\n                    if word:\n                        result.append(word)\n                        count_split += 1\n                        word = ''\n\n                    i += len(sep_candidate)\n                    break\n\n            if not found_sep_candidate and count_split < maxsplit:\n                word += s[i]\n                i += 1\n\n            elif not found_sep_candidate and count_split >= maxsplit:\n                word += s[i:]\n                i = len(s)\n\n        if word:\n            result.append(word)\n        return result\n    \n    if type(sep) == str:\n        sep = [sep]\n\n    if maxsplit == -1:\n        maxsplit = 0\n    elif maxsplit == 0:\n        maxsplit = -1\n\n    return re.split(re.compile(\"|\".join([re.escape(x) for x in sep])), s, maxsplit=maxsplit)\n\nclass str_escaped(str):\n    def split(self, sep=None, maxsplit=-1):\n        return split(self, sep=sep, maxsplit=maxsplit)\n    \n    def strip(self, chars=None):\n        return strip(self, characters = chars)\n\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Input:\n    n: int\n    a_list: List[int]\n\n    @classmethod\n    def from_str(cls, input_: str):\n        n, a_list, _ = input_.split('\\n')\n        n = int(n)\n        a_list = [int(x) for x in a_list.split(' ')]\n        assert n == len(a_list)\n        return cls(n, a_list)\n\n    def __repr__(self):\n        return str(self.n) + '\\n' + ' '.join([str(x) for x in self.a_list]) + '\\n'\n", "inputs_example": "5\n20 30 10 50 40\n", "time_complexity_inferred": "O(nlogn)", "time_curve_coefficient": 1.4600585536413834e-05, "tests": {"public_tests": [{"input": "5\n20 30 10 50 40\n", "output": "4\n"}, {"input": "4\n200 100 100 200\n", "output": "2\n"}], "private_tests": [{"input": "10\n103 101 103 103 101 102 100 100 101 104\n", "output": "7\n"}, {"input": "20\n990 994 996 999 997 994 990 992 990 993 992 990 999 999 992 994 997 990 993 998\n", "output": "15\n"}, {"input": "100\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 3 6 6 6 6 6 7 2 7 2 4 7 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 8 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 5 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 6 6 4 9 9 8 9\n", "output": "84\n"}, {"input": "1\n995\n", "output": "0\n"}, {"input": "2\n444 333\n", "output": "1\n"}, {"input": "1\n1000\n", "output": "0\n"}, {"input": "10\n2 2 2 2 2 2 2 2 2 2\n", "output": "0\n"}, {"input": "20\n102 100 102 104 102 101 104 103 100 103 105 105 100 105 100 100 101 105 105 102\n", "output": "15\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 9 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 76 55 72 89 4 78 27 29 82 18 83 12 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}], "generated_tests": [{"input": "10\n199 101 103 103 101 102 100 100 101 104\n", "output": "7\n"}, {"input": "100\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 3 6 6 6 6 6 7 2 7 2 4 1 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 8 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 5 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 6 6 4 9 9 8 9\n", "output": "84\n"}, {"input": "2\n444 312\n", "output": "1\n"}, {"input": "20\n102 100 102 104 102 101 104 103 100 103 105 105 100 105 100 100 101 105 10 102\n", "output": "15\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 9 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 76 55 72 89 4 78 27 29 82 13 83 12 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n20 19 10 50 40\n", "output": "4\n"}, {"input": "4\n200 100 101 200\n", "output": "2\n"}, {"input": "4\n200 100 101 125\n", "output": "3\n"}, {"input": "20\n102 100 102 104 102 101 104 103 100 103 105 101 100 105 100 101 101 105 10 102\n", "output": "16\n"}, {"input": "100\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 3 6 6 6 6 6 7 2 7 2 4 1 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 13 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 10 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 4 6 4 9 9 8 9\n", "output": "85\n"}, {"input": "10\n199 101 86 95 001 102 100 100 101 104\n", "output": "8\n"}, {"input": "10\n2 5 4 2 4 12 2 4 2 2\n", "output": "5\n"}, {"input": "10\n2 1 4 3 4 12 2 4 2 2\n", "output": "6\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 65 37 74 7 6 23 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "10\n2 3 2 2 2 2 2 2 2 2\n", "output": "1\n"}, {"input": "10\n199 101 66 103 101 102 100 100 101 104\n", "output": "7\n"}, {"input": "100\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 3 6 6 6 6 6 7 2 7 2 4 1 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 8 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 10 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 6 6 4 9 9 8 9\n", "output": "84\n"}, {"input": "2\n444 233\n", "output": "1\n"}, {"input": "10\n2 3 2 2 2 4 2 2 2 2\n", "output": "2\n"}, {"input": "20\n102 100 102 104 102 101 104 103 100 103 105 101 100 105 100 100 101 105 10 102\n", "output": "15\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 9 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 76 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n20 19 13 50 40\n", "output": "4\n"}, {"input": "10\n199 101 86 103 101 102 100 100 101 104\n", "output": "7\n"}, {"input": "100\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 3 6 6 6 6 6 7 2 7 2 4 1 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 13 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 10 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 6 6 4 9 9 8 9\n", "output": "84\n"}, {"input": "2\n251 233\n", "output": "1\n"}, {"input": "10\n2 3 2 2 2 8 2 2 2 2\n", "output": "2\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 76 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n20 19 13 50 10\n", "output": "4\n"}, {"input": "4\n200 110 101 125\n", "output": "3\n"}, {"input": "10\n199 101 86 95 101 102 100 100 101 104\n", "output": "7\n"}, {"input": "2\n251 75\n", "output": "1\n"}, {"input": "10\n2 3 2 2 2 8 2 4 2 2\n", "output": "3\n"}, {"input": "20\n102 100 102 22 102 101 104 103 100 103 105 101 100 105 100 101 101 105 10 102\n", "output": "16\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 139 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n20 19 13 50 14\n", "output": "4\n"}, {"input": "4\n190 110 101 125\n", "output": "3\n"}, {"input": "100\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 2 6 6 6 6 6 7 2 7 2 4 1 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 13 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 10 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 4 6 4 9 9 8 9\n", "output": "85\n"}, {"input": "2\n251 42\n", "output": "1\n"}, {"input": "10\n2 3 2 2 2 12 2 4 2 2\n", "output": "3\n"}, {"input": "20\n102 100 102 22 102 101 104 56 100 103 105 101 100 105 100 101 101 105 10 102\n", "output": "16\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n20 19 13 23 14\n", "output": "4\n"}, {"input": "4\n190 110 001 125\n", "output": "3\n"}, {"input": "10\n199 101 86 95 001 102 100 100 001 104\n", "output": "8\n"}, {"input": "2\n251 30\n", "output": "1\n"}, {"input": "10\n2 5 2 2 2 12 2 4 2 2\n", "output": "3\n"}, {"input": "20\n102 100 102 22 102 101 104 56 100 103 105 101 100 105 100 101 100 105 10 102\n", "output": "15\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n15 19 13 23 14\n", "output": "4\n"}, {"input": "4\n230 110 001 125\n", "output": "3\n"}, {"input": "10\n199 001 86 95 001 102 100 100 001 104\n", "output": "7\n"}, {"input": "2\n207 30\n", "output": "1\n"}, {"input": "10\n2 5 2 2 4 12 2 4 2 2\n", "output": "4\n"}, {"input": "20\n102 100 102 22 102 101 104 56 100 103 105 101 100 105 100 101 100 131 10 102\n", "output": "15\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n29 19 13 23 14\n", "output": "4\n"}, {"input": "4\n230 110 001 199\n", "output": "3\n"}, {"input": "2\n340 30\n", "output": "1\n"}, {"input": "20\n102 100 102 22 102 101 104 56 100 103 105 101 100 69 100 101 100 131 10 102\n", "output": "15\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n29 19 13 12 14\n", "output": "4\n"}, {"input": "4\n230 110 001 6\n", "output": "3\n"}, {"input": "2\n340 37\n", "output": "1\n"}, {"input": "10\n2 1 4 2 4 12 2 4 2 2\n", "output": "5\n"}, {"input": "20\n102 110 102 22 102 101 104 56 100 103 105 101 100 69 100 101 100 131 10 102\n", "output": "16\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 26\n", "output": "95\n"}, {"input": "5\n29 15 13 12 14\n", "output": "4\n"}, {"input": "4\n230 100 001 6\n", "output": "3\n"}, {"input": "2\n340 29\n", "output": "1\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 26\n", "output": "95\n"}, {"input": "5\n42 15 13 12 14\n", "output": "4\n"}, {"input": "4\n117 100 001 6\n", "output": "3\n"}, {"input": "2\n340 19\n", "output": "1\n"}, {"input": "10\n1 1 4 3 4 12 2 4 2 2\n", "output": "7\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 65 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 26\n", "output": "95\n"}, {"input": "4\n166 100 001 6\n", "output": "3\n"}, {"input": "2\n179 19\n", "output": "1\n"}, {"input": "4\n166 110 001 6\n", "output": "3\n"}, {"input": "2\n179 5\n", "output": "1\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 65 37 74 7 6 23 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n166 111 001 6\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 111 001 6\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 111 101 6\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 17 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 111 100 6\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 17 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 111 100 2\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 6 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 17 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 101 100 2\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 6 106 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 17 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 101 110 2\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 6 106 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 12 34 48 17 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 101 110 3\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 6 106 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 12 34 48 17 134 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 111 110 3\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 6 106 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 12 34 48 17 134 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 12 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 111 110 5\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 6 106 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 12 34 48 17 134 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 15 13 92 54 38 5 26 56 12 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}]}, "problem_time_curve_coefficient_list": [2.675380585155266e-05, 2.469994344177039e-05, 1.7008904459472226e-05, 1.5942229663915453e-05, 1.5777795385040063e-05, 1.5664421199527484e-05, 1.5517348347107393e-05, 1.548344275293781e-05, 1.5437206319232974e-05, 1.5220380844380558e-05, 1.5217050313383295e-05, 1.5168105640329107e-05, 1.5150441854010722e-05, 1.5099964635479947e-05, 1.5081432734954954e-05, 1.5039724496654441e-05, 1.5003888926569278e-05, 1.4914282179787381e-05, 1.4831216306106331e-05, 1.4796193506805022e-05, 1.4751731425426492e-05, 1.4660374263054925e-05, 1.4659715363259992e-05, 1.4659643345357949e-05, 1.4631117192298772e-05, 1.4629974750223655e-05, 1.4624403947072842e-05, 1.462102150540498e-05, 1.4604517597493751e-05, 1.4600585536413834e-05, 1.459531133286418e-05, 1.4593972016582799e-05, 1.4583142086101739e-05, 1.454109457006266e-05, 1.4540290359553432e-05, 1.4532258219321634e-05, 1.4507242567707272e-05, 1.4500705512298161e-05, 1.4453608165190354e-05, 1.324556891733222e-05, 1.2877596004902634e-05, 1.2642935633260898e-05, 1.263668290971431e-05, 1.2491145836254122e-05, 1.235567599241162e-05, 2.850763272420178e-06, 2.8405986613898665e-06, 7.257745731037166e-07, 1.693755463286714e-10, 1.2861283378723814e-10, 1.0396890861126864e-10, 4.742815777972026e-11], "human_label": true, "framework_note": ""}, "O(n**2)": {"problem_name": "651_B. Beautiful Paintings", "problem_id": "1054", "solution_id": "1054_216", "description": "There are n pictures delivered for the new exhibition. The i-th painting has beauty ai. We know that a visitor becomes happy every time he passes from a painting to a more beautiful one.\n\nWe are allowed to arranged pictures in any order. What is the maximum possible number of times the visitor may become happy while passing all pictures from first to last? In other words, we are allowed to rearrange elements of a in any order. What is the maximum possible number of indices i (1 \u2264 i \u2264 n - 1), such that ai + 1 > ai.\n\nInput\n\nThe first line of the input contains integer n (1 \u2264 n \u2264 1000) \u2014 the number of painting.\n\nThe second line contains the sequence a1, a2, ..., an (1 \u2264 ai \u2264 1000), where ai means the beauty of the i-th painting.\n\nOutput\n\nPrint one integer \u2014 the maximum possible number of neighbouring pairs, such that ai + 1 > ai, after the optimal rearrangement.\n\nExamples\n\nInput\n\n5\n20 30 10 50 40\n\n\nOutput\n\n4\n\n\nInput\n\n4\n200 100 100 200\n\n\nOutput\n\n2\n\nNote\n\nIn the first sample, the optimal order is: 10, 20, 30, 40, 50.\n\nIn the second sample, the optimal order is: 100, 200, 100, 200.", "solution_code": "# -*- codeing:utf-8 -*-\n\nclass A(object):\n\tdef __init__(self):\n\t\tself.AC()\n\n\tdef GetData(self):\n\t\tself.m_N = int(input())\n\t\tself.m_X = [int(x) for x in input().split()]\n\n\tdef AC(self):\n\t\tself.GetData()\n\t\tans = 0\n\t\twhile self.m_X:\n\t\t\tself.m_Y = []\n\t\t\tfor x in self.m_X:\n\t\t\t\tif x not in self.m_Y:\n\t\t\t\t\tself.m_Y.append(x)\n\t\t\tans += (len(self.m_Y)-1)\n\t\t\tfor x in self.m_Y:\n\t\t\t\tself.m_X.remove(x)\n\t\tprint(ans)\n\nA()\n\n", "dataclass_code": "import sys\nimport time\nimport itertools\nfrom itertools import accumulate, product, permutations, combinations\nimport collections\nfrom collections import Counter, OrderedDict, deque, defaultdict, ChainMap\nfrom functools import lru_cache\nimport math\nfrom math import sqrt, sin, cos, tan, ceil, fabs, floor, gcd, exp, log, log2\nimport fractions\nfrom typing import List, Tuple\nimport numpy as np\nimport random\nimport heapq\nfrom heapq import *\nfrom dataclasses import dataclass\n\nimport builtins\nimport re\n\ndef strip(s, characters = None):\n    if characters is None:\n        characters = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n    else:\n        characters = list(characters)\n\n    characters = [x for x in characters if len(x) > 0] \n\n    i = 0\n    while i < len(s):\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[i:i + len(sep_candidate)] == sep_candidate:\n                found_sep_candidate = True\n                i += len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    j = len(s) - 1\n    while j >= 0:\n        found_sep_candidate = False\n\n        for sep_candidate in characters:\n            if s[j + 1 - len(sep_candidate):j+1] == sep_candidate:\n                found_sep_candidate = True\n                j -= len(sep_candidate)\n                break\n\n        if not found_sep_candidate:\n            break\n\n    return s[i:j+1]\n\ndef split(s, sep=None, maxsplit=-1):\n    if sep == '':\n        raise builtins.ValueError('empty separator')\n\n    if type(sep) == list and '' in sep:\n        raise builtins.ValueError('empty separator')\n\n    if sep is None:\n        sep = [' ', '\\t', '\\n', '\\r', '\\v', '\\f']\n        result = []\n        word = ''\n        count_split = 0\n        \n        if maxsplit == -1:\n            maxsplit = len(s) * 1000\n\n        i = 0\n        while i < len(s):\n            found_sep_candidate = False\n\n            for sep_candidate in sep:\n                if s[i:i + len(sep_candidate)] == sep_candidate:\n                    found_sep_candidate = True\n\n                    if word:\n                        result.append(word)\n                        count_split += 1\n                        word = ''\n\n                    i += len(sep_candidate)\n                    break\n\n            if not found_sep_candidate and count_split < maxsplit:\n                word += s[i]\n                i += 1\n\n            elif not found_sep_candidate and count_split >= maxsplit:\n                word += s[i:]\n                i = len(s)\n\n        if word:\n            result.append(word)\n        return result\n    \n    if type(sep) == str:\n        sep = [sep]\n\n    if maxsplit == -1:\n        maxsplit = 0\n    elif maxsplit == 0:\n        maxsplit = -1\n\n    return re.split(re.compile(\"|\".join([re.escape(x) for x in sep])), s, maxsplit=maxsplit)\n\nclass str_escaped(str):\n    def split(self, sep=None, maxsplit=-1):\n        return split(self, sep=sep, maxsplit=maxsplit)\n    \n    def strip(self, chars=None):\n        return strip(self, characters = chars)\n\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Input:\n    n: int\n    a_list: List[int]\n\n    @classmethod\n    def from_str(cls, input_: str):\n        n, a_list, _ = input_.split('\\n')\n        n = int(n)\n        a_list = [int(x) for x in a_list.split(' ')]\n        assert n == len(a_list)\n        return cls(n, a_list)\n\n    def __repr__(self):\n        return str(self.n) + '\\n' + ' '.join([str(x) for x in self.a_list]) + '\\n'\n", "inputs_example": "5\n20 30 10 50 40\n", "time_complexity_inferred": "O(n**2)", "time_curve_coefficient": 3.81689557802798e-07, "tests": {"public_tests": [{"input": "5\n20 30 10 50 40\n", "output": "4\n"}, {"input": "4\n200 100 100 200\n", "output": "2\n"}], "private_tests": [{"input": "10\n103 101 103 103 101 102 100 100 101 104\n", "output": "7\n"}, {"input": "20\n990 994 996 999 997 994 990 992 990 993 992 990 999 999 992 994 997 990 993 998\n", "output": "15\n"}, {"input": "100\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 3 6 6 6 6 6 7 2 7 2 4 7 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 8 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 5 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 6 6 4 9 9 8 9\n", "output": "84\n"}, {"input": "1\n995\n", "output": "0\n"}, {"input": "2\n444 333\n", "output": "1\n"}, {"input": "1\n1000\n", "output": "0\n"}, {"input": "10\n2 2 2 2 2 2 2 2 2 2\n", "output": "0\n"}, {"input": "20\n102 100 102 104 102 101 104 103 100 103 105 105 100 105 100 100 101 105 105 102\n", "output": "15\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 9 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 76 55 72 89 4 78 27 29 82 18 83 12 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}], "generated_tests": [{"input": "10\n199 101 103 103 101 102 100 100 101 104\n", "output": "7\n"}, {"input": "100\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 3 6 6 6 6 6 7 2 7 2 4 1 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 8 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 5 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 6 6 4 9 9 8 9\n", "output": "84\n"}, {"input": "2\n444 312\n", "output": "1\n"}, {"input": "20\n102 100 102 104 102 101 104 103 100 103 105 105 100 105 100 100 101 105 10 102\n", "output": "15\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 9 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 76 55 72 89 4 78 27 29 82 13 83 12 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n20 19 10 50 40\n", "output": "4\n"}, {"input": "4\n200 100 101 200\n", "output": "2\n"}, {"input": "4\n200 100 101 125\n", "output": "3\n"}, {"input": "20\n102 100 102 104 102 101 104 103 100 103 105 101 100 105 100 101 101 105 10 102\n", "output": "16\n"}, {"input": "100\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 3 6 6 6 6 6 7 2 7 2 4 1 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 13 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 10 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 4 6 4 9 9 8 9\n", "output": "85\n"}, {"input": "10\n199 101 86 95 001 102 100 100 101 104\n", "output": "8\n"}, {"input": "10\n2 5 4 2 4 12 2 4 2 2\n", "output": "5\n"}, {"input": "10\n2 1 4 3 4 12 2 4 2 2\n", "output": "6\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 65 37 74 7 6 23 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "10\n2 3 2 2 2 2 2 2 2 2\n", "output": "1\n"}, {"input": "10\n199 101 66 103 101 102 100 100 101 104\n", "output": "7\n"}, {"input": "100\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 3 6 6 6 6 6 7 2 7 2 4 1 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 8 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 10 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 6 6 4 9 9 8 9\n", "output": "84\n"}, {"input": "2\n444 233\n", "output": "1\n"}, {"input": "10\n2 3 2 2 2 4 2 2 2 2\n", "output": "2\n"}, {"input": "20\n102 100 102 104 102 101 104 103 100 103 105 101 100 105 100 100 101 105 10 102\n", "output": "15\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 9 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 76 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n20 19 13 50 40\n", "output": "4\n"}, {"input": "10\n199 101 86 103 101 102 100 100 101 104\n", "output": "7\n"}, {"input": "100\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 3 6 6 6 6 6 7 2 7 2 4 1 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 13 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 10 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 6 6 4 9 9 8 9\n", "output": "84\n"}, {"input": "2\n251 233\n", "output": "1\n"}, {"input": "10\n2 3 2 2 2 8 2 2 2 2\n", "output": "2\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 76 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n20 19 13 50 10\n", "output": "4\n"}, {"input": "4\n200 110 101 125\n", "output": "3\n"}, {"input": "10\n199 101 86 95 101 102 100 100 101 104\n", "output": "7\n"}, {"input": "2\n251 75\n", "output": "1\n"}, {"input": "10\n2 3 2 2 2 8 2 4 2 2\n", "output": "3\n"}, {"input": "20\n102 100 102 22 102 101 104 103 100 103 105 101 100 105 100 101 101 105 10 102\n", "output": "16\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 139 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n20 19 13 50 14\n", "output": "4\n"}, {"input": "4\n190 110 101 125\n", "output": "3\n"}, {"input": "100\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 2 6 6 6 6 6 7 2 7 2 4 1 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 13 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 10 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 4 6 4 9 9 8 9\n", "output": "85\n"}, {"input": "2\n251 42\n", "output": "1\n"}, {"input": "10\n2 3 2 2 2 12 2 4 2 2\n", "output": "3\n"}, {"input": "20\n102 100 102 22 102 101 104 56 100 103 105 101 100 105 100 101 101 105 10 102\n", "output": "16\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n20 19 13 23 14\n", "output": "4\n"}, {"input": "4\n190 110 001 125\n", "output": "3\n"}, {"input": "10\n199 101 86 95 001 102 100 100 001 104\n", "output": "8\n"}, {"input": "2\n251 30\n", "output": "1\n"}, {"input": "10\n2 5 2 2 2 12 2 4 2 2\n", "output": "3\n"}, {"input": "20\n102 100 102 22 102 101 104 56 100 103 105 101 100 105 100 101 100 105 10 102\n", "output": "15\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n15 19 13 23 14\n", "output": "4\n"}, {"input": "4\n230 110 001 125\n", "output": "3\n"}, {"input": "10\n199 001 86 95 001 102 100 100 001 104\n", "output": "7\n"}, {"input": "2\n207 30\n", "output": "1\n"}, {"input": "10\n2 5 2 2 4 12 2 4 2 2\n", "output": "4\n"}, {"input": "20\n102 100 102 22 102 101 104 56 100 103 105 101 100 105 100 101 100 131 10 102\n", "output": "15\n"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n29 19 13 23 14\n", "output": "4\n"}, {"input": "4\n230 110 001 199\n", "output": "3\n"}, {"input": "2\n340 30\n", "output": "1\n"}, {"input": "20\n102 100 102 22 102 101 104 56 100 103 105 101 100 69 100 101 100 131 10 102\n", "output": "15\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\n", "output": "95\n"}, {"input": "5\n29 19 13 12 14\n", "output": "4\n"}, {"input": "4\n230 110 001 6\n", "output": "3\n"}, {"input": "2\n340 37\n", "output": "1\n"}, {"input": "10\n2 1 4 2 4 12 2 4 2 2\n", "output": "5\n"}, {"input": "20\n102 110 102 22 102 101 104 56 100 103 105 101 100 69 100 101 100 131 10 102\n", "output": "16\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 26\n", "output": "95\n"}, {"input": "5\n29 15 13 12 14\n", "output": "4\n"}, {"input": "4\n230 100 001 6\n", "output": "3\n"}, {"input": "2\n340 29\n", "output": "1\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 26\n", "output": "95\n"}, {"input": "5\n42 15 13 12 14\n", "output": "4\n"}, {"input": "4\n117 100 001 6\n", "output": "3\n"}, {"input": "2\n340 19\n", "output": "1\n"}, {"input": "10\n1 1 4 3 4 12 2 4 2 2\n", "output": "7\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 65 37 74 7 6 29 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 26\n", "output": "95\n"}, {"input": "4\n166 100 001 6\n", "output": "3\n"}, {"input": "2\n179 19\n", "output": "1\n"}, {"input": "4\n166 110 001 6\n", "output": "3\n"}, {"input": "2\n179 5\n", "output": "1\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 65 37 74 7 6 23 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n166 111 001 6\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 111 001 6\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 111 101 6\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 17 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 111 100 6\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 18 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 17 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 111 100 2\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 6 73 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 17 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 101 100 2\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 6 106 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 19 34 48 17 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 101 110 2\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 6 106 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 12 34 48 17 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 101 110 3\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 6 106 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 12 34 48 17 134 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 17 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 111 110 3\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 6 106 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 12 34 48 17 134 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 66 13 92 54 38 5 26 56 12 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}, {"input": "4\n113 111 110 5\n", "output": "3\n"}, {"input": "100\n9 9 49 55 14 8 55 58 35 67 3 6 106 169 41 49 15 60 18 66 3 26 97 47 43 88 71 98 12 34 48 17 134 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 20 4 65 37 74 7 6 24 210 55 72 89 4 78 27 29 82 13 83 18 4 32 69 89 91 15 13 92 54 38 5 26 56 12 98 29 4 17 39 29 181 3 67 85 98 21 26\n", "output": "96\n"}]}, "problem_time_curve_coefficient_list": [0.0015303004178232982, 0.0010184545989398227, 0.00020253594800655528, 0.00019778053668749227, 0.00010426719082042884, 0.00010184995287332837, 4.4359569258795816e-05, 3.249335268289125e-05, 8.201964309261037e-06, 7.339011129260066e-06, 7.2329450895160915e-06, 6.607332860166019e-06, 6.246406602646994e-06, 5.641766954698707e-06, 5.5043670129838385e-06, 5.494207606598537e-06, 4.433351231250186e-06, 4.345002068352796e-06, 4.264741939239268e-06, 4.195475522765715e-06, 3.6105452283858173e-06, 2.8292163025057934e-06, 2.520243337801583e-06, 2.02894900319696e-06, 2.0077445099161435e-06, 1.8376323151254077e-06, 1.7899895853063854e-06, 1.7287651491779364e-06, 1.7267221588120905e-06, 1.7145391282259491e-06, 1.6981693013307035e-06, 1.551937716785983e-06, 1.5346670585375966e-06, 1.1649199005531812e-06, 9.131019211038894e-07, 8.599372914940606e-07, 6.186570948312322e-07, 5.793172105414216e-07, 3.81689557802798e-07, 3.2421040456755347e-07, 3.1156208991941136e-07, 2.9790658453812484e-07, 2.512959282078424e-07, 2.0434523134929866e-07, 2.00821864034692e-07, 1.9714094939088988e-07, 1.9669517975129346e-07, 1.923310021403912e-07, 1.9170206814464203e-07, 1.906868184453907e-07, 1.8623176671947822e-07, 1.8279189727243966e-07, 1.5545878289999772e-07, 1.3610452148723548e-07, 1.3588749988831798e-07, 1.357264727097299e-07, 1.3522540345319905e-07, 1.3522022980613936e-07, 1.3478893947451746e-07, 1.3474111978320071e-07, 1.3469356439209873e-07, 1.346383393580303e-07, 1.3462350220015015e-07, 1.340126440736765e-07, 1.315687925158099e-07, 1.2958562038569733e-07, 1.2871853860439853e-07, 1.2816122881424924e-07, 1.2717279524517482e-07, 1.266803697659876e-07, 9.861517628596972e-08, 9.826810995255435e-08, 9.456471056382699e-08, 8.479522976086263e-08, 5.926254215344451e-08, 4.44722472561628e-08, 3.529590295931646e-08, 6.672721809440559e-11, 4.579215378464774e-14, 2.3528541706878112e-14], "human_label": false, "framework_note": "Though the dynamic inference complexity framework identified this class of complexity as O(n**2), in practice the referenced human solution below runs in O(n**3). This is one of the cases where the framework can fail to find the worst case complexity. It still remains interesting to compare with what the LLMs output."}}}